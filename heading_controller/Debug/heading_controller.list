
heading_controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007774  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003a4  08007978  08007978  00017978  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007d1c  08007d1c  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  08007d1c  08007d1c  00017d1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007d24  08007d24  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007d24  08007d24  00017d24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007d28  08007d28  00017d28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  08007d2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002cc  200001d4  08007f00  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004a0  08007f00  000204a0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020202  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f745  00000000  00000000  00020245  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001f2a  00000000  00000000  0002f98a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e10  00000000  00000000  000318b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b01  00000000  00000000  000326c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00029130  00000000  00000000  000331c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001162f  00000000  00000000  0005c2f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00102842  00000000  00000000  0006d928  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004ae8  00000000  00000000  0017016c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  00174c54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001d4 	.word	0x200001d4
 800021c:	00000000 	.word	0x00000000
 8000220:	0800795c 	.word	0x0800795c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001d8 	.word	0x200001d8
 800023c:	0800795c 	.word	0x0800795c

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b970 	b.w	80005e8 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	460d      	mov	r5, r1
 8000328:	4604      	mov	r4, r0
 800032a:	460f      	mov	r7, r1
 800032c:	2b00      	cmp	r3, #0
 800032e:	d14a      	bne.n	80003c6 <__udivmoddi4+0xa6>
 8000330:	428a      	cmp	r2, r1
 8000332:	4694      	mov	ip, r2
 8000334:	d965      	bls.n	8000402 <__udivmoddi4+0xe2>
 8000336:	fab2 f382 	clz	r3, r2
 800033a:	b143      	cbz	r3, 800034e <__udivmoddi4+0x2e>
 800033c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000340:	f1c3 0220 	rsb	r2, r3, #32
 8000344:	409f      	lsls	r7, r3
 8000346:	fa20 f202 	lsr.w	r2, r0, r2
 800034a:	4317      	orrs	r7, r2
 800034c:	409c      	lsls	r4, r3
 800034e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000352:	fa1f f58c 	uxth.w	r5, ip
 8000356:	fbb7 f1fe 	udiv	r1, r7, lr
 800035a:	0c22      	lsrs	r2, r4, #16
 800035c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000360:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000364:	fb01 f005 	mul.w	r0, r1, r5
 8000368:	4290      	cmp	r0, r2
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x62>
 800036c:	eb1c 0202 	adds.w	r2, ip, r2
 8000370:	f101 37ff 	add.w	r7, r1, #4294967295
 8000374:	f080 811c 	bcs.w	80005b0 <__udivmoddi4+0x290>
 8000378:	4290      	cmp	r0, r2
 800037a:	f240 8119 	bls.w	80005b0 <__udivmoddi4+0x290>
 800037e:	3902      	subs	r1, #2
 8000380:	4462      	add	r2, ip
 8000382:	1a12      	subs	r2, r2, r0
 8000384:	b2a4      	uxth	r4, r4
 8000386:	fbb2 f0fe 	udiv	r0, r2, lr
 800038a:	fb0e 2210 	mls	r2, lr, r0, r2
 800038e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000392:	fb00 f505 	mul.w	r5, r0, r5
 8000396:	42a5      	cmp	r5, r4
 8000398:	d90a      	bls.n	80003b0 <__udivmoddi4+0x90>
 800039a:	eb1c 0404 	adds.w	r4, ip, r4
 800039e:	f100 32ff 	add.w	r2, r0, #4294967295
 80003a2:	f080 8107 	bcs.w	80005b4 <__udivmoddi4+0x294>
 80003a6:	42a5      	cmp	r5, r4
 80003a8:	f240 8104 	bls.w	80005b4 <__udivmoddi4+0x294>
 80003ac:	4464      	add	r4, ip
 80003ae:	3802      	subs	r0, #2
 80003b0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003b4:	1b64      	subs	r4, r4, r5
 80003b6:	2100      	movs	r1, #0
 80003b8:	b11e      	cbz	r6, 80003c2 <__udivmoddi4+0xa2>
 80003ba:	40dc      	lsrs	r4, r3
 80003bc:	2300      	movs	r3, #0
 80003be:	e9c6 4300 	strd	r4, r3, [r6]
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0xbc>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80ed 	beq.w	80005aa <__udivmoddi4+0x28a>
 80003d0:	2100      	movs	r1, #0
 80003d2:	e9c6 0500 	strd	r0, r5, [r6]
 80003d6:	4608      	mov	r0, r1
 80003d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003dc:	fab3 f183 	clz	r1, r3
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d149      	bne.n	8000478 <__udivmoddi4+0x158>
 80003e4:	42ab      	cmp	r3, r5
 80003e6:	d302      	bcc.n	80003ee <__udivmoddi4+0xce>
 80003e8:	4282      	cmp	r2, r0
 80003ea:	f200 80f8 	bhi.w	80005de <__udivmoddi4+0x2be>
 80003ee:	1a84      	subs	r4, r0, r2
 80003f0:	eb65 0203 	sbc.w	r2, r5, r3
 80003f4:	2001      	movs	r0, #1
 80003f6:	4617      	mov	r7, r2
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d0e2      	beq.n	80003c2 <__udivmoddi4+0xa2>
 80003fc:	e9c6 4700 	strd	r4, r7, [r6]
 8000400:	e7df      	b.n	80003c2 <__udivmoddi4+0xa2>
 8000402:	b902      	cbnz	r2, 8000406 <__udivmoddi4+0xe6>
 8000404:	deff      	udf	#255	; 0xff
 8000406:	fab2 f382 	clz	r3, r2
 800040a:	2b00      	cmp	r3, #0
 800040c:	f040 8090 	bne.w	8000530 <__udivmoddi4+0x210>
 8000410:	1a8a      	subs	r2, r1, r2
 8000412:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000416:	fa1f fe8c 	uxth.w	lr, ip
 800041a:	2101      	movs	r1, #1
 800041c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000420:	fb07 2015 	mls	r0, r7, r5, r2
 8000424:	0c22      	lsrs	r2, r4, #16
 8000426:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800042a:	fb0e f005 	mul.w	r0, lr, r5
 800042e:	4290      	cmp	r0, r2
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x124>
 8000432:	eb1c 0202 	adds.w	r2, ip, r2
 8000436:	f105 38ff 	add.w	r8, r5, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4290      	cmp	r0, r2
 800043e:	f200 80cb 	bhi.w	80005d8 <__udivmoddi4+0x2b8>
 8000442:	4645      	mov	r5, r8
 8000444:	1a12      	subs	r2, r2, r0
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb2 f0f7 	udiv	r0, r2, r7
 800044c:	fb07 2210 	mls	r2, r7, r0, r2
 8000450:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000454:	fb0e fe00 	mul.w	lr, lr, r0
 8000458:	45a6      	cmp	lr, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x14e>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f100 32ff 	add.w	r2, r0, #4294967295
 8000464:	d202      	bcs.n	800046c <__udivmoddi4+0x14c>
 8000466:	45a6      	cmp	lr, r4
 8000468:	f200 80bb 	bhi.w	80005e2 <__udivmoddi4+0x2c2>
 800046c:	4610      	mov	r0, r2
 800046e:	eba4 040e 	sub.w	r4, r4, lr
 8000472:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000476:	e79f      	b.n	80003b8 <__udivmoddi4+0x98>
 8000478:	f1c1 0720 	rsb	r7, r1, #32
 800047c:	408b      	lsls	r3, r1
 800047e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000482:	ea4c 0c03 	orr.w	ip, ip, r3
 8000486:	fa05 f401 	lsl.w	r4, r5, r1
 800048a:	fa20 f307 	lsr.w	r3, r0, r7
 800048e:	40fd      	lsrs	r5, r7
 8000490:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000494:	4323      	orrs	r3, r4
 8000496:	fbb5 f8f9 	udiv	r8, r5, r9
 800049a:	fa1f fe8c 	uxth.w	lr, ip
 800049e:	fb09 5518 	mls	r5, r9, r8, r5
 80004a2:	0c1c      	lsrs	r4, r3, #16
 80004a4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004a8:	fb08 f50e 	mul.w	r5, r8, lr
 80004ac:	42a5      	cmp	r5, r4
 80004ae:	fa02 f201 	lsl.w	r2, r2, r1
 80004b2:	fa00 f001 	lsl.w	r0, r0, r1
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c0:	f080 8088 	bcs.w	80005d4 <__udivmoddi4+0x2b4>
 80004c4:	42a5      	cmp	r5, r4
 80004c6:	f240 8085 	bls.w	80005d4 <__udivmoddi4+0x2b4>
 80004ca:	f1a8 0802 	sub.w	r8, r8, #2
 80004ce:	4464      	add	r4, ip
 80004d0:	1b64      	subs	r4, r4, r5
 80004d2:	b29d      	uxth	r5, r3
 80004d4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004d8:	fb09 4413 	mls	r4, r9, r3, r4
 80004dc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004e0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004e4:	45a6      	cmp	lr, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ec:	f103 35ff 	add.w	r5, r3, #4294967295
 80004f0:	d26c      	bcs.n	80005cc <__udivmoddi4+0x2ac>
 80004f2:	45a6      	cmp	lr, r4
 80004f4:	d96a      	bls.n	80005cc <__udivmoddi4+0x2ac>
 80004f6:	3b02      	subs	r3, #2
 80004f8:	4464      	add	r4, ip
 80004fa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004fe:	fba3 9502 	umull	r9, r5, r3, r2
 8000502:	eba4 040e 	sub.w	r4, r4, lr
 8000506:	42ac      	cmp	r4, r5
 8000508:	46c8      	mov	r8, r9
 800050a:	46ae      	mov	lr, r5
 800050c:	d356      	bcc.n	80005bc <__udivmoddi4+0x29c>
 800050e:	d053      	beq.n	80005b8 <__udivmoddi4+0x298>
 8000510:	b156      	cbz	r6, 8000528 <__udivmoddi4+0x208>
 8000512:	ebb0 0208 	subs.w	r2, r0, r8
 8000516:	eb64 040e 	sbc.w	r4, r4, lr
 800051a:	fa04 f707 	lsl.w	r7, r4, r7
 800051e:	40ca      	lsrs	r2, r1
 8000520:	40cc      	lsrs	r4, r1
 8000522:	4317      	orrs	r7, r2
 8000524:	e9c6 7400 	strd	r7, r4, [r6]
 8000528:	4618      	mov	r0, r3
 800052a:	2100      	movs	r1, #0
 800052c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000530:	f1c3 0120 	rsb	r1, r3, #32
 8000534:	fa02 fc03 	lsl.w	ip, r2, r3
 8000538:	fa20 f201 	lsr.w	r2, r0, r1
 800053c:	fa25 f101 	lsr.w	r1, r5, r1
 8000540:	409d      	lsls	r5, r3
 8000542:	432a      	orrs	r2, r5
 8000544:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000550:	fb07 1510 	mls	r5, r7, r0, r1
 8000554:	0c11      	lsrs	r1, r2, #16
 8000556:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800055a:	fb00 f50e 	mul.w	r5, r0, lr
 800055e:	428d      	cmp	r5, r1
 8000560:	fa04 f403 	lsl.w	r4, r4, r3
 8000564:	d908      	bls.n	8000578 <__udivmoddi4+0x258>
 8000566:	eb1c 0101 	adds.w	r1, ip, r1
 800056a:	f100 38ff 	add.w	r8, r0, #4294967295
 800056e:	d22f      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 8000570:	428d      	cmp	r5, r1
 8000572:	d92d      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 8000574:	3802      	subs	r0, #2
 8000576:	4461      	add	r1, ip
 8000578:	1b49      	subs	r1, r1, r5
 800057a:	b292      	uxth	r2, r2
 800057c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000580:	fb07 1115 	mls	r1, r7, r5, r1
 8000584:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000588:	fb05 f10e 	mul.w	r1, r5, lr
 800058c:	4291      	cmp	r1, r2
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x282>
 8000590:	eb1c 0202 	adds.w	r2, ip, r2
 8000594:	f105 38ff 	add.w	r8, r5, #4294967295
 8000598:	d216      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 800059a:	4291      	cmp	r1, r2
 800059c:	d914      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800059e:	3d02      	subs	r5, #2
 80005a0:	4462      	add	r2, ip
 80005a2:	1a52      	subs	r2, r2, r1
 80005a4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005a8:	e738      	b.n	800041c <__udivmoddi4+0xfc>
 80005aa:	4631      	mov	r1, r6
 80005ac:	4630      	mov	r0, r6
 80005ae:	e708      	b.n	80003c2 <__udivmoddi4+0xa2>
 80005b0:	4639      	mov	r1, r7
 80005b2:	e6e6      	b.n	8000382 <__udivmoddi4+0x62>
 80005b4:	4610      	mov	r0, r2
 80005b6:	e6fb      	b.n	80003b0 <__udivmoddi4+0x90>
 80005b8:	4548      	cmp	r0, r9
 80005ba:	d2a9      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005bc:	ebb9 0802 	subs.w	r8, r9, r2
 80005c0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005c4:	3b01      	subs	r3, #1
 80005c6:	e7a3      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c8:	4645      	mov	r5, r8
 80005ca:	e7ea      	b.n	80005a2 <__udivmoddi4+0x282>
 80005cc:	462b      	mov	r3, r5
 80005ce:	e794      	b.n	80004fa <__udivmoddi4+0x1da>
 80005d0:	4640      	mov	r0, r8
 80005d2:	e7d1      	b.n	8000578 <__udivmoddi4+0x258>
 80005d4:	46d0      	mov	r8, sl
 80005d6:	e77b      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d8:	3d02      	subs	r5, #2
 80005da:	4462      	add	r2, ip
 80005dc:	e732      	b.n	8000444 <__udivmoddi4+0x124>
 80005de:	4608      	mov	r0, r1
 80005e0:	e70a      	b.n	80003f8 <__udivmoddi4+0xd8>
 80005e2:	4464      	add	r4, ip
 80005e4:	3802      	subs	r0, #2
 80005e6:	e742      	b.n	800046e <__udivmoddi4+0x14e>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b084      	sub	sp, #16
 80005f0:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f2:	f000 fdd0 	bl	8001196 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f6:	f000 f883 	bl	8000700 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005fa:	f000 fa17 	bl	8000a2c <MX_GPIO_Init>
  MX_ADC1_Init();
 80005fe:	f000 f8e7 	bl	80007d0 <MX_ADC1_Init>
  MX_USART3_UART_Init();
 8000602:	f000 f9e3 	bl	80009cc <MX_USART3_UART_Init>
  MX_TIM1_Init();
 8000606:	f000 f935 	bl	8000874 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800060a:	2100      	movs	r1, #0
 800060c:	4832      	ldr	r0, [pc, #200]	; (80006d8 <main+0xec>)
 800060e:	f002 fed3 	bl	80033b8 <HAL_TIM_PWM_Start>
  TIM1->CCR1 = 0;
 8000612:	4b32      	ldr	r3, [pc, #200]	; (80006dc <main+0xf0>)
 8000614:	2200      	movs	r2, #0
 8000616:	635a      	str	r2, [r3, #52]	; 0x34
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  // ADC with polling
	  HAL_ADC_Start(&hadc1);
 8000618:	4831      	ldr	r0, [pc, #196]	; (80006e0 <main+0xf4>)
 800061a:	f000 fe81 	bl	8001320 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 10);
 800061e:	210a      	movs	r1, #10
 8000620:	482f      	ldr	r0, [pc, #188]	; (80006e0 <main+0xf4>)
 8000622:	f000 ff7f 	bl	8001524 <HAL_ADC_PollForConversion>
	  adc_value = HAL_ADC_GetValue(&hadc1);
 8000626:	482e      	ldr	r0, [pc, #184]	; (80006e0 <main+0xf4>)
 8000628:	f001 f807 	bl	800163a <HAL_ADC_GetValue>
 800062c:	4603      	mov	r3, r0
 800062e:	4a2d      	ldr	r2, [pc, #180]	; (80006e4 <main+0xf8>)
 8000630:	6013      	str	r3, [r2, #0]
	  HAL_ADC_Stop(&hadc1);
 8000632:	482b      	ldr	r0, [pc, #172]	; (80006e0 <main+0xf4>)
 8000634:	f000 ff42 	bl	80014bc <HAL_ADC_Stop>

	  // Converting ADC value to duty cycle to control motor heading
	  TIM1->CCR1 = Map_ADC_Duty(adc_value, htim1.Init.Period);
 8000638:	4b2a      	ldr	r3, [pc, #168]	; (80006e4 <main+0xf8>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	4a26      	ldr	r2, [pc, #152]	; (80006d8 <main+0xec>)
 800063e:	68d2      	ldr	r2, [r2, #12]
 8000640:	4611      	mov	r1, r2
 8000642:	4618      	mov	r0, r3
 8000644:	f000 fb1e 	bl	8000c84 <Map_ADC_Duty>
 8000648:	eef0 7a40 	vmov.f32	s15, s0
 800064c:	4b23      	ldr	r3, [pc, #140]	; (80006dc <main+0xf0>)
 800064e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000652:	ee17 2a90 	vmov	r2, s15
 8000656:	635a      	str	r2, [r3, #52]	; 0x34
	  duty = ((float)TIM1->CCR1 / (float)htim1.Init.Period) * 100.0f;
 8000658:	4b20      	ldr	r3, [pc, #128]	; (80006dc <main+0xf0>)
 800065a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800065c:	ee07 3a90 	vmov	s15, r3
 8000660:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8000664:	4b1c      	ldr	r3, [pc, #112]	; (80006d8 <main+0xec>)
 8000666:	68db      	ldr	r3, [r3, #12]
 8000668:	ee07 3a90 	vmov	s15, r3
 800066c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000670:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000674:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 80006e8 <main+0xfc>
 8000678:	ee67 7a87 	vmul.f32	s15, s15, s14
 800067c:	4b1b      	ldr	r3, [pc, #108]	; (80006ec <main+0x100>)
 800067e:	edc3 7a00 	vstr	s15, [r3]

	  // UART to Serial Print
	  dcv = Map_ADC_DCV(adc_value);
 8000682:	4b18      	ldr	r3, [pc, #96]	; (80006e4 <main+0xf8>)
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	4618      	mov	r0, r3
 8000688:	f000 fae0 	bl	8000c4c <Map_ADC_DCV>
 800068c:	eef0 7a40 	vmov.f32	s15, s0
 8000690:	4b17      	ldr	r3, [pc, #92]	; (80006f0 <main+0x104>)
 8000692:	edc3 7a00 	vstr	s15, [r3]
	  sprintf((char*)msg, "Raw: %d, V: %f, duty: %f \r\n", (int)adc_value, dcv, duty);
 8000696:	4b13      	ldr	r3, [pc, #76]	; (80006e4 <main+0xf8>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	461a      	mov	r2, r3
 800069c:	4b14      	ldr	r3, [pc, #80]	; (80006f0 <main+0x104>)
 800069e:	edd3 7a00 	vldr	s15, [r3]
 80006a2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80006a6:	4b11      	ldr	r3, [pc, #68]	; (80006ec <main+0x100>)
 80006a8:	edd3 6a00 	vldr	s13, [r3]
 80006ac:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 80006b0:	ed8d 6b02 	vstr	d6, [sp, #8]
 80006b4:	ed8d 7b00 	vstr	d7, [sp]
 80006b8:	490e      	ldr	r1, [pc, #56]	; (80006f4 <main+0x108>)
 80006ba:	480f      	ldr	r0, [pc, #60]	; (80006f8 <main+0x10c>)
 80006bc:	f005 f878 	bl	80057b0 <siprintf>
	  HAL_UART_Transmit(&huart3, msg, sizeof(msg), 100);
 80006c0:	2364      	movs	r3, #100	; 0x64
 80006c2:	2232      	movs	r2, #50	; 0x32
 80006c4:	490c      	ldr	r1, [pc, #48]	; (80006f8 <main+0x10c>)
 80006c6:	480d      	ldr	r0, [pc, #52]	; (80006fc <main+0x110>)
 80006c8:	f003 fe6c 	bl	80043a4 <HAL_UART_Transmit>
	  HAL_Delay(500);
 80006cc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006d0:	f000 fdbe 	bl	8001250 <HAL_Delay>
	  HAL_ADC_Start(&hadc1);
 80006d4:	e7a0      	b.n	8000618 <main+0x2c>
 80006d6:	bf00      	nop
 80006d8:	20000238 	.word	0x20000238
 80006dc:	40010000 	.word	0x40010000
 80006e0:	200001f0 	.word	0x200001f0
 80006e4:	2000030c 	.word	0x2000030c
 80006e8:	42c80000 	.word	0x42c80000
 80006ec:	20000314 	.word	0x20000314
 80006f0:	20000310 	.word	0x20000310
 80006f4:	08007978 	.word	0x08007978
 80006f8:	20000318 	.word	0x20000318
 80006fc:	20000284 	.word	0x20000284

08000700 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b094      	sub	sp, #80	; 0x50
 8000704:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000706:	f107 031c 	add.w	r3, r7, #28
 800070a:	2234      	movs	r2, #52	; 0x34
 800070c:	2100      	movs	r1, #0
 800070e:	4618      	mov	r0, r3
 8000710:	f005 f8b1 	bl	8005876 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000714:	f107 0308 	add.w	r3, r7, #8
 8000718:	2200      	movs	r2, #0
 800071a:	601a      	str	r2, [r3, #0]
 800071c:	605a      	str	r2, [r3, #4]
 800071e:	609a      	str	r2, [r3, #8]
 8000720:	60da      	str	r2, [r3, #12]
 8000722:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000724:	4b28      	ldr	r3, [pc, #160]	; (80007c8 <SystemClock_Config+0xc8>)
 8000726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000728:	4a27      	ldr	r2, [pc, #156]	; (80007c8 <SystemClock_Config+0xc8>)
 800072a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800072e:	6413      	str	r3, [r2, #64]	; 0x40
 8000730:	4b25      	ldr	r3, [pc, #148]	; (80007c8 <SystemClock_Config+0xc8>)
 8000732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000734:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000738:	607b      	str	r3, [r7, #4]
 800073a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800073c:	4b23      	ldr	r3, [pc, #140]	; (80007cc <SystemClock_Config+0xcc>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000744:	4a21      	ldr	r2, [pc, #132]	; (80007cc <SystemClock_Config+0xcc>)
 8000746:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800074a:	6013      	str	r3, [r2, #0]
 800074c:	4b1f      	ldr	r3, [pc, #124]	; (80007cc <SystemClock_Config+0xcc>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000754:	603b      	str	r3, [r7, #0]
 8000756:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000758:	2302      	movs	r3, #2
 800075a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800075c:	2301      	movs	r3, #1
 800075e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000760:	2310      	movs	r3, #16
 8000762:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000764:	2302      	movs	r3, #2
 8000766:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000768:	2300      	movs	r3, #0
 800076a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 800076c:	2308      	movs	r3, #8
 800076e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000770:	2360      	movs	r3, #96	; 0x60
 8000772:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 8000774:	2306      	movs	r3, #6
 8000776:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000778:	2302      	movs	r3, #2
 800077a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800077c:	2302      	movs	r3, #2
 800077e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000780:	f107 031c 	add.w	r3, r7, #28
 8000784:	4618      	mov	r0, r3
 8000786:	f001 fc65 	bl	8002054 <HAL_RCC_OscConfig>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000790:	f000 fab4 	bl	8000cfc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000794:	230f      	movs	r3, #15
 8000796:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000798:	2302      	movs	r3, #2
 800079a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800079c:	2300      	movs	r3, #0
 800079e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007a4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007a6:	2300      	movs	r3, #0
 80007a8:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80007aa:	f107 0308 	add.w	r3, r7, #8
 80007ae:	2101      	movs	r1, #1
 80007b0:	4618      	mov	r0, r3
 80007b2:	f001 fefd 	bl	80025b0 <HAL_RCC_ClockConfig>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d001      	beq.n	80007c0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80007bc:	f000 fa9e 	bl	8000cfc <Error_Handler>
  }
}
 80007c0:	bf00      	nop
 80007c2:	3750      	adds	r7, #80	; 0x50
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	40023800 	.word	0x40023800
 80007cc:	40007000 	.word	0x40007000

080007d0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b084      	sub	sp, #16
 80007d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007d6:	463b      	mov	r3, r7
 80007d8:	2200      	movs	r2, #0
 80007da:	601a      	str	r2, [r3, #0]
 80007dc:	605a      	str	r2, [r3, #4]
 80007de:	609a      	str	r2, [r3, #8]
 80007e0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80007e2:	4b21      	ldr	r3, [pc, #132]	; (8000868 <MX_ADC1_Init+0x98>)
 80007e4:	4a21      	ldr	r2, [pc, #132]	; (800086c <MX_ADC1_Init+0x9c>)
 80007e6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80007e8:	4b1f      	ldr	r3, [pc, #124]	; (8000868 <MX_ADC1_Init+0x98>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80007ee:	4b1e      	ldr	r3, [pc, #120]	; (8000868 <MX_ADC1_Init+0x98>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007f4:	4b1c      	ldr	r3, [pc, #112]	; (8000868 <MX_ADC1_Init+0x98>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80007fa:	4b1b      	ldr	r3, [pc, #108]	; (8000868 <MX_ADC1_Init+0x98>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000800:	4b19      	ldr	r3, [pc, #100]	; (8000868 <MX_ADC1_Init+0x98>)
 8000802:	2200      	movs	r2, #0
 8000804:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000808:	4b17      	ldr	r3, [pc, #92]	; (8000868 <MX_ADC1_Init+0x98>)
 800080a:	2200      	movs	r2, #0
 800080c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800080e:	4b16      	ldr	r3, [pc, #88]	; (8000868 <MX_ADC1_Init+0x98>)
 8000810:	4a17      	ldr	r2, [pc, #92]	; (8000870 <MX_ADC1_Init+0xa0>)
 8000812:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000814:	4b14      	ldr	r3, [pc, #80]	; (8000868 <MX_ADC1_Init+0x98>)
 8000816:	2200      	movs	r2, #0
 8000818:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800081a:	4b13      	ldr	r3, [pc, #76]	; (8000868 <MX_ADC1_Init+0x98>)
 800081c:	2201      	movs	r2, #1
 800081e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000820:	4b11      	ldr	r3, [pc, #68]	; (8000868 <MX_ADC1_Init+0x98>)
 8000822:	2200      	movs	r2, #0
 8000824:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000828:	4b0f      	ldr	r3, [pc, #60]	; (8000868 <MX_ADC1_Init+0x98>)
 800082a:	2201      	movs	r2, #1
 800082c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800082e:	480e      	ldr	r0, [pc, #56]	; (8000868 <MX_ADC1_Init+0x98>)
 8000830:	f000 fd32 	bl	8001298 <HAL_ADC_Init>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800083a:	f000 fa5f 	bl	8000cfc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800083e:	2300      	movs	r3, #0
 8000840:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000842:	2301      	movs	r3, #1
 8000844:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000846:	2300      	movs	r3, #0
 8000848:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800084a:	463b      	mov	r3, r7
 800084c:	4619      	mov	r1, r3
 800084e:	4806      	ldr	r0, [pc, #24]	; (8000868 <MX_ADC1_Init+0x98>)
 8000850:	f000 ff00 	bl	8001654 <HAL_ADC_ConfigChannel>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800085a:	f000 fa4f 	bl	8000cfc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800085e:	bf00      	nop
 8000860:	3710      	adds	r7, #16
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	200001f0 	.word	0x200001f0
 800086c:	40012000 	.word	0x40012000
 8000870:	0f000001 	.word	0x0f000001

08000874 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b09a      	sub	sp, #104	; 0x68
 8000878:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800087a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800087e:	2200      	movs	r2, #0
 8000880:	601a      	str	r2, [r3, #0]
 8000882:	605a      	str	r2, [r3, #4]
 8000884:	609a      	str	r2, [r3, #8]
 8000886:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000888:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800088c:	2200      	movs	r2, #0
 800088e:	601a      	str	r2, [r3, #0]
 8000890:	605a      	str	r2, [r3, #4]
 8000892:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000894:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000898:	2200      	movs	r2, #0
 800089a:	601a      	str	r2, [r3, #0]
 800089c:	605a      	str	r2, [r3, #4]
 800089e:	609a      	str	r2, [r3, #8]
 80008a0:	60da      	str	r2, [r3, #12]
 80008a2:	611a      	str	r2, [r3, #16]
 80008a4:	615a      	str	r2, [r3, #20]
 80008a6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80008a8:	1d3b      	adds	r3, r7, #4
 80008aa:	222c      	movs	r2, #44	; 0x2c
 80008ac:	2100      	movs	r1, #0
 80008ae:	4618      	mov	r0, r3
 80008b0:	f004 ffe1 	bl	8005876 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80008b4:	4b43      	ldr	r3, [pc, #268]	; (80009c4 <MX_TIM1_Init+0x150>)
 80008b6:	4a44      	ldr	r2, [pc, #272]	; (80009c8 <MX_TIM1_Init+0x154>)
 80008b8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 64-1;
 80008ba:	4b42      	ldr	r3, [pc, #264]	; (80009c4 <MX_TIM1_Init+0x150>)
 80008bc:	223f      	movs	r2, #63	; 0x3f
 80008be:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008c0:	4b40      	ldr	r3, [pc, #256]	; (80009c4 <MX_TIM1_Init+0x150>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000-1;
 80008c6:	4b3f      	ldr	r3, [pc, #252]	; (80009c4 <MX_TIM1_Init+0x150>)
 80008c8:	f242 720f 	movw	r2, #9999	; 0x270f
 80008cc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008ce:	4b3d      	ldr	r3, [pc, #244]	; (80009c4 <MX_TIM1_Init+0x150>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80008d4:	4b3b      	ldr	r3, [pc, #236]	; (80009c4 <MX_TIM1_Init+0x150>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008da:	4b3a      	ldr	r3, [pc, #232]	; (80009c4 <MX_TIM1_Init+0x150>)
 80008dc:	2200      	movs	r2, #0
 80008de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80008e0:	4838      	ldr	r0, [pc, #224]	; (80009c4 <MX_TIM1_Init+0x150>)
 80008e2:	f002 fcb1 	bl	8003248 <HAL_TIM_Base_Init>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d001      	beq.n	80008f0 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80008ec:	f000 fa06 	bl	8000cfc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008f4:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80008f6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80008fa:	4619      	mov	r1, r3
 80008fc:	4831      	ldr	r0, [pc, #196]	; (80009c4 <MX_TIM1_Init+0x150>)
 80008fe:	f002 ff69 	bl	80037d4 <HAL_TIM_ConfigClockSource>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d001      	beq.n	800090c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000908:	f000 f9f8 	bl	8000cfc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800090c:	482d      	ldr	r0, [pc, #180]	; (80009c4 <MX_TIM1_Init+0x150>)
 800090e:	f002 fcf2 	bl	80032f6 <HAL_TIM_PWM_Init>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000918:	f000 f9f0 	bl	8000cfc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800091c:	2300      	movs	r3, #0
 800091e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000920:	2300      	movs	r3, #0
 8000922:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000924:	2300      	movs	r3, #0
 8000926:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000928:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800092c:	4619      	mov	r1, r3
 800092e:	4825      	ldr	r0, [pc, #148]	; (80009c4 <MX_TIM1_Init+0x150>)
 8000930:	f003 fbde 	bl	80040f0 <HAL_TIMEx_MasterConfigSynchronization>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800093a:	f000 f9df 	bl	8000cfc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800093e:	2360      	movs	r3, #96	; 0x60
 8000940:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8000942:	2300      	movs	r3, #0
 8000944:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000946:	2300      	movs	r3, #0
 8000948:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800094a:	2300      	movs	r3, #0
 800094c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800094e:	2300      	movs	r3, #0
 8000950:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000952:	2300      	movs	r3, #0
 8000954:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000956:	2300      	movs	r3, #0
 8000958:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800095a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800095e:	2200      	movs	r2, #0
 8000960:	4619      	mov	r1, r3
 8000962:	4818      	ldr	r0, [pc, #96]	; (80009c4 <MX_TIM1_Init+0x150>)
 8000964:	f002 fe22 	bl	80035ac <HAL_TIM_PWM_ConfigChannel>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d001      	beq.n	8000972 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 800096e:	f000 f9c5 	bl	8000cfc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000972:	2300      	movs	r3, #0
 8000974:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000976:	2300      	movs	r3, #0
 8000978:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800097a:	2300      	movs	r3, #0
 800097c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800097e:	2300      	movs	r3, #0
 8000980:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000982:	2300      	movs	r3, #0
 8000984:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000986:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800098a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800098c:	2300      	movs	r3, #0
 800098e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000990:	2300      	movs	r3, #0
 8000992:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000994:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000998:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800099a:	2300      	movs	r3, #0
 800099c:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800099e:	2300      	movs	r3, #0
 80009a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80009a2:	1d3b      	adds	r3, r7, #4
 80009a4:	4619      	mov	r1, r3
 80009a6:	4807      	ldr	r0, [pc, #28]	; (80009c4 <MX_TIM1_Init+0x150>)
 80009a8:	f003 fc30 	bl	800420c <HAL_TIMEx_ConfigBreakDeadTime>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d001      	beq.n	80009b6 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 80009b2:	f000 f9a3 	bl	8000cfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80009b6:	4803      	ldr	r0, [pc, #12]	; (80009c4 <MX_TIM1_Init+0x150>)
 80009b8:	f000 fa2a 	bl	8000e10 <HAL_TIM_MspPostInit>

}
 80009bc:	bf00      	nop
 80009be:	3768      	adds	r7, #104	; 0x68
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	20000238 	.word	0x20000238
 80009c8:	40010000 	.word	0x40010000

080009cc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80009d0:	4b14      	ldr	r3, [pc, #80]	; (8000a24 <MX_USART3_UART_Init+0x58>)
 80009d2:	4a15      	ldr	r2, [pc, #84]	; (8000a28 <MX_USART3_UART_Init+0x5c>)
 80009d4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 4800;
 80009d6:	4b13      	ldr	r3, [pc, #76]	; (8000a24 <MX_USART3_UART_Init+0x58>)
 80009d8:	f44f 5296 	mov.w	r2, #4800	; 0x12c0
 80009dc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80009de:	4b11      	ldr	r3, [pc, #68]	; (8000a24 <MX_USART3_UART_Init+0x58>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80009e4:	4b0f      	ldr	r3, [pc, #60]	; (8000a24 <MX_USART3_UART_Init+0x58>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80009ea:	4b0e      	ldr	r3, [pc, #56]	; (8000a24 <MX_USART3_UART_Init+0x58>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80009f0:	4b0c      	ldr	r3, [pc, #48]	; (8000a24 <MX_USART3_UART_Init+0x58>)
 80009f2:	220c      	movs	r2, #12
 80009f4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009f6:	4b0b      	ldr	r3, [pc, #44]	; (8000a24 <MX_USART3_UART_Init+0x58>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80009fc:	4b09      	ldr	r3, [pc, #36]	; (8000a24 <MX_USART3_UART_Init+0x58>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a02:	4b08      	ldr	r3, [pc, #32]	; (8000a24 <MX_USART3_UART_Init+0x58>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a08:	4b06      	ldr	r3, [pc, #24]	; (8000a24 <MX_USART3_UART_Init+0x58>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a0e:	4805      	ldr	r0, [pc, #20]	; (8000a24 <MX_USART3_UART_Init+0x58>)
 8000a10:	f003 fc7a 	bl	8004308 <HAL_UART_Init>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d001      	beq.n	8000a1e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000a1a:	f000 f96f 	bl	8000cfc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a1e:	bf00      	nop
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	20000284 	.word	0x20000284
 8000a28:	40004800 	.word	0x40004800

08000a2c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b08c      	sub	sp, #48	; 0x30
 8000a30:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a32:	f107 031c 	add.w	r3, r7, #28
 8000a36:	2200      	movs	r2, #0
 8000a38:	601a      	str	r2, [r3, #0]
 8000a3a:	605a      	str	r2, [r3, #4]
 8000a3c:	609a      	str	r2, [r3, #8]
 8000a3e:	60da      	str	r2, [r3, #12]
 8000a40:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a42:	4b7d      	ldr	r3, [pc, #500]	; (8000c38 <MX_GPIO_Init+0x20c>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a46:	4a7c      	ldr	r2, [pc, #496]	; (8000c38 <MX_GPIO_Init+0x20c>)
 8000a48:	f043 0304 	orr.w	r3, r3, #4
 8000a4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a4e:	4b7a      	ldr	r3, [pc, #488]	; (8000c38 <MX_GPIO_Init+0x20c>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a52:	f003 0304 	and.w	r3, r3, #4
 8000a56:	61bb      	str	r3, [r7, #24]
 8000a58:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a5a:	4b77      	ldr	r3, [pc, #476]	; (8000c38 <MX_GPIO_Init+0x20c>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5e:	4a76      	ldr	r2, [pc, #472]	; (8000c38 <MX_GPIO_Init+0x20c>)
 8000a60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a64:	6313      	str	r3, [r2, #48]	; 0x30
 8000a66:	4b74      	ldr	r3, [pc, #464]	; (8000c38 <MX_GPIO_Init+0x20c>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a6e:	617b      	str	r3, [r7, #20]
 8000a70:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a72:	4b71      	ldr	r3, [pc, #452]	; (8000c38 <MX_GPIO_Init+0x20c>)
 8000a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a76:	4a70      	ldr	r2, [pc, #448]	; (8000c38 <MX_GPIO_Init+0x20c>)
 8000a78:	f043 0301 	orr.w	r3, r3, #1
 8000a7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a7e:	4b6e      	ldr	r3, [pc, #440]	; (8000c38 <MX_GPIO_Init+0x20c>)
 8000a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a82:	f003 0301 	and.w	r3, r3, #1
 8000a86:	613b      	str	r3, [r7, #16]
 8000a88:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a8a:	4b6b      	ldr	r3, [pc, #428]	; (8000c38 <MX_GPIO_Init+0x20c>)
 8000a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8e:	4a6a      	ldr	r2, [pc, #424]	; (8000c38 <MX_GPIO_Init+0x20c>)
 8000a90:	f043 0302 	orr.w	r3, r3, #2
 8000a94:	6313      	str	r3, [r2, #48]	; 0x30
 8000a96:	4b68      	ldr	r3, [pc, #416]	; (8000c38 <MX_GPIO_Init+0x20c>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9a:	f003 0302 	and.w	r3, r3, #2
 8000a9e:	60fb      	str	r3, [r7, #12]
 8000aa0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000aa2:	4b65      	ldr	r3, [pc, #404]	; (8000c38 <MX_GPIO_Init+0x20c>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa6:	4a64      	ldr	r2, [pc, #400]	; (8000c38 <MX_GPIO_Init+0x20c>)
 8000aa8:	f043 0310 	orr.w	r3, r3, #16
 8000aac:	6313      	str	r3, [r2, #48]	; 0x30
 8000aae:	4b62      	ldr	r3, [pc, #392]	; (8000c38 <MX_GPIO_Init+0x20c>)
 8000ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab2:	f003 0310 	and.w	r3, r3, #16
 8000ab6:	60bb      	str	r3, [r7, #8]
 8000ab8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000aba:	4b5f      	ldr	r3, [pc, #380]	; (8000c38 <MX_GPIO_Init+0x20c>)
 8000abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000abe:	4a5e      	ldr	r2, [pc, #376]	; (8000c38 <MX_GPIO_Init+0x20c>)
 8000ac0:	f043 0308 	orr.w	r3, r3, #8
 8000ac4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ac6:	4b5c      	ldr	r3, [pc, #368]	; (8000c38 <MX_GPIO_Init+0x20c>)
 8000ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aca:	f003 0308 	and.w	r3, r3, #8
 8000ace:	607b      	str	r3, [r7, #4]
 8000ad0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ad2:	4b59      	ldr	r3, [pc, #356]	; (8000c38 <MX_GPIO_Init+0x20c>)
 8000ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad6:	4a58      	ldr	r2, [pc, #352]	; (8000c38 <MX_GPIO_Init+0x20c>)
 8000ad8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000adc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ade:	4b56      	ldr	r3, [pc, #344]	; (8000c38 <MX_GPIO_Init+0x20c>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ae6:	603b      	str	r3, [r7, #0]
 8000ae8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000aea:	2200      	movs	r2, #0
 8000aec:	f244 0181 	movw	r1, #16513	; 0x4081
 8000af0:	4852      	ldr	r0, [pc, #328]	; (8000c3c <MX_GPIO_Init+0x210>)
 8000af2:	f001 fa95 	bl	8002020 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000af6:	2200      	movs	r2, #0
 8000af8:	2140      	movs	r1, #64	; 0x40
 8000afa:	4851      	ldr	r0, [pc, #324]	; (8000c40 <MX_GPIO_Init+0x214>)
 8000afc:	f001 fa90 	bl	8002020 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000b00:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b06:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b0a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000b10:	f107 031c 	add.w	r3, r7, #28
 8000b14:	4619      	mov	r1, r3
 8000b16:	484b      	ldr	r0, [pc, #300]	; (8000c44 <MX_GPIO_Init+0x218>)
 8000b18:	f001 f8d6 	bl	8001cc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000b1c:	2332      	movs	r3, #50	; 0x32
 8000b1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b20:	2302      	movs	r3, #2
 8000b22:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b24:	2300      	movs	r3, #0
 8000b26:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b28:	2303      	movs	r3, #3
 8000b2a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b2c:	230b      	movs	r3, #11
 8000b2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b30:	f107 031c 	add.w	r3, r7, #28
 8000b34:	4619      	mov	r1, r3
 8000b36:	4843      	ldr	r0, [pc, #268]	; (8000c44 <MX_GPIO_Init+0x218>)
 8000b38:	f001 f8c6 	bl	8001cc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000b3c:	2386      	movs	r3, #134	; 0x86
 8000b3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b40:	2302      	movs	r3, #2
 8000b42:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b44:	2300      	movs	r3, #0
 8000b46:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b48:	2303      	movs	r3, #3
 8000b4a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b4c:	230b      	movs	r3, #11
 8000b4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b50:	f107 031c 	add.w	r3, r7, #28
 8000b54:	4619      	mov	r1, r3
 8000b56:	483c      	ldr	r0, [pc, #240]	; (8000c48 <MX_GPIO_Init+0x21c>)
 8000b58:	f001 f8b6 	bl	8001cc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000b5c:	f244 0381 	movw	r3, #16513	; 0x4081
 8000b60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b62:	2301      	movs	r3, #1
 8000b64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b66:	2300      	movs	r3, #0
 8000b68:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b6e:	f107 031c 	add.w	r3, r7, #28
 8000b72:	4619      	mov	r1, r3
 8000b74:	4831      	ldr	r0, [pc, #196]	; (8000c3c <MX_GPIO_Init+0x210>)
 8000b76:	f001 f8a7 	bl	8001cc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000b7a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b80:	2302      	movs	r3, #2
 8000b82:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b84:	2300      	movs	r3, #0
 8000b86:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b88:	2303      	movs	r3, #3
 8000b8a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b8c:	230b      	movs	r3, #11
 8000b8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000b90:	f107 031c 	add.w	r3, r7, #28
 8000b94:	4619      	mov	r1, r3
 8000b96:	4829      	ldr	r0, [pc, #164]	; (8000c3c <MX_GPIO_Init+0x210>)
 8000b98:	f001 f896 	bl	8001cc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000b9c:	2340      	movs	r3, #64	; 0x40
 8000b9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ba0:	2301      	movs	r3, #1
 8000ba2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000bac:	f107 031c 	add.w	r3, r7, #28
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	4823      	ldr	r0, [pc, #140]	; (8000c40 <MX_GPIO_Init+0x214>)
 8000bb4:	f001 f888 	bl	8001cc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000bb8:	2380      	movs	r3, #128	; 0x80
 8000bba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000bc4:	f107 031c 	add.w	r3, r7, #28
 8000bc8:	4619      	mov	r1, r3
 8000bca:	481d      	ldr	r0, [pc, #116]	; (8000c40 <MX_GPIO_Init+0x214>)
 8000bcc:	f001 f87c 	bl	8001cc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000bd0:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000bd4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd6:	2302      	movs	r3, #2
 8000bd8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bde:	2303      	movs	r3, #3
 8000be0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000be2:	230a      	movs	r3, #10
 8000be4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000be6:	f107 031c 	add.w	r3, r7, #28
 8000bea:	4619      	mov	r1, r3
 8000bec:	4816      	ldr	r0, [pc, #88]	; (8000c48 <MX_GPIO_Init+0x21c>)
 8000bee:	f001 f86b 	bl	8001cc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000bf2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000bf6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000c00:	f107 031c 	add.w	r3, r7, #28
 8000c04:	4619      	mov	r1, r3
 8000c06:	4810      	ldr	r0, [pc, #64]	; (8000c48 <MX_GPIO_Init+0x21c>)
 8000c08:	f001 f85e 	bl	8001cc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000c0c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000c10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c12:	2302      	movs	r3, #2
 8000c14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c16:	2300      	movs	r3, #0
 8000c18:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c1a:	2303      	movs	r3, #3
 8000c1c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c1e:	230b      	movs	r3, #11
 8000c20:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c22:	f107 031c 	add.w	r3, r7, #28
 8000c26:	4619      	mov	r1, r3
 8000c28:	4805      	ldr	r0, [pc, #20]	; (8000c40 <MX_GPIO_Init+0x214>)
 8000c2a:	f001 f84d 	bl	8001cc8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c2e:	bf00      	nop
 8000c30:	3730      	adds	r7, #48	; 0x30
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	40023800 	.word	0x40023800
 8000c3c:	40020400 	.word	0x40020400
 8000c40:	40021800 	.word	0x40021800
 8000c44:	40020800 	.word	0x40020800
 8000c48:	40020000 	.word	0x40020000

08000c4c <Map_ADC_DCV>:

/* USER CODE BEGIN 4 */

float Map_ADC_DCV(uint32_t adc_value){
 8000c4c:	b480      	push	{r7}
 8000c4e:	b083      	sub	sp, #12
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
	return (adc_value / 4095.0f) * 3.3f;
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	ee07 3a90 	vmov	s15, r3
 8000c5a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000c5e:	eddf 6a07 	vldr	s13, [pc, #28]	; 8000c7c <Map_ADC_DCV+0x30>
 8000c62:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000c66:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8000c80 <Map_ADC_DCV+0x34>
 8000c6a:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8000c6e:	eeb0 0a67 	vmov.f32	s0, s15
 8000c72:	370c      	adds	r7, #12
 8000c74:	46bd      	mov	sp, r7
 8000c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7a:	4770      	bx	lr
 8000c7c:	457ff000 	.word	0x457ff000
 8000c80:	40533333 	.word	0x40533333

08000c84 <Map_ADC_Duty>:

float Map_ADC_Duty(uint32_t adc_value, uint32_t period){
 8000c84:	b480      	push	{r7}
 8000c86:	b087      	sub	sp, #28
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
 8000c8c:	6039      	str	r1, [r7, #0]
	float maxdc = 0.125f;		// Maximum and minimum duty cycles of SG 90 motors
 8000c8e:	f04f 5378 	mov.w	r3, #1040187392	; 0x3e000000
 8000c92:	617b      	str	r3, [r7, #20]
	float mindc = 0.025f;
 8000c94:	4b17      	ldr	r3, [pc, #92]	; (8000cf4 <Map_ADC_Duty+0x70>)
 8000c96:	613b      	str	r3, [r7, #16]
	float maxp = (maxdc-mindc) * period;
 8000c98:	ed97 7a05 	vldr	s14, [r7, #20]
 8000c9c:	edd7 7a04 	vldr	s15, [r7, #16]
 8000ca0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	ee07 3a90 	vmov	s15, r3
 8000caa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000cae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000cb2:	edc7 7a03 	vstr	s15, [r7, #12]
	return ((adc_value * (maxp / 4095.0f)) + (mindc*period));
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	ee07 3a90 	vmov	s15, r3
 8000cbc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000cc0:	edd7 6a03 	vldr	s13, [r7, #12]
 8000cc4:	ed9f 6a0c 	vldr	s12, [pc, #48]	; 8000cf8 <Map_ADC_Duty+0x74>
 8000cc8:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8000ccc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	ee07 3a90 	vmov	s15, r3
 8000cd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8000cda:	edd7 7a04 	vldr	s15, [r7, #16]
 8000cde:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000ce2:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8000ce6:	eeb0 0a67 	vmov.f32	s0, s15
 8000cea:	371c      	adds	r7, #28
 8000cec:	46bd      	mov	sp, r7
 8000cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf2:	4770      	bx	lr
 8000cf4:	3ccccccd 	.word	0x3ccccccd
 8000cf8:	457ff000 	.word	0x457ff000

08000cfc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d00:	b672      	cpsid	i
}
 8000d02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d04:	e7fe      	b.n	8000d04 <Error_Handler+0x8>
	...

08000d08 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b083      	sub	sp, #12
 8000d0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000d0e:	4b0f      	ldr	r3, [pc, #60]	; (8000d4c <HAL_MspInit+0x44>)
 8000d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d12:	4a0e      	ldr	r2, [pc, #56]	; (8000d4c <HAL_MspInit+0x44>)
 8000d14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d18:	6413      	str	r3, [r2, #64]	; 0x40
 8000d1a:	4b0c      	ldr	r3, [pc, #48]	; (8000d4c <HAL_MspInit+0x44>)
 8000d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d22:	607b      	str	r3, [r7, #4]
 8000d24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d26:	4b09      	ldr	r3, [pc, #36]	; (8000d4c <HAL_MspInit+0x44>)
 8000d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d2a:	4a08      	ldr	r2, [pc, #32]	; (8000d4c <HAL_MspInit+0x44>)
 8000d2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d30:	6453      	str	r3, [r2, #68]	; 0x44
 8000d32:	4b06      	ldr	r3, [pc, #24]	; (8000d4c <HAL_MspInit+0x44>)
 8000d34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d3a:	603b      	str	r3, [r7, #0]
 8000d3c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d3e:	bf00      	nop
 8000d40:	370c      	adds	r7, #12
 8000d42:	46bd      	mov	sp, r7
 8000d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d48:	4770      	bx	lr
 8000d4a:	bf00      	nop
 8000d4c:	40023800 	.word	0x40023800

08000d50 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b08a      	sub	sp, #40	; 0x28
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d58:	f107 0314 	add.w	r3, r7, #20
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	601a      	str	r2, [r3, #0]
 8000d60:	605a      	str	r2, [r3, #4]
 8000d62:	609a      	str	r2, [r3, #8]
 8000d64:	60da      	str	r2, [r3, #12]
 8000d66:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	4a15      	ldr	r2, [pc, #84]	; (8000dc4 <HAL_ADC_MspInit+0x74>)
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	d123      	bne.n	8000dba <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000d72:	4b15      	ldr	r3, [pc, #84]	; (8000dc8 <HAL_ADC_MspInit+0x78>)
 8000d74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d76:	4a14      	ldr	r2, [pc, #80]	; (8000dc8 <HAL_ADC_MspInit+0x78>)
 8000d78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d7c:	6453      	str	r3, [r2, #68]	; 0x44
 8000d7e:	4b12      	ldr	r3, [pc, #72]	; (8000dc8 <HAL_ADC_MspInit+0x78>)
 8000d80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d86:	613b      	str	r3, [r7, #16]
 8000d88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d8a:	4b0f      	ldr	r3, [pc, #60]	; (8000dc8 <HAL_ADC_MspInit+0x78>)
 8000d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8e:	4a0e      	ldr	r2, [pc, #56]	; (8000dc8 <HAL_ADC_MspInit+0x78>)
 8000d90:	f043 0301 	orr.w	r3, r3, #1
 8000d94:	6313      	str	r3, [r2, #48]	; 0x30
 8000d96:	4b0c      	ldr	r3, [pc, #48]	; (8000dc8 <HAL_ADC_MspInit+0x78>)
 8000d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9a:	f003 0301 	and.w	r3, r3, #1
 8000d9e:	60fb      	str	r3, [r7, #12]
 8000da0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000da2:	2301      	movs	r3, #1
 8000da4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000da6:	2303      	movs	r3, #3
 8000da8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000daa:	2300      	movs	r3, #0
 8000dac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dae:	f107 0314 	add.w	r3, r7, #20
 8000db2:	4619      	mov	r1, r3
 8000db4:	4805      	ldr	r0, [pc, #20]	; (8000dcc <HAL_ADC_MspInit+0x7c>)
 8000db6:	f000 ff87 	bl	8001cc8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000dba:	bf00      	nop
 8000dbc:	3728      	adds	r7, #40	; 0x28
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	40012000 	.word	0x40012000
 8000dc8:	40023800 	.word	0x40023800
 8000dcc:	40020000 	.word	0x40020000

08000dd0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	b085      	sub	sp, #20
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4a0a      	ldr	r2, [pc, #40]	; (8000e08 <HAL_TIM_Base_MspInit+0x38>)
 8000dde:	4293      	cmp	r3, r2
 8000de0:	d10b      	bne.n	8000dfa <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000de2:	4b0a      	ldr	r3, [pc, #40]	; (8000e0c <HAL_TIM_Base_MspInit+0x3c>)
 8000de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000de6:	4a09      	ldr	r2, [pc, #36]	; (8000e0c <HAL_TIM_Base_MspInit+0x3c>)
 8000de8:	f043 0301 	orr.w	r3, r3, #1
 8000dec:	6453      	str	r3, [r2, #68]	; 0x44
 8000dee:	4b07      	ldr	r3, [pc, #28]	; (8000e0c <HAL_TIM_Base_MspInit+0x3c>)
 8000df0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000df2:	f003 0301 	and.w	r3, r3, #1
 8000df6:	60fb      	str	r3, [r7, #12]
 8000df8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000dfa:	bf00      	nop
 8000dfc:	3714      	adds	r7, #20
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr
 8000e06:	bf00      	nop
 8000e08:	40010000 	.word	0x40010000
 8000e0c:	40023800 	.word	0x40023800

08000e10 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b088      	sub	sp, #32
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e18:	f107 030c 	add.w	r3, r7, #12
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	601a      	str	r2, [r3, #0]
 8000e20:	605a      	str	r2, [r3, #4]
 8000e22:	609a      	str	r2, [r3, #8]
 8000e24:	60da      	str	r2, [r3, #12]
 8000e26:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4a11      	ldr	r2, [pc, #68]	; (8000e74 <HAL_TIM_MspPostInit+0x64>)
 8000e2e:	4293      	cmp	r3, r2
 8000e30:	d11c      	bne.n	8000e6c <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e32:	4b11      	ldr	r3, [pc, #68]	; (8000e78 <HAL_TIM_MspPostInit+0x68>)
 8000e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e36:	4a10      	ldr	r2, [pc, #64]	; (8000e78 <HAL_TIM_MspPostInit+0x68>)
 8000e38:	f043 0310 	orr.w	r3, r3, #16
 8000e3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e3e:	4b0e      	ldr	r3, [pc, #56]	; (8000e78 <HAL_TIM_MspPostInit+0x68>)
 8000e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e42:	f003 0310 	and.w	r3, r3, #16
 8000e46:	60bb      	str	r3, [r7, #8]
 8000e48:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000e4a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e4e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e50:	2302      	movs	r3, #2
 8000e52:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e54:	2300      	movs	r3, #0
 8000e56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e60:	f107 030c 	add.w	r3, r7, #12
 8000e64:	4619      	mov	r1, r3
 8000e66:	4805      	ldr	r0, [pc, #20]	; (8000e7c <HAL_TIM_MspPostInit+0x6c>)
 8000e68:	f000 ff2e 	bl	8001cc8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000e6c:	bf00      	nop
 8000e6e:	3720      	adds	r7, #32
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	40010000 	.word	0x40010000
 8000e78:	40023800 	.word	0x40023800
 8000e7c:	40021000 	.word	0x40021000

08000e80 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b0ae      	sub	sp, #184	; 0xb8
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e88:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	601a      	str	r2, [r3, #0]
 8000e90:	605a      	str	r2, [r3, #4]
 8000e92:	609a      	str	r2, [r3, #8]
 8000e94:	60da      	str	r2, [r3, #12]
 8000e96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e98:	f107 0314 	add.w	r3, r7, #20
 8000e9c:	2290      	movs	r2, #144	; 0x90
 8000e9e:	2100      	movs	r1, #0
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f004 fce8 	bl	8005876 <memset>
  if(huart->Instance==USART3)
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	4a22      	ldr	r2, [pc, #136]	; (8000f34 <HAL_UART_MspInit+0xb4>)
 8000eac:	4293      	cmp	r3, r2
 8000eae:	d13c      	bne.n	8000f2a <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000eb0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000eb4:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000eba:	f107 0314 	add.w	r3, r7, #20
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f001 fd9a 	bl	80029f8 <HAL_RCCEx_PeriphCLKConfig>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d001      	beq.n	8000ece <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000eca:	f7ff ff17 	bl	8000cfc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000ece:	4b1a      	ldr	r3, [pc, #104]	; (8000f38 <HAL_UART_MspInit+0xb8>)
 8000ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed2:	4a19      	ldr	r2, [pc, #100]	; (8000f38 <HAL_UART_MspInit+0xb8>)
 8000ed4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ed8:	6413      	str	r3, [r2, #64]	; 0x40
 8000eda:	4b17      	ldr	r3, [pc, #92]	; (8000f38 <HAL_UART_MspInit+0xb8>)
 8000edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ede:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ee2:	613b      	str	r3, [r7, #16]
 8000ee4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ee6:	4b14      	ldr	r3, [pc, #80]	; (8000f38 <HAL_UART_MspInit+0xb8>)
 8000ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eea:	4a13      	ldr	r2, [pc, #76]	; (8000f38 <HAL_UART_MspInit+0xb8>)
 8000eec:	f043 0308 	orr.w	r3, r3, #8
 8000ef0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ef2:	4b11      	ldr	r3, [pc, #68]	; (8000f38 <HAL_UART_MspInit+0xb8>)
 8000ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef6:	f003 0308 	and.w	r3, r3, #8
 8000efa:	60fb      	str	r3, [r7, #12]
 8000efc:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000efe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f02:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f06:	2302      	movs	r3, #2
 8000f08:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f12:	2303      	movs	r3, #3
 8000f14:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000f18:	2307      	movs	r3, #7
 8000f1a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f1e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000f22:	4619      	mov	r1, r3
 8000f24:	4805      	ldr	r0, [pc, #20]	; (8000f3c <HAL_UART_MspInit+0xbc>)
 8000f26:	f000 fecf 	bl	8001cc8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000f2a:	bf00      	nop
 8000f2c:	37b8      	adds	r7, #184	; 0xb8
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	40004800 	.word	0x40004800
 8000f38:	40023800 	.word	0x40023800
 8000f3c:	40020c00 	.word	0x40020c00

08000f40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f44:	e7fe      	b.n	8000f44 <NMI_Handler+0x4>

08000f46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f46:	b480      	push	{r7}
 8000f48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f4a:	e7fe      	b.n	8000f4a <HardFault_Handler+0x4>

08000f4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f50:	e7fe      	b.n	8000f50 <MemManage_Handler+0x4>

08000f52 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f52:	b480      	push	{r7}
 8000f54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f56:	e7fe      	b.n	8000f56 <BusFault_Handler+0x4>

08000f58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f5c:	e7fe      	b.n	8000f5c <UsageFault_Handler+0x4>

08000f5e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f5e:	b480      	push	{r7}
 8000f60:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f62:	bf00      	nop
 8000f64:	46bd      	mov	sp, r7
 8000f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6a:	4770      	bx	lr

08000f6c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f70:	bf00      	nop
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr

08000f7a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f7a:	b480      	push	{r7}
 8000f7c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f7e:	bf00      	nop
 8000f80:	46bd      	mov	sp, r7
 8000f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f86:	4770      	bx	lr

08000f88 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f8c:	f000 f940 	bl	8001210 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f90:	bf00      	nop
 8000f92:	bd80      	pop	{r7, pc}

08000f94 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  return 1;
 8000f98:	2301      	movs	r3, #1
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr

08000fa4 <_kill>:

int _kill(int pid, int sig)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
 8000fac:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000fae:	f004 fcb5 	bl	800591c <__errno>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2216      	movs	r2, #22
 8000fb6:	601a      	str	r2, [r3, #0]
  return -1;
 8000fb8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	3708      	adds	r7, #8
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}

08000fc4 <_exit>:

void _exit (int status)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000fcc:	f04f 31ff 	mov.w	r1, #4294967295
 8000fd0:	6878      	ldr	r0, [r7, #4]
 8000fd2:	f7ff ffe7 	bl	8000fa4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000fd6:	e7fe      	b.n	8000fd6 <_exit+0x12>

08000fd8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b086      	sub	sp, #24
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	60f8      	str	r0, [r7, #12]
 8000fe0:	60b9      	str	r1, [r7, #8]
 8000fe2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	617b      	str	r3, [r7, #20]
 8000fe8:	e00a      	b.n	8001000 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000fea:	f3af 8000 	nop.w
 8000fee:	4601      	mov	r1, r0
 8000ff0:	68bb      	ldr	r3, [r7, #8]
 8000ff2:	1c5a      	adds	r2, r3, #1
 8000ff4:	60ba      	str	r2, [r7, #8]
 8000ff6:	b2ca      	uxtb	r2, r1
 8000ff8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ffa:	697b      	ldr	r3, [r7, #20]
 8000ffc:	3301      	adds	r3, #1
 8000ffe:	617b      	str	r3, [r7, #20]
 8001000:	697a      	ldr	r2, [r7, #20]
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	429a      	cmp	r2, r3
 8001006:	dbf0      	blt.n	8000fea <_read+0x12>
  }

  return len;
 8001008:	687b      	ldr	r3, [r7, #4]
}
 800100a:	4618      	mov	r0, r3
 800100c:	3718      	adds	r7, #24
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}

08001012 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001012:	b580      	push	{r7, lr}
 8001014:	b086      	sub	sp, #24
 8001016:	af00      	add	r7, sp, #0
 8001018:	60f8      	str	r0, [r7, #12]
 800101a:	60b9      	str	r1, [r7, #8]
 800101c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800101e:	2300      	movs	r3, #0
 8001020:	617b      	str	r3, [r7, #20]
 8001022:	e009      	b.n	8001038 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001024:	68bb      	ldr	r3, [r7, #8]
 8001026:	1c5a      	adds	r2, r3, #1
 8001028:	60ba      	str	r2, [r7, #8]
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	4618      	mov	r0, r3
 800102e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001032:	697b      	ldr	r3, [r7, #20]
 8001034:	3301      	adds	r3, #1
 8001036:	617b      	str	r3, [r7, #20]
 8001038:	697a      	ldr	r2, [r7, #20]
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	429a      	cmp	r2, r3
 800103e:	dbf1      	blt.n	8001024 <_write+0x12>
  }
  return len;
 8001040:	687b      	ldr	r3, [r7, #4]
}
 8001042:	4618      	mov	r0, r3
 8001044:	3718      	adds	r7, #24
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}

0800104a <_close>:

int _close(int file)
{
 800104a:	b480      	push	{r7}
 800104c:	b083      	sub	sp, #12
 800104e:	af00      	add	r7, sp, #0
 8001050:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001052:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001056:	4618      	mov	r0, r3
 8001058:	370c      	adds	r7, #12
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr

08001062 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001062:	b480      	push	{r7}
 8001064:	b083      	sub	sp, #12
 8001066:	af00      	add	r7, sp, #0
 8001068:	6078      	str	r0, [r7, #4]
 800106a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001072:	605a      	str	r2, [r3, #4]
  return 0;
 8001074:	2300      	movs	r3, #0
}
 8001076:	4618      	mov	r0, r3
 8001078:	370c      	adds	r7, #12
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr

08001082 <_isatty>:

int _isatty(int file)
{
 8001082:	b480      	push	{r7}
 8001084:	b083      	sub	sp, #12
 8001086:	af00      	add	r7, sp, #0
 8001088:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800108a:	2301      	movs	r3, #1
}
 800108c:	4618      	mov	r0, r3
 800108e:	370c      	adds	r7, #12
 8001090:	46bd      	mov	sp, r7
 8001092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001096:	4770      	bx	lr

08001098 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001098:	b480      	push	{r7}
 800109a:	b085      	sub	sp, #20
 800109c:	af00      	add	r7, sp, #0
 800109e:	60f8      	str	r0, [r7, #12]
 80010a0:	60b9      	str	r1, [r7, #8]
 80010a2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80010a4:	2300      	movs	r3, #0
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	3714      	adds	r7, #20
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr
	...

080010b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b086      	sub	sp, #24
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010bc:	4a14      	ldr	r2, [pc, #80]	; (8001110 <_sbrk+0x5c>)
 80010be:	4b15      	ldr	r3, [pc, #84]	; (8001114 <_sbrk+0x60>)
 80010c0:	1ad3      	subs	r3, r2, r3
 80010c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010c4:	697b      	ldr	r3, [r7, #20]
 80010c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010c8:	4b13      	ldr	r3, [pc, #76]	; (8001118 <_sbrk+0x64>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d102      	bne.n	80010d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010d0:	4b11      	ldr	r3, [pc, #68]	; (8001118 <_sbrk+0x64>)
 80010d2:	4a12      	ldr	r2, [pc, #72]	; (800111c <_sbrk+0x68>)
 80010d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010d6:	4b10      	ldr	r3, [pc, #64]	; (8001118 <_sbrk+0x64>)
 80010d8:	681a      	ldr	r2, [r3, #0]
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	4413      	add	r3, r2
 80010de:	693a      	ldr	r2, [r7, #16]
 80010e0:	429a      	cmp	r2, r3
 80010e2:	d207      	bcs.n	80010f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010e4:	f004 fc1a 	bl	800591c <__errno>
 80010e8:	4603      	mov	r3, r0
 80010ea:	220c      	movs	r2, #12
 80010ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010ee:	f04f 33ff 	mov.w	r3, #4294967295
 80010f2:	e009      	b.n	8001108 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010f4:	4b08      	ldr	r3, [pc, #32]	; (8001118 <_sbrk+0x64>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010fa:	4b07      	ldr	r3, [pc, #28]	; (8001118 <_sbrk+0x64>)
 80010fc:	681a      	ldr	r2, [r3, #0]
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	4413      	add	r3, r2
 8001102:	4a05      	ldr	r2, [pc, #20]	; (8001118 <_sbrk+0x64>)
 8001104:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001106:	68fb      	ldr	r3, [r7, #12]
}
 8001108:	4618      	mov	r0, r3
 800110a:	3718      	adds	r7, #24
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	20080000 	.word	0x20080000
 8001114:	00000400 	.word	0x00000400
 8001118:	2000034c 	.word	0x2000034c
 800111c:	200004a0 	.word	0x200004a0

08001120 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001124:	4b06      	ldr	r3, [pc, #24]	; (8001140 <SystemInit+0x20>)
 8001126:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800112a:	4a05      	ldr	r2, [pc, #20]	; (8001140 <SystemInit+0x20>)
 800112c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001130:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001134:	bf00      	nop
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr
 800113e:	bf00      	nop
 8001140:	e000ed00 	.word	0xe000ed00

08001144 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001144:	f8df d034 	ldr.w	sp, [pc, #52]	; 800117c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001148:	f7ff ffea 	bl	8001120 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800114c:	480c      	ldr	r0, [pc, #48]	; (8001180 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800114e:	490d      	ldr	r1, [pc, #52]	; (8001184 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001150:	4a0d      	ldr	r2, [pc, #52]	; (8001188 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001152:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001154:	e002      	b.n	800115c <LoopCopyDataInit>

08001156 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001156:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001158:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800115a:	3304      	adds	r3, #4

0800115c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800115c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800115e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001160:	d3f9      	bcc.n	8001156 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001162:	4a0a      	ldr	r2, [pc, #40]	; (800118c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001164:	4c0a      	ldr	r4, [pc, #40]	; (8001190 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001166:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001168:	e001      	b.n	800116e <LoopFillZerobss>

0800116a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800116a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800116c:	3204      	adds	r2, #4

0800116e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800116e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001170:	d3fb      	bcc.n	800116a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001172:	f004 fbd9 	bl	8005928 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001176:	f7ff fa39 	bl	80005ec <main>
  bx  lr    
 800117a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800117c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001180:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001184:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001188:	08007d2c 	.word	0x08007d2c
  ldr r2, =_sbss
 800118c:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001190:	200004a0 	.word	0x200004a0

08001194 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001194:	e7fe      	b.n	8001194 <ADC_IRQHandler>

08001196 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001196:	b580      	push	{r7, lr}
 8001198:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800119a:	2003      	movs	r0, #3
 800119c:	f000 fd60 	bl	8001c60 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011a0:	2000      	movs	r0, #0
 80011a2:	f000 f805 	bl	80011b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011a6:	f7ff fdaf 	bl	8000d08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011aa:	2300      	movs	r3, #0
}
 80011ac:	4618      	mov	r0, r3
 80011ae:	bd80      	pop	{r7, pc}

080011b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011b8:	4b12      	ldr	r3, [pc, #72]	; (8001204 <HAL_InitTick+0x54>)
 80011ba:	681a      	ldr	r2, [r3, #0]
 80011bc:	4b12      	ldr	r3, [pc, #72]	; (8001208 <HAL_InitTick+0x58>)
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	4619      	mov	r1, r3
 80011c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80011ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80011ce:	4618      	mov	r0, r3
 80011d0:	f000 fd6d 	bl	8001cae <HAL_SYSTICK_Config>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d001      	beq.n	80011de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011da:	2301      	movs	r3, #1
 80011dc:	e00e      	b.n	80011fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	2b0f      	cmp	r3, #15
 80011e2:	d80a      	bhi.n	80011fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011e4:	2200      	movs	r2, #0
 80011e6:	6879      	ldr	r1, [r7, #4]
 80011e8:	f04f 30ff 	mov.w	r0, #4294967295
 80011ec:	f000 fd43 	bl	8001c76 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011f0:	4a06      	ldr	r2, [pc, #24]	; (800120c <HAL_InitTick+0x5c>)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011f6:	2300      	movs	r3, #0
 80011f8:	e000      	b.n	80011fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011fa:	2301      	movs	r3, #1
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	3708      	adds	r7, #8
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	20000000 	.word	0x20000000
 8001208:	20000008 	.word	0x20000008
 800120c:	20000004 	.word	0x20000004

08001210 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001214:	4b06      	ldr	r3, [pc, #24]	; (8001230 <HAL_IncTick+0x20>)
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	461a      	mov	r2, r3
 800121a:	4b06      	ldr	r3, [pc, #24]	; (8001234 <HAL_IncTick+0x24>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	4413      	add	r3, r2
 8001220:	4a04      	ldr	r2, [pc, #16]	; (8001234 <HAL_IncTick+0x24>)
 8001222:	6013      	str	r3, [r2, #0]
}
 8001224:	bf00      	nop
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr
 800122e:	bf00      	nop
 8001230:	20000008 	.word	0x20000008
 8001234:	20000350 	.word	0x20000350

08001238 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
  return uwTick;
 800123c:	4b03      	ldr	r3, [pc, #12]	; (800124c <HAL_GetTick+0x14>)
 800123e:	681b      	ldr	r3, [r3, #0]
}
 8001240:	4618      	mov	r0, r3
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr
 800124a:	bf00      	nop
 800124c:	20000350 	.word	0x20000350

08001250 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b084      	sub	sp, #16
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001258:	f7ff ffee 	bl	8001238 <HAL_GetTick>
 800125c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001268:	d005      	beq.n	8001276 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800126a:	4b0a      	ldr	r3, [pc, #40]	; (8001294 <HAL_Delay+0x44>)
 800126c:	781b      	ldrb	r3, [r3, #0]
 800126e:	461a      	mov	r2, r3
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	4413      	add	r3, r2
 8001274:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001276:	bf00      	nop
 8001278:	f7ff ffde 	bl	8001238 <HAL_GetTick>
 800127c:	4602      	mov	r2, r0
 800127e:	68bb      	ldr	r3, [r7, #8]
 8001280:	1ad3      	subs	r3, r2, r3
 8001282:	68fa      	ldr	r2, [r7, #12]
 8001284:	429a      	cmp	r2, r3
 8001286:	d8f7      	bhi.n	8001278 <HAL_Delay+0x28>
  {
  }
}
 8001288:	bf00      	nop
 800128a:	bf00      	nop
 800128c:	3710      	adds	r7, #16
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	20000008 	.word	0x20000008

08001298 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b084      	sub	sp, #16
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012a0:	2300      	movs	r3, #0
 80012a2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d101      	bne.n	80012ae <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80012aa:	2301      	movs	r3, #1
 80012ac:	e031      	b.n	8001312 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d109      	bne.n	80012ca <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80012b6:	6878      	ldr	r0, [r7, #4]
 80012b8:	f7ff fd4a 	bl	8000d50 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	2200      	movs	r2, #0
 80012c0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	2200      	movs	r2, #0
 80012c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ce:	f003 0310 	and.w	r3, r3, #16
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d116      	bne.n	8001304 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80012da:	4b10      	ldr	r3, [pc, #64]	; (800131c <HAL_ADC_Init+0x84>)
 80012dc:	4013      	ands	r3, r2
 80012de:	f043 0202 	orr.w	r2, r3, #2
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80012e6:	6878      	ldr	r0, [r7, #4]
 80012e8:	f000 fb0e 	bl	8001908 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	2200      	movs	r2, #0
 80012f0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f6:	f023 0303 	bic.w	r3, r3, #3
 80012fa:	f043 0201 	orr.w	r2, r3, #1
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	641a      	str	r2, [r3, #64]	; 0x40
 8001302:	e001      	b.n	8001308 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001304:	2301      	movs	r3, #1
 8001306:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	2200      	movs	r2, #0
 800130c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001310:	7bfb      	ldrb	r3, [r7, #15]
}
 8001312:	4618      	mov	r0, r3
 8001314:	3710      	adds	r7, #16
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	ffffeefd 	.word	0xffffeefd

08001320 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001320:	b480      	push	{r7}
 8001322:	b085      	sub	sp, #20
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8001328:	2300      	movs	r3, #0
 800132a:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001332:	2b01      	cmp	r3, #1
 8001334:	d101      	bne.n	800133a <HAL_ADC_Start+0x1a>
 8001336:	2302      	movs	r3, #2
 8001338:	e0ad      	b.n	8001496 <HAL_ADC_Start+0x176>
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	2201      	movs	r2, #1
 800133e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	689b      	ldr	r3, [r3, #8]
 8001348:	f003 0301 	and.w	r3, r3, #1
 800134c:	2b01      	cmp	r3, #1
 800134e:	d018      	beq.n	8001382 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	689a      	ldr	r2, [r3, #8]
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f042 0201 	orr.w	r2, r2, #1
 800135e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8001360:	4b50      	ldr	r3, [pc, #320]	; (80014a4 <HAL_ADC_Start+0x184>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a50      	ldr	r2, [pc, #320]	; (80014a8 <HAL_ADC_Start+0x188>)
 8001366:	fba2 2303 	umull	r2, r3, r2, r3
 800136a:	0c9a      	lsrs	r2, r3, #18
 800136c:	4613      	mov	r3, r2
 800136e:	005b      	lsls	r3, r3, #1
 8001370:	4413      	add	r3, r2
 8001372:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001374:	e002      	b.n	800137c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	3b01      	subs	r3, #1
 800137a:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d1f9      	bne.n	8001376 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	689b      	ldr	r3, [r3, #8]
 8001388:	f003 0301 	and.w	r3, r3, #1
 800138c:	2b01      	cmp	r3, #1
 800138e:	d175      	bne.n	800147c <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001394:	4b45      	ldr	r3, [pc, #276]	; (80014ac <HAL_ADC_Start+0x18c>)
 8001396:	4013      	ands	r3, r2
 8001398:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d007      	beq.n	80013be <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80013b6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80013ca:	d106      	bne.n	80013da <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013d0:	f023 0206 	bic.w	r2, r3, #6
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	645a      	str	r2, [r3, #68]	; 0x44
 80013d8:	e002      	b.n	80013e0 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	2200      	movs	r2, #0
 80013de:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	2200      	movs	r2, #0
 80013e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80013f0:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80013f2:	4b2f      	ldr	r3, [pc, #188]	; (80014b0 <HAL_ADC_Start+0x190>)
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	f003 031f 	and.w	r3, r3, #31
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d10f      	bne.n	800141e <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	689b      	ldr	r3, [r3, #8]
 8001404:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001408:	2b00      	cmp	r3, #0
 800140a:	d143      	bne.n	8001494 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	689a      	ldr	r2, [r3, #8]
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800141a:	609a      	str	r2, [r3, #8]
 800141c:	e03a      	b.n	8001494 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	4a24      	ldr	r2, [pc, #144]	; (80014b4 <HAL_ADC_Start+0x194>)
 8001424:	4293      	cmp	r3, r2
 8001426:	d10e      	bne.n	8001446 <HAL_ADC_Start+0x126>
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	689b      	ldr	r3, [r3, #8]
 800142e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001432:	2b00      	cmp	r3, #0
 8001434:	d107      	bne.n	8001446 <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	689a      	ldr	r2, [r3, #8]
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001444:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8001446:	4b1a      	ldr	r3, [pc, #104]	; (80014b0 <HAL_ADC_Start+0x190>)
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	f003 0310 	and.w	r3, r3, #16
 800144e:	2b00      	cmp	r3, #0
 8001450:	d120      	bne.n	8001494 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4a18      	ldr	r2, [pc, #96]	; (80014b8 <HAL_ADC_Start+0x198>)
 8001458:	4293      	cmp	r3, r2
 800145a:	d11b      	bne.n	8001494 <HAL_ADC_Start+0x174>
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	689b      	ldr	r3, [r3, #8]
 8001462:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001466:	2b00      	cmp	r3, #0
 8001468:	d114      	bne.n	8001494 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	689a      	ldr	r2, [r3, #8]
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001478:	609a      	str	r2, [r3, #8]
 800147a:	e00b      	b.n	8001494 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001480:	f043 0210 	orr.w	r2, r3, #16
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800148c:	f043 0201 	orr.w	r2, r3, #1
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001494:	2300      	movs	r3, #0
}
 8001496:	4618      	mov	r0, r3
 8001498:	3714      	adds	r7, #20
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr
 80014a2:	bf00      	nop
 80014a4:	20000000 	.word	0x20000000
 80014a8:	431bde83 	.word	0x431bde83
 80014ac:	fffff8fe 	.word	0xfffff8fe
 80014b0:	40012300 	.word	0x40012300
 80014b4:	40012000 	.word	0x40012000
 80014b8:	40012200 	.word	0x40012200

080014bc <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80014bc:	b480      	push	{r7}
 80014be:	b083      	sub	sp, #12
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80014ca:	2b01      	cmp	r3, #1
 80014cc:	d101      	bne.n	80014d2 <HAL_ADC_Stop+0x16>
 80014ce:	2302      	movs	r3, #2
 80014d0:	e01f      	b.n	8001512 <HAL_ADC_Stop+0x56>
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	2201      	movs	r2, #1
 80014d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	689a      	ldr	r2, [r3, #8]
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f022 0201 	bic.w	r2, r2, #1
 80014e8:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	689b      	ldr	r3, [r3, #8]
 80014f0:	f003 0301 	and.w	r3, r3, #1
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d107      	bne.n	8001508 <HAL_ADC_Stop+0x4c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80014fc:	4b08      	ldr	r3, [pc, #32]	; (8001520 <HAL_ADC_Stop+0x64>)
 80014fe:	4013      	ands	r3, r2
 8001500:	f043 0201 	orr.w	r2, r3, #1
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2200      	movs	r2, #0
 800150c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001510:	2300      	movs	r3, #0
}
 8001512:	4618      	mov	r0, r3
 8001514:	370c      	adds	r7, #12
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr
 800151e:	bf00      	nop
 8001520:	ffffeefe 	.word	0xffffeefe

08001524 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b084      	sub	sp, #16
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
 800152c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800152e:	2300      	movs	r3, #0
 8001530:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	689b      	ldr	r3, [r3, #8]
 8001538:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800153c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001540:	d113      	bne.n	800156a <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	689b      	ldr	r3, [r3, #8]
 8001548:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800154c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001550:	d10b      	bne.n	800156a <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001556:	f043 0220 	orr.w	r2, r3, #32
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	2200      	movs	r2, #0
 8001562:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001566:	2301      	movs	r3, #1
 8001568:	e063      	b.n	8001632 <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 800156a:	f7ff fe65 	bl	8001238 <HAL_GetTick>
 800156e:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001570:	e021      	b.n	80015b6 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001578:	d01d      	beq.n	80015b6 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d007      	beq.n	8001590 <HAL_ADC_PollForConversion+0x6c>
 8001580:	f7ff fe5a 	bl	8001238 <HAL_GetTick>
 8001584:	4602      	mov	r2, r0
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	1ad3      	subs	r3, r2, r3
 800158a:	683a      	ldr	r2, [r7, #0]
 800158c:	429a      	cmp	r2, r3
 800158e:	d212      	bcs.n	80015b6 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f003 0302 	and.w	r3, r3, #2
 800159a:	2b02      	cmp	r3, #2
 800159c:	d00b      	beq.n	80015b6 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a2:	f043 0204 	orr.w	r2, r3, #4
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	2200      	movs	r2, #0
 80015ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80015b2:	2303      	movs	r3, #3
 80015b4:	e03d      	b.n	8001632 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f003 0302 	and.w	r3, r3, #2
 80015c0:	2b02      	cmp	r3, #2
 80015c2:	d1d6      	bne.n	8001572 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f06f 0212 	mvn.w	r2, #18
 80015cc:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	689b      	ldr	r3, [r3, #8]
 80015e0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d123      	bne.n	8001630 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d11f      	bne.n	8001630 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015f6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d006      	beq.n	800160c <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	689b      	ldr	r3, [r3, #8]
 8001604:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001608:	2b00      	cmp	r3, #0
 800160a:	d111      	bne.n	8001630 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001610:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800161c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001620:	2b00      	cmp	r3, #0
 8001622:	d105      	bne.n	8001630 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001628:	f043 0201 	orr.w	r2, r3, #1
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001630:	2300      	movs	r3, #0
}
 8001632:	4618      	mov	r0, r3
 8001634:	3710      	adds	r7, #16
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}

0800163a <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800163a:	b480      	push	{r7}
 800163c:	b083      	sub	sp, #12
 800163e:	af00      	add	r7, sp, #0
 8001640:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001648:	4618      	mov	r0, r3
 800164a:	370c      	adds	r7, #12
 800164c:	46bd      	mov	sp, r7
 800164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001652:	4770      	bx	lr

08001654 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001654:	b480      	push	{r7}
 8001656:	b085      	sub	sp, #20
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
 800165c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800165e:	2300      	movs	r3, #0
 8001660:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001668:	2b01      	cmp	r3, #1
 800166a:	d101      	bne.n	8001670 <HAL_ADC_ConfigChannel+0x1c>
 800166c:	2302      	movs	r3, #2
 800166e:	e13a      	b.n	80018e6 <HAL_ADC_ConfigChannel+0x292>
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2201      	movs	r2, #1
 8001674:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	2b09      	cmp	r3, #9
 800167e:	d93a      	bls.n	80016f6 <HAL_ADC_ConfigChannel+0xa2>
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001688:	d035      	beq.n	80016f6 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	68d9      	ldr	r1, [r3, #12]
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	b29b      	uxth	r3, r3
 8001696:	461a      	mov	r2, r3
 8001698:	4613      	mov	r3, r2
 800169a:	005b      	lsls	r3, r3, #1
 800169c:	4413      	add	r3, r2
 800169e:	3b1e      	subs	r3, #30
 80016a0:	2207      	movs	r2, #7
 80016a2:	fa02 f303 	lsl.w	r3, r2, r3
 80016a6:	43da      	mvns	r2, r3
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	400a      	ands	r2, r1
 80016ae:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a8f      	ldr	r2, [pc, #572]	; (80018f4 <HAL_ADC_ConfigChannel+0x2a0>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d10a      	bne.n	80016d0 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	68d9      	ldr	r1, [r3, #12]
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	689b      	ldr	r3, [r3, #8]
 80016c4:	061a      	lsls	r2, r3, #24
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	430a      	orrs	r2, r1
 80016cc:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80016ce:	e039      	b.n	8001744 <HAL_ADC_ConfigChannel+0xf0>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	68d9      	ldr	r1, [r3, #12]
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	689a      	ldr	r2, [r3, #8]
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	b29b      	uxth	r3, r3
 80016e0:	4618      	mov	r0, r3
 80016e2:	4603      	mov	r3, r0
 80016e4:	005b      	lsls	r3, r3, #1
 80016e6:	4403      	add	r3, r0
 80016e8:	3b1e      	subs	r3, #30
 80016ea:	409a      	lsls	r2, r3
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	430a      	orrs	r2, r1
 80016f2:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80016f4:	e026      	b.n	8001744 <HAL_ADC_ConfigChannel+0xf0>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	6919      	ldr	r1, [r3, #16]
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	b29b      	uxth	r3, r3
 8001702:	461a      	mov	r2, r3
 8001704:	4613      	mov	r3, r2
 8001706:	005b      	lsls	r3, r3, #1
 8001708:	4413      	add	r3, r2
 800170a:	f003 031f 	and.w	r3, r3, #31
 800170e:	2207      	movs	r2, #7
 8001710:	fa02 f303 	lsl.w	r3, r2, r3
 8001714:	43da      	mvns	r2, r3
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	400a      	ands	r2, r1
 800171c:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	6919      	ldr	r1, [r3, #16]
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	689a      	ldr	r2, [r3, #8]
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	b29b      	uxth	r3, r3
 800172e:	4618      	mov	r0, r3
 8001730:	4603      	mov	r3, r0
 8001732:	005b      	lsls	r3, r3, #1
 8001734:	4403      	add	r3, r0
 8001736:	f003 031f 	and.w	r3, r3, #31
 800173a:	409a      	lsls	r2, r3
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	430a      	orrs	r2, r1
 8001742:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	2b06      	cmp	r3, #6
 800174a:	d824      	bhi.n	8001796 <HAL_ADC_ConfigChannel+0x142>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	685a      	ldr	r2, [r3, #4]
 8001756:	4613      	mov	r3, r2
 8001758:	009b      	lsls	r3, r3, #2
 800175a:	4413      	add	r3, r2
 800175c:	3b05      	subs	r3, #5
 800175e:	221f      	movs	r2, #31
 8001760:	fa02 f303 	lsl.w	r3, r2, r3
 8001764:	43da      	mvns	r2, r3
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	400a      	ands	r2, r1
 800176c:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	b29b      	uxth	r3, r3
 800177a:	4618      	mov	r0, r3
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	685a      	ldr	r2, [r3, #4]
 8001780:	4613      	mov	r3, r2
 8001782:	009b      	lsls	r3, r3, #2
 8001784:	4413      	add	r3, r2
 8001786:	3b05      	subs	r3, #5
 8001788:	fa00 f203 	lsl.w	r2, r0, r3
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	430a      	orrs	r2, r1
 8001792:	635a      	str	r2, [r3, #52]	; 0x34
 8001794:	e04c      	b.n	8001830 <HAL_ADC_ConfigChannel+0x1dc>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	2b0c      	cmp	r3, #12
 800179c:	d824      	bhi.n	80017e8 <HAL_ADC_ConfigChannel+0x194>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	685a      	ldr	r2, [r3, #4]
 80017a8:	4613      	mov	r3, r2
 80017aa:	009b      	lsls	r3, r3, #2
 80017ac:	4413      	add	r3, r2
 80017ae:	3b23      	subs	r3, #35	; 0x23
 80017b0:	221f      	movs	r2, #31
 80017b2:	fa02 f303 	lsl.w	r3, r2, r3
 80017b6:	43da      	mvns	r2, r3
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	400a      	ands	r2, r1
 80017be:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	b29b      	uxth	r3, r3
 80017cc:	4618      	mov	r0, r3
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	685a      	ldr	r2, [r3, #4]
 80017d2:	4613      	mov	r3, r2
 80017d4:	009b      	lsls	r3, r3, #2
 80017d6:	4413      	add	r3, r2
 80017d8:	3b23      	subs	r3, #35	; 0x23
 80017da:	fa00 f203 	lsl.w	r2, r0, r3
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	430a      	orrs	r2, r1
 80017e4:	631a      	str	r2, [r3, #48]	; 0x30
 80017e6:	e023      	b.n	8001830 <HAL_ADC_ConfigChannel+0x1dc>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	685a      	ldr	r2, [r3, #4]
 80017f2:	4613      	mov	r3, r2
 80017f4:	009b      	lsls	r3, r3, #2
 80017f6:	4413      	add	r3, r2
 80017f8:	3b41      	subs	r3, #65	; 0x41
 80017fa:	221f      	movs	r2, #31
 80017fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001800:	43da      	mvns	r2, r3
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	400a      	ands	r2, r1
 8001808:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	b29b      	uxth	r3, r3
 8001816:	4618      	mov	r0, r3
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	685a      	ldr	r2, [r3, #4]
 800181c:	4613      	mov	r3, r2
 800181e:	009b      	lsls	r3, r3, #2
 8001820:	4413      	add	r3, r2
 8001822:	3b41      	subs	r3, #65	; 0x41
 8001824:	fa00 f203 	lsl.w	r2, r0, r3
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	430a      	orrs	r2, r1
 800182e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a30      	ldr	r2, [pc, #192]	; (80018f8 <HAL_ADC_ConfigChannel+0x2a4>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d10a      	bne.n	8001850 <HAL_ADC_ConfigChannel+0x1fc>
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001842:	d105      	bne.n	8001850 <HAL_ADC_ConfigChannel+0x1fc>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8001844:	4b2d      	ldr	r3, [pc, #180]	; (80018fc <HAL_ADC_ConfigChannel+0x2a8>)
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	4a2c      	ldr	r2, [pc, #176]	; (80018fc <HAL_ADC_ConfigChannel+0x2a8>)
 800184a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800184e:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a28      	ldr	r2, [pc, #160]	; (80018f8 <HAL_ADC_ConfigChannel+0x2a4>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d10f      	bne.n	800187a <HAL_ADC_ConfigChannel+0x226>
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	2b12      	cmp	r3, #18
 8001860:	d10b      	bne.n	800187a <HAL_ADC_ConfigChannel+0x226>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8001862:	4b26      	ldr	r3, [pc, #152]	; (80018fc <HAL_ADC_ConfigChannel+0x2a8>)
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	4a25      	ldr	r2, [pc, #148]	; (80018fc <HAL_ADC_ConfigChannel+0x2a8>)
 8001868:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800186c:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800186e:	4b23      	ldr	r3, [pc, #140]	; (80018fc <HAL_ADC_ConfigChannel+0x2a8>)
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	4a22      	ldr	r2, [pc, #136]	; (80018fc <HAL_ADC_ConfigChannel+0x2a8>)
 8001874:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001878:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4a1e      	ldr	r2, [pc, #120]	; (80018f8 <HAL_ADC_ConfigChannel+0x2a4>)
 8001880:	4293      	cmp	r3, r2
 8001882:	d12b      	bne.n	80018dc <HAL_ADC_ConfigChannel+0x288>
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a1a      	ldr	r2, [pc, #104]	; (80018f4 <HAL_ADC_ConfigChannel+0x2a0>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d003      	beq.n	8001896 <HAL_ADC_ConfigChannel+0x242>
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	2b11      	cmp	r3, #17
 8001894:	d122      	bne.n	80018dc <HAL_ADC_ConfigChannel+0x288>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8001896:	4b19      	ldr	r3, [pc, #100]	; (80018fc <HAL_ADC_ConfigChannel+0x2a8>)
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	4a18      	ldr	r2, [pc, #96]	; (80018fc <HAL_ADC_ConfigChannel+0x2a8>)
 800189c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80018a0:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80018a2:	4b16      	ldr	r3, [pc, #88]	; (80018fc <HAL_ADC_ConfigChannel+0x2a8>)
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	4a15      	ldr	r2, [pc, #84]	; (80018fc <HAL_ADC_ConfigChannel+0x2a8>)
 80018a8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80018ac:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4a10      	ldr	r2, [pc, #64]	; (80018f4 <HAL_ADC_ConfigChannel+0x2a0>)
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d111      	bne.n	80018dc <HAL_ADC_ConfigChannel+0x288>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80018b8:	4b11      	ldr	r3, [pc, #68]	; (8001900 <HAL_ADC_ConfigChannel+0x2ac>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a11      	ldr	r2, [pc, #68]	; (8001904 <HAL_ADC_ConfigChannel+0x2b0>)
 80018be:	fba2 2303 	umull	r2, r3, r2, r3
 80018c2:	0c9a      	lsrs	r2, r3, #18
 80018c4:	4613      	mov	r3, r2
 80018c6:	009b      	lsls	r3, r3, #2
 80018c8:	4413      	add	r3, r2
 80018ca:	005b      	lsls	r3, r3, #1
 80018cc:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80018ce:	e002      	b.n	80018d6 <HAL_ADC_ConfigChannel+0x282>
      {
        counter--;
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	3b01      	subs	r3, #1
 80018d4:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d1f9      	bne.n	80018d0 <HAL_ADC_ConfigChannel+0x27c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2200      	movs	r2, #0
 80018e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80018e4:	2300      	movs	r3, #0
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	3714      	adds	r7, #20
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr
 80018f2:	bf00      	nop
 80018f4:	10000012 	.word	0x10000012
 80018f8:	40012000 	.word	0x40012000
 80018fc:	40012300 	.word	0x40012300
 8001900:	20000000 	.word	0x20000000
 8001904:	431bde83 	.word	0x431bde83

08001908 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001908:	b480      	push	{r7}
 800190a:	b083      	sub	sp, #12
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001910:	4b78      	ldr	r3, [pc, #480]	; (8001af4 <ADC_Init+0x1ec>)
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	4a77      	ldr	r2, [pc, #476]	; (8001af4 <ADC_Init+0x1ec>)
 8001916:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800191a:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 800191c:	4b75      	ldr	r3, [pc, #468]	; (8001af4 <ADC_Init+0x1ec>)
 800191e:	685a      	ldr	r2, [r3, #4]
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	4973      	ldr	r1, [pc, #460]	; (8001af4 <ADC_Init+0x1ec>)
 8001926:	4313      	orrs	r3, r2
 8001928:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	685a      	ldr	r2, [r3, #4]
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001938:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	6859      	ldr	r1, [r3, #4]
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	691b      	ldr	r3, [r3, #16]
 8001944:	021a      	lsls	r2, r3, #8
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	430a      	orrs	r2, r1
 800194c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	685a      	ldr	r2, [r3, #4]
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800195c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	6859      	ldr	r1, [r3, #4]
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	689a      	ldr	r2, [r3, #8]
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	430a      	orrs	r2, r1
 800196e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	689a      	ldr	r2, [r3, #8]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800197e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	6899      	ldr	r1, [r3, #8]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	68da      	ldr	r2, [r3, #12]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	430a      	orrs	r2, r1
 8001990:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001996:	4a58      	ldr	r2, [pc, #352]	; (8001af8 <ADC_Init+0x1f0>)
 8001998:	4293      	cmp	r3, r2
 800199a:	d022      	beq.n	80019e2 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	689a      	ldr	r2, [r3, #8]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80019aa:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	6899      	ldr	r1, [r3, #8]
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	430a      	orrs	r2, r1
 80019bc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	689a      	ldr	r2, [r3, #8]
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80019cc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	6899      	ldr	r1, [r3, #8]
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	430a      	orrs	r2, r1
 80019de:	609a      	str	r2, [r3, #8]
 80019e0:	e00f      	b.n	8001a02 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	689a      	ldr	r2, [r3, #8]
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80019f0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	689a      	ldr	r2, [r3, #8]
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001a00:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	689a      	ldr	r2, [r3, #8]
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f022 0202 	bic.w	r2, r2, #2
 8001a10:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	6899      	ldr	r1, [r3, #8]
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	699b      	ldr	r3, [r3, #24]
 8001a1c:	005a      	lsls	r2, r3, #1
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	430a      	orrs	r2, r1
 8001a24:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d01b      	beq.n	8001a68 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	685a      	ldr	r2, [r3, #4]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001a3e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	685a      	ldr	r2, [r3, #4]
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001a4e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	6859      	ldr	r1, [r3, #4]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a5a:	3b01      	subs	r3, #1
 8001a5c:	035a      	lsls	r2, r3, #13
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	430a      	orrs	r2, r1
 8001a64:	605a      	str	r2, [r3, #4]
 8001a66:	e007      	b.n	8001a78 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	685a      	ldr	r2, [r3, #4]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a76:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001a86:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	69db      	ldr	r3, [r3, #28]
 8001a92:	3b01      	subs	r3, #1
 8001a94:	051a      	lsls	r2, r3, #20
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	430a      	orrs	r2, r1
 8001a9c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	689a      	ldr	r2, [r3, #8]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001aac:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	6899      	ldr	r1, [r3, #8]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001aba:	025a      	lsls	r2, r3, #9
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	430a      	orrs	r2, r1
 8001ac2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	689a      	ldr	r2, [r3, #8]
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ad2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	6899      	ldr	r1, [r3, #8]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	695b      	ldr	r3, [r3, #20]
 8001ade:	029a      	lsls	r2, r3, #10
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	430a      	orrs	r2, r1
 8001ae6:	609a      	str	r2, [r3, #8]
}
 8001ae8:	bf00      	nop
 8001aea:	370c      	adds	r7, #12
 8001aec:	46bd      	mov	sp, r7
 8001aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af2:	4770      	bx	lr
 8001af4:	40012300 	.word	0x40012300
 8001af8:	0f000001 	.word	0x0f000001

08001afc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b085      	sub	sp, #20
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	f003 0307 	and.w	r3, r3, #7
 8001b0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b0c:	4b0b      	ldr	r3, [pc, #44]	; (8001b3c <__NVIC_SetPriorityGrouping+0x40>)
 8001b0e:	68db      	ldr	r3, [r3, #12]
 8001b10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b12:	68ba      	ldr	r2, [r7, #8]
 8001b14:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b18:	4013      	ands	r3, r2
 8001b1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b20:	68bb      	ldr	r3, [r7, #8]
 8001b22:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001b24:	4b06      	ldr	r3, [pc, #24]	; (8001b40 <__NVIC_SetPriorityGrouping+0x44>)
 8001b26:	4313      	orrs	r3, r2
 8001b28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b2a:	4a04      	ldr	r2, [pc, #16]	; (8001b3c <__NVIC_SetPriorityGrouping+0x40>)
 8001b2c:	68bb      	ldr	r3, [r7, #8]
 8001b2e:	60d3      	str	r3, [r2, #12]
}
 8001b30:	bf00      	nop
 8001b32:	3714      	adds	r7, #20
 8001b34:	46bd      	mov	sp, r7
 8001b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3a:	4770      	bx	lr
 8001b3c:	e000ed00 	.word	0xe000ed00
 8001b40:	05fa0000 	.word	0x05fa0000

08001b44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b44:	b480      	push	{r7}
 8001b46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b48:	4b04      	ldr	r3, [pc, #16]	; (8001b5c <__NVIC_GetPriorityGrouping+0x18>)
 8001b4a:	68db      	ldr	r3, [r3, #12]
 8001b4c:	0a1b      	lsrs	r3, r3, #8
 8001b4e:	f003 0307 	and.w	r3, r3, #7
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	46bd      	mov	sp, r7
 8001b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5a:	4770      	bx	lr
 8001b5c:	e000ed00 	.word	0xe000ed00

08001b60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b083      	sub	sp, #12
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	4603      	mov	r3, r0
 8001b68:	6039      	str	r1, [r7, #0]
 8001b6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	db0a      	blt.n	8001b8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	b2da      	uxtb	r2, r3
 8001b78:	490c      	ldr	r1, [pc, #48]	; (8001bac <__NVIC_SetPriority+0x4c>)
 8001b7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b7e:	0112      	lsls	r2, r2, #4
 8001b80:	b2d2      	uxtb	r2, r2
 8001b82:	440b      	add	r3, r1
 8001b84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b88:	e00a      	b.n	8001ba0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	b2da      	uxtb	r2, r3
 8001b8e:	4908      	ldr	r1, [pc, #32]	; (8001bb0 <__NVIC_SetPriority+0x50>)
 8001b90:	79fb      	ldrb	r3, [r7, #7]
 8001b92:	f003 030f 	and.w	r3, r3, #15
 8001b96:	3b04      	subs	r3, #4
 8001b98:	0112      	lsls	r2, r2, #4
 8001b9a:	b2d2      	uxtb	r2, r2
 8001b9c:	440b      	add	r3, r1
 8001b9e:	761a      	strb	r2, [r3, #24]
}
 8001ba0:	bf00      	nop
 8001ba2:	370c      	adds	r7, #12
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001baa:	4770      	bx	lr
 8001bac:	e000e100 	.word	0xe000e100
 8001bb0:	e000ed00 	.word	0xe000ed00

08001bb4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b089      	sub	sp, #36	; 0x24
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	60f8      	str	r0, [r7, #12]
 8001bbc:	60b9      	str	r1, [r7, #8]
 8001bbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	f003 0307 	and.w	r3, r3, #7
 8001bc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bc8:	69fb      	ldr	r3, [r7, #28]
 8001bca:	f1c3 0307 	rsb	r3, r3, #7
 8001bce:	2b04      	cmp	r3, #4
 8001bd0:	bf28      	it	cs
 8001bd2:	2304      	movcs	r3, #4
 8001bd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bd6:	69fb      	ldr	r3, [r7, #28]
 8001bd8:	3304      	adds	r3, #4
 8001bda:	2b06      	cmp	r3, #6
 8001bdc:	d902      	bls.n	8001be4 <NVIC_EncodePriority+0x30>
 8001bde:	69fb      	ldr	r3, [r7, #28]
 8001be0:	3b03      	subs	r3, #3
 8001be2:	e000      	b.n	8001be6 <NVIC_EncodePriority+0x32>
 8001be4:	2300      	movs	r3, #0
 8001be6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001be8:	f04f 32ff 	mov.w	r2, #4294967295
 8001bec:	69bb      	ldr	r3, [r7, #24]
 8001bee:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf2:	43da      	mvns	r2, r3
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	401a      	ands	r2, r3
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bfc:	f04f 31ff 	mov.w	r1, #4294967295
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	fa01 f303 	lsl.w	r3, r1, r3
 8001c06:	43d9      	mvns	r1, r3
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c0c:	4313      	orrs	r3, r2
         );
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	3724      	adds	r7, #36	; 0x24
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr
	...

08001c1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b082      	sub	sp, #8
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	3b01      	subs	r3, #1
 8001c28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c2c:	d301      	bcc.n	8001c32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e00f      	b.n	8001c52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c32:	4a0a      	ldr	r2, [pc, #40]	; (8001c5c <SysTick_Config+0x40>)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	3b01      	subs	r3, #1
 8001c38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c3a:	210f      	movs	r1, #15
 8001c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c40:	f7ff ff8e 	bl	8001b60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c44:	4b05      	ldr	r3, [pc, #20]	; (8001c5c <SysTick_Config+0x40>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c4a:	4b04      	ldr	r3, [pc, #16]	; (8001c5c <SysTick_Config+0x40>)
 8001c4c:	2207      	movs	r2, #7
 8001c4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c50:	2300      	movs	r3, #0
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	3708      	adds	r7, #8
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	e000e010 	.word	0xe000e010

08001c60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b082      	sub	sp, #8
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c68:	6878      	ldr	r0, [r7, #4]
 8001c6a:	f7ff ff47 	bl	8001afc <__NVIC_SetPriorityGrouping>
}
 8001c6e:	bf00      	nop
 8001c70:	3708      	adds	r7, #8
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}

08001c76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c76:	b580      	push	{r7, lr}
 8001c78:	b086      	sub	sp, #24
 8001c7a:	af00      	add	r7, sp, #0
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	60b9      	str	r1, [r7, #8]
 8001c80:	607a      	str	r2, [r7, #4]
 8001c82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001c84:	2300      	movs	r3, #0
 8001c86:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c88:	f7ff ff5c 	bl	8001b44 <__NVIC_GetPriorityGrouping>
 8001c8c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c8e:	687a      	ldr	r2, [r7, #4]
 8001c90:	68b9      	ldr	r1, [r7, #8]
 8001c92:	6978      	ldr	r0, [r7, #20]
 8001c94:	f7ff ff8e 	bl	8001bb4 <NVIC_EncodePriority>
 8001c98:	4602      	mov	r2, r0
 8001c9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c9e:	4611      	mov	r1, r2
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f7ff ff5d 	bl	8001b60 <__NVIC_SetPriority>
}
 8001ca6:	bf00      	nop
 8001ca8:	3718      	adds	r7, #24
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}

08001cae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cae:	b580      	push	{r7, lr}
 8001cb0:	b082      	sub	sp, #8
 8001cb2:	af00      	add	r7, sp, #0
 8001cb4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cb6:	6878      	ldr	r0, [r7, #4]
 8001cb8:	f7ff ffb0 	bl	8001c1c <SysTick_Config>
 8001cbc:	4603      	mov	r3, r0
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	3708      	adds	r7, #8
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
	...

08001cc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b089      	sub	sp, #36	; 0x24
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
 8001cd0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	61fb      	str	r3, [r7, #28]
 8001ce6:	e175      	b.n	8001fd4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001ce8:	2201      	movs	r2, #1
 8001cea:	69fb      	ldr	r3, [r7, #28]
 8001cec:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	697a      	ldr	r2, [r7, #20]
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8001cfc:	693a      	ldr	r2, [r7, #16]
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	429a      	cmp	r2, r3
 8001d02:	f040 8164 	bne.w	8001fce <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	f003 0303 	and.w	r3, r3, #3
 8001d0e:	2b01      	cmp	r3, #1
 8001d10:	d005      	beq.n	8001d1e <HAL_GPIO_Init+0x56>
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	f003 0303 	and.w	r3, r3, #3
 8001d1a:	2b02      	cmp	r3, #2
 8001d1c:	d130      	bne.n	8001d80 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001d24:	69fb      	ldr	r3, [r7, #28]
 8001d26:	005b      	lsls	r3, r3, #1
 8001d28:	2203      	movs	r2, #3
 8001d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2e:	43db      	mvns	r3, r3
 8001d30:	69ba      	ldr	r2, [r7, #24]
 8001d32:	4013      	ands	r3, r2
 8001d34:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	68da      	ldr	r2, [r3, #12]
 8001d3a:	69fb      	ldr	r3, [r7, #28]
 8001d3c:	005b      	lsls	r3, r3, #1
 8001d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d42:	69ba      	ldr	r2, [r7, #24]
 8001d44:	4313      	orrs	r3, r2
 8001d46:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	69ba      	ldr	r2, [r7, #24]
 8001d4c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d54:	2201      	movs	r2, #1
 8001d56:	69fb      	ldr	r3, [r7, #28]
 8001d58:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5c:	43db      	mvns	r3, r3
 8001d5e:	69ba      	ldr	r2, [r7, #24]
 8001d60:	4013      	ands	r3, r2
 8001d62:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	091b      	lsrs	r3, r3, #4
 8001d6a:	f003 0201 	and.w	r2, r3, #1
 8001d6e:	69fb      	ldr	r3, [r7, #28]
 8001d70:	fa02 f303 	lsl.w	r3, r2, r3
 8001d74:	69ba      	ldr	r2, [r7, #24]
 8001d76:	4313      	orrs	r3, r2
 8001d78:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	69ba      	ldr	r2, [r7, #24]
 8001d7e:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	f003 0303 	and.w	r3, r3, #3
 8001d88:	2b03      	cmp	r3, #3
 8001d8a:	d017      	beq.n	8001dbc <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	68db      	ldr	r3, [r3, #12]
 8001d90:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001d92:	69fb      	ldr	r3, [r7, #28]
 8001d94:	005b      	lsls	r3, r3, #1
 8001d96:	2203      	movs	r2, #3
 8001d98:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9c:	43db      	mvns	r3, r3
 8001d9e:	69ba      	ldr	r2, [r7, #24]
 8001da0:	4013      	ands	r3, r2
 8001da2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	689a      	ldr	r2, [r3, #8]
 8001da8:	69fb      	ldr	r3, [r7, #28]
 8001daa:	005b      	lsls	r3, r3, #1
 8001dac:	fa02 f303 	lsl.w	r3, r2, r3
 8001db0:	69ba      	ldr	r2, [r7, #24]
 8001db2:	4313      	orrs	r3, r2
 8001db4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	69ba      	ldr	r2, [r7, #24]
 8001dba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	f003 0303 	and.w	r3, r3, #3
 8001dc4:	2b02      	cmp	r3, #2
 8001dc6:	d123      	bne.n	8001e10 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001dc8:	69fb      	ldr	r3, [r7, #28]
 8001dca:	08da      	lsrs	r2, r3, #3
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	3208      	adds	r2, #8
 8001dd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001dd4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001dd6:	69fb      	ldr	r3, [r7, #28]
 8001dd8:	f003 0307 	and.w	r3, r3, #7
 8001ddc:	009b      	lsls	r3, r3, #2
 8001dde:	220f      	movs	r2, #15
 8001de0:	fa02 f303 	lsl.w	r3, r2, r3
 8001de4:	43db      	mvns	r3, r3
 8001de6:	69ba      	ldr	r2, [r7, #24]
 8001de8:	4013      	ands	r3, r2
 8001dea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	691a      	ldr	r2, [r3, #16]
 8001df0:	69fb      	ldr	r3, [r7, #28]
 8001df2:	f003 0307 	and.w	r3, r3, #7
 8001df6:	009b      	lsls	r3, r3, #2
 8001df8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfc:	69ba      	ldr	r2, [r7, #24]
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001e02:	69fb      	ldr	r3, [r7, #28]
 8001e04:	08da      	lsrs	r2, r3, #3
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	3208      	adds	r2, #8
 8001e0a:	69b9      	ldr	r1, [r7, #24]
 8001e0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001e16:	69fb      	ldr	r3, [r7, #28]
 8001e18:	005b      	lsls	r3, r3, #1
 8001e1a:	2203      	movs	r2, #3
 8001e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e20:	43db      	mvns	r3, r3
 8001e22:	69ba      	ldr	r2, [r7, #24]
 8001e24:	4013      	ands	r3, r2
 8001e26:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	f003 0203 	and.w	r2, r3, #3
 8001e30:	69fb      	ldr	r3, [r7, #28]
 8001e32:	005b      	lsls	r3, r3, #1
 8001e34:	fa02 f303 	lsl.w	r3, r2, r3
 8001e38:	69ba      	ldr	r2, [r7, #24]
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	69ba      	ldr	r2, [r7, #24]
 8001e42:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	f000 80be 	beq.w	8001fce <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e52:	4b66      	ldr	r3, [pc, #408]	; (8001fec <HAL_GPIO_Init+0x324>)
 8001e54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e56:	4a65      	ldr	r2, [pc, #404]	; (8001fec <HAL_GPIO_Init+0x324>)
 8001e58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e5c:	6453      	str	r3, [r2, #68]	; 0x44
 8001e5e:	4b63      	ldr	r3, [pc, #396]	; (8001fec <HAL_GPIO_Init+0x324>)
 8001e60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e66:	60fb      	str	r3, [r7, #12]
 8001e68:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001e6a:	4a61      	ldr	r2, [pc, #388]	; (8001ff0 <HAL_GPIO_Init+0x328>)
 8001e6c:	69fb      	ldr	r3, [r7, #28]
 8001e6e:	089b      	lsrs	r3, r3, #2
 8001e70:	3302      	adds	r3, #2
 8001e72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e76:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001e78:	69fb      	ldr	r3, [r7, #28]
 8001e7a:	f003 0303 	and.w	r3, r3, #3
 8001e7e:	009b      	lsls	r3, r3, #2
 8001e80:	220f      	movs	r2, #15
 8001e82:	fa02 f303 	lsl.w	r3, r2, r3
 8001e86:	43db      	mvns	r3, r3
 8001e88:	69ba      	ldr	r2, [r7, #24]
 8001e8a:	4013      	ands	r3, r2
 8001e8c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	4a58      	ldr	r2, [pc, #352]	; (8001ff4 <HAL_GPIO_Init+0x32c>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d037      	beq.n	8001f06 <HAL_GPIO_Init+0x23e>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	4a57      	ldr	r2, [pc, #348]	; (8001ff8 <HAL_GPIO_Init+0x330>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d031      	beq.n	8001f02 <HAL_GPIO_Init+0x23a>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	4a56      	ldr	r2, [pc, #344]	; (8001ffc <HAL_GPIO_Init+0x334>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d02b      	beq.n	8001efe <HAL_GPIO_Init+0x236>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	4a55      	ldr	r2, [pc, #340]	; (8002000 <HAL_GPIO_Init+0x338>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d025      	beq.n	8001efa <HAL_GPIO_Init+0x232>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	4a54      	ldr	r2, [pc, #336]	; (8002004 <HAL_GPIO_Init+0x33c>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d01f      	beq.n	8001ef6 <HAL_GPIO_Init+0x22e>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	4a53      	ldr	r2, [pc, #332]	; (8002008 <HAL_GPIO_Init+0x340>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d019      	beq.n	8001ef2 <HAL_GPIO_Init+0x22a>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	4a52      	ldr	r2, [pc, #328]	; (800200c <HAL_GPIO_Init+0x344>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d013      	beq.n	8001eee <HAL_GPIO_Init+0x226>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	4a51      	ldr	r2, [pc, #324]	; (8002010 <HAL_GPIO_Init+0x348>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d00d      	beq.n	8001eea <HAL_GPIO_Init+0x222>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	4a50      	ldr	r2, [pc, #320]	; (8002014 <HAL_GPIO_Init+0x34c>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d007      	beq.n	8001ee6 <HAL_GPIO_Init+0x21e>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	4a4f      	ldr	r2, [pc, #316]	; (8002018 <HAL_GPIO_Init+0x350>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d101      	bne.n	8001ee2 <HAL_GPIO_Init+0x21a>
 8001ede:	2309      	movs	r3, #9
 8001ee0:	e012      	b.n	8001f08 <HAL_GPIO_Init+0x240>
 8001ee2:	230a      	movs	r3, #10
 8001ee4:	e010      	b.n	8001f08 <HAL_GPIO_Init+0x240>
 8001ee6:	2308      	movs	r3, #8
 8001ee8:	e00e      	b.n	8001f08 <HAL_GPIO_Init+0x240>
 8001eea:	2307      	movs	r3, #7
 8001eec:	e00c      	b.n	8001f08 <HAL_GPIO_Init+0x240>
 8001eee:	2306      	movs	r3, #6
 8001ef0:	e00a      	b.n	8001f08 <HAL_GPIO_Init+0x240>
 8001ef2:	2305      	movs	r3, #5
 8001ef4:	e008      	b.n	8001f08 <HAL_GPIO_Init+0x240>
 8001ef6:	2304      	movs	r3, #4
 8001ef8:	e006      	b.n	8001f08 <HAL_GPIO_Init+0x240>
 8001efa:	2303      	movs	r3, #3
 8001efc:	e004      	b.n	8001f08 <HAL_GPIO_Init+0x240>
 8001efe:	2302      	movs	r3, #2
 8001f00:	e002      	b.n	8001f08 <HAL_GPIO_Init+0x240>
 8001f02:	2301      	movs	r3, #1
 8001f04:	e000      	b.n	8001f08 <HAL_GPIO_Init+0x240>
 8001f06:	2300      	movs	r3, #0
 8001f08:	69fa      	ldr	r2, [r7, #28]
 8001f0a:	f002 0203 	and.w	r2, r2, #3
 8001f0e:	0092      	lsls	r2, r2, #2
 8001f10:	4093      	lsls	r3, r2
 8001f12:	69ba      	ldr	r2, [r7, #24]
 8001f14:	4313      	orrs	r3, r2
 8001f16:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001f18:	4935      	ldr	r1, [pc, #212]	; (8001ff0 <HAL_GPIO_Init+0x328>)
 8001f1a:	69fb      	ldr	r3, [r7, #28]
 8001f1c:	089b      	lsrs	r3, r3, #2
 8001f1e:	3302      	adds	r3, #2
 8001f20:	69ba      	ldr	r2, [r7, #24]
 8001f22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f26:	4b3d      	ldr	r3, [pc, #244]	; (800201c <HAL_GPIO_Init+0x354>)
 8001f28:	689b      	ldr	r3, [r3, #8]
 8001f2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	43db      	mvns	r3, r3
 8001f30:	69ba      	ldr	r2, [r7, #24]
 8001f32:	4013      	ands	r3, r2
 8001f34:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d003      	beq.n	8001f4a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001f42:	69ba      	ldr	r2, [r7, #24]
 8001f44:	693b      	ldr	r3, [r7, #16]
 8001f46:	4313      	orrs	r3, r2
 8001f48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f4a:	4a34      	ldr	r2, [pc, #208]	; (800201c <HAL_GPIO_Init+0x354>)
 8001f4c:	69bb      	ldr	r3, [r7, #24]
 8001f4e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f50:	4b32      	ldr	r3, [pc, #200]	; (800201c <HAL_GPIO_Init+0x354>)
 8001f52:	68db      	ldr	r3, [r3, #12]
 8001f54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	43db      	mvns	r3, r3
 8001f5a:	69ba      	ldr	r2, [r7, #24]
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d003      	beq.n	8001f74 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001f6c:	69ba      	ldr	r2, [r7, #24]
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	4313      	orrs	r3, r2
 8001f72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f74:	4a29      	ldr	r2, [pc, #164]	; (800201c <HAL_GPIO_Init+0x354>)
 8001f76:	69bb      	ldr	r3, [r7, #24]
 8001f78:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f7a:	4b28      	ldr	r3, [pc, #160]	; (800201c <HAL_GPIO_Init+0x354>)
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f80:	693b      	ldr	r3, [r7, #16]
 8001f82:	43db      	mvns	r3, r3
 8001f84:	69ba      	ldr	r2, [r7, #24]
 8001f86:	4013      	ands	r3, r2
 8001f88:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d003      	beq.n	8001f9e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001f96:	69ba      	ldr	r2, [r7, #24]
 8001f98:	693b      	ldr	r3, [r7, #16]
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f9e:	4a1f      	ldr	r2, [pc, #124]	; (800201c <HAL_GPIO_Init+0x354>)
 8001fa0:	69bb      	ldr	r3, [r7, #24]
 8001fa2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001fa4:	4b1d      	ldr	r3, [pc, #116]	; (800201c <HAL_GPIO_Init+0x354>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001faa:	693b      	ldr	r3, [r7, #16]
 8001fac:	43db      	mvns	r3, r3
 8001fae:	69ba      	ldr	r2, [r7, #24]
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d003      	beq.n	8001fc8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001fc0:	69ba      	ldr	r2, [r7, #24]
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001fc8:	4a14      	ldr	r2, [pc, #80]	; (800201c <HAL_GPIO_Init+0x354>)
 8001fca:	69bb      	ldr	r3, [r7, #24]
 8001fcc:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8001fce:	69fb      	ldr	r3, [r7, #28]
 8001fd0:	3301      	adds	r3, #1
 8001fd2:	61fb      	str	r3, [r7, #28]
 8001fd4:	69fb      	ldr	r3, [r7, #28]
 8001fd6:	2b0f      	cmp	r3, #15
 8001fd8:	f67f ae86 	bls.w	8001ce8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001fdc:	bf00      	nop
 8001fde:	bf00      	nop
 8001fe0:	3724      	adds	r7, #36	; 0x24
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr
 8001fea:	bf00      	nop
 8001fec:	40023800 	.word	0x40023800
 8001ff0:	40013800 	.word	0x40013800
 8001ff4:	40020000 	.word	0x40020000
 8001ff8:	40020400 	.word	0x40020400
 8001ffc:	40020800 	.word	0x40020800
 8002000:	40020c00 	.word	0x40020c00
 8002004:	40021000 	.word	0x40021000
 8002008:	40021400 	.word	0x40021400
 800200c:	40021800 	.word	0x40021800
 8002010:	40021c00 	.word	0x40021c00
 8002014:	40022000 	.word	0x40022000
 8002018:	40022400 	.word	0x40022400
 800201c:	40013c00 	.word	0x40013c00

08002020 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002020:	b480      	push	{r7}
 8002022:	b083      	sub	sp, #12
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
 8002028:	460b      	mov	r3, r1
 800202a:	807b      	strh	r3, [r7, #2]
 800202c:	4613      	mov	r3, r2
 800202e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002030:	787b      	ldrb	r3, [r7, #1]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d003      	beq.n	800203e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002036:	887a      	ldrh	r2, [r7, #2]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800203c:	e003      	b.n	8002046 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800203e:	887b      	ldrh	r3, [r7, #2]
 8002040:	041a      	lsls	r2, r3, #16
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	619a      	str	r2, [r3, #24]
}
 8002046:	bf00      	nop
 8002048:	370c      	adds	r7, #12
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr
	...

08002054 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b086      	sub	sp, #24
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800205c:	2300      	movs	r3, #0
 800205e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d101      	bne.n	800206a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	e29b      	b.n	80025a2 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f003 0301 	and.w	r3, r3, #1
 8002072:	2b00      	cmp	r3, #0
 8002074:	f000 8087 	beq.w	8002186 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002078:	4b96      	ldr	r3, [pc, #600]	; (80022d4 <HAL_RCC_OscConfig+0x280>)
 800207a:	689b      	ldr	r3, [r3, #8]
 800207c:	f003 030c 	and.w	r3, r3, #12
 8002080:	2b04      	cmp	r3, #4
 8002082:	d00c      	beq.n	800209e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002084:	4b93      	ldr	r3, [pc, #588]	; (80022d4 <HAL_RCC_OscConfig+0x280>)
 8002086:	689b      	ldr	r3, [r3, #8]
 8002088:	f003 030c 	and.w	r3, r3, #12
 800208c:	2b08      	cmp	r3, #8
 800208e:	d112      	bne.n	80020b6 <HAL_RCC_OscConfig+0x62>
 8002090:	4b90      	ldr	r3, [pc, #576]	; (80022d4 <HAL_RCC_OscConfig+0x280>)
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002098:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800209c:	d10b      	bne.n	80020b6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800209e:	4b8d      	ldr	r3, [pc, #564]	; (80022d4 <HAL_RCC_OscConfig+0x280>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d06c      	beq.n	8002184 <HAL_RCC_OscConfig+0x130>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d168      	bne.n	8002184 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	e275      	b.n	80025a2 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020be:	d106      	bne.n	80020ce <HAL_RCC_OscConfig+0x7a>
 80020c0:	4b84      	ldr	r3, [pc, #528]	; (80022d4 <HAL_RCC_OscConfig+0x280>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a83      	ldr	r2, [pc, #524]	; (80022d4 <HAL_RCC_OscConfig+0x280>)
 80020c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020ca:	6013      	str	r3, [r2, #0]
 80020cc:	e02e      	b.n	800212c <HAL_RCC_OscConfig+0xd8>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d10c      	bne.n	80020f0 <HAL_RCC_OscConfig+0x9c>
 80020d6:	4b7f      	ldr	r3, [pc, #508]	; (80022d4 <HAL_RCC_OscConfig+0x280>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a7e      	ldr	r2, [pc, #504]	; (80022d4 <HAL_RCC_OscConfig+0x280>)
 80020dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020e0:	6013      	str	r3, [r2, #0]
 80020e2:	4b7c      	ldr	r3, [pc, #496]	; (80022d4 <HAL_RCC_OscConfig+0x280>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a7b      	ldr	r2, [pc, #492]	; (80022d4 <HAL_RCC_OscConfig+0x280>)
 80020e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020ec:	6013      	str	r3, [r2, #0]
 80020ee:	e01d      	b.n	800212c <HAL_RCC_OscConfig+0xd8>
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80020f8:	d10c      	bne.n	8002114 <HAL_RCC_OscConfig+0xc0>
 80020fa:	4b76      	ldr	r3, [pc, #472]	; (80022d4 <HAL_RCC_OscConfig+0x280>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4a75      	ldr	r2, [pc, #468]	; (80022d4 <HAL_RCC_OscConfig+0x280>)
 8002100:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002104:	6013      	str	r3, [r2, #0]
 8002106:	4b73      	ldr	r3, [pc, #460]	; (80022d4 <HAL_RCC_OscConfig+0x280>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4a72      	ldr	r2, [pc, #456]	; (80022d4 <HAL_RCC_OscConfig+0x280>)
 800210c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002110:	6013      	str	r3, [r2, #0]
 8002112:	e00b      	b.n	800212c <HAL_RCC_OscConfig+0xd8>
 8002114:	4b6f      	ldr	r3, [pc, #444]	; (80022d4 <HAL_RCC_OscConfig+0x280>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a6e      	ldr	r2, [pc, #440]	; (80022d4 <HAL_RCC_OscConfig+0x280>)
 800211a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800211e:	6013      	str	r3, [r2, #0]
 8002120:	4b6c      	ldr	r3, [pc, #432]	; (80022d4 <HAL_RCC_OscConfig+0x280>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a6b      	ldr	r2, [pc, #428]	; (80022d4 <HAL_RCC_OscConfig+0x280>)
 8002126:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800212a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d013      	beq.n	800215c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002134:	f7ff f880 	bl	8001238 <HAL_GetTick>
 8002138:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800213a:	e008      	b.n	800214e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800213c:	f7ff f87c 	bl	8001238 <HAL_GetTick>
 8002140:	4602      	mov	r2, r0
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	1ad3      	subs	r3, r2, r3
 8002146:	2b64      	cmp	r3, #100	; 0x64
 8002148:	d901      	bls.n	800214e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800214a:	2303      	movs	r3, #3
 800214c:	e229      	b.n	80025a2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800214e:	4b61      	ldr	r3, [pc, #388]	; (80022d4 <HAL_RCC_OscConfig+0x280>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002156:	2b00      	cmp	r3, #0
 8002158:	d0f0      	beq.n	800213c <HAL_RCC_OscConfig+0xe8>
 800215a:	e014      	b.n	8002186 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800215c:	f7ff f86c 	bl	8001238 <HAL_GetTick>
 8002160:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002162:	e008      	b.n	8002176 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002164:	f7ff f868 	bl	8001238 <HAL_GetTick>
 8002168:	4602      	mov	r2, r0
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	1ad3      	subs	r3, r2, r3
 800216e:	2b64      	cmp	r3, #100	; 0x64
 8002170:	d901      	bls.n	8002176 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002172:	2303      	movs	r3, #3
 8002174:	e215      	b.n	80025a2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002176:	4b57      	ldr	r3, [pc, #348]	; (80022d4 <HAL_RCC_OscConfig+0x280>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800217e:	2b00      	cmp	r3, #0
 8002180:	d1f0      	bne.n	8002164 <HAL_RCC_OscConfig+0x110>
 8002182:	e000      	b.n	8002186 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002184:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f003 0302 	and.w	r3, r3, #2
 800218e:	2b00      	cmp	r3, #0
 8002190:	d069      	beq.n	8002266 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002192:	4b50      	ldr	r3, [pc, #320]	; (80022d4 <HAL_RCC_OscConfig+0x280>)
 8002194:	689b      	ldr	r3, [r3, #8]
 8002196:	f003 030c 	and.w	r3, r3, #12
 800219a:	2b00      	cmp	r3, #0
 800219c:	d00b      	beq.n	80021b6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800219e:	4b4d      	ldr	r3, [pc, #308]	; (80022d4 <HAL_RCC_OscConfig+0x280>)
 80021a0:	689b      	ldr	r3, [r3, #8]
 80021a2:	f003 030c 	and.w	r3, r3, #12
 80021a6:	2b08      	cmp	r3, #8
 80021a8:	d11c      	bne.n	80021e4 <HAL_RCC_OscConfig+0x190>
 80021aa:	4b4a      	ldr	r3, [pc, #296]	; (80022d4 <HAL_RCC_OscConfig+0x280>)
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d116      	bne.n	80021e4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021b6:	4b47      	ldr	r3, [pc, #284]	; (80022d4 <HAL_RCC_OscConfig+0x280>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f003 0302 	and.w	r3, r3, #2
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d005      	beq.n	80021ce <HAL_RCC_OscConfig+0x17a>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	68db      	ldr	r3, [r3, #12]
 80021c6:	2b01      	cmp	r3, #1
 80021c8:	d001      	beq.n	80021ce <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	e1e9      	b.n	80025a2 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021ce:	4b41      	ldr	r3, [pc, #260]	; (80022d4 <HAL_RCC_OscConfig+0x280>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	691b      	ldr	r3, [r3, #16]
 80021da:	00db      	lsls	r3, r3, #3
 80021dc:	493d      	ldr	r1, [pc, #244]	; (80022d4 <HAL_RCC_OscConfig+0x280>)
 80021de:	4313      	orrs	r3, r2
 80021e0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021e2:	e040      	b.n	8002266 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	68db      	ldr	r3, [r3, #12]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d023      	beq.n	8002234 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021ec:	4b39      	ldr	r3, [pc, #228]	; (80022d4 <HAL_RCC_OscConfig+0x280>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a38      	ldr	r2, [pc, #224]	; (80022d4 <HAL_RCC_OscConfig+0x280>)
 80021f2:	f043 0301 	orr.w	r3, r3, #1
 80021f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021f8:	f7ff f81e 	bl	8001238 <HAL_GetTick>
 80021fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021fe:	e008      	b.n	8002212 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002200:	f7ff f81a 	bl	8001238 <HAL_GetTick>
 8002204:	4602      	mov	r2, r0
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	1ad3      	subs	r3, r2, r3
 800220a:	2b02      	cmp	r3, #2
 800220c:	d901      	bls.n	8002212 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800220e:	2303      	movs	r3, #3
 8002210:	e1c7      	b.n	80025a2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002212:	4b30      	ldr	r3, [pc, #192]	; (80022d4 <HAL_RCC_OscConfig+0x280>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f003 0302 	and.w	r3, r3, #2
 800221a:	2b00      	cmp	r3, #0
 800221c:	d0f0      	beq.n	8002200 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800221e:	4b2d      	ldr	r3, [pc, #180]	; (80022d4 <HAL_RCC_OscConfig+0x280>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	691b      	ldr	r3, [r3, #16]
 800222a:	00db      	lsls	r3, r3, #3
 800222c:	4929      	ldr	r1, [pc, #164]	; (80022d4 <HAL_RCC_OscConfig+0x280>)
 800222e:	4313      	orrs	r3, r2
 8002230:	600b      	str	r3, [r1, #0]
 8002232:	e018      	b.n	8002266 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002234:	4b27      	ldr	r3, [pc, #156]	; (80022d4 <HAL_RCC_OscConfig+0x280>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a26      	ldr	r2, [pc, #152]	; (80022d4 <HAL_RCC_OscConfig+0x280>)
 800223a:	f023 0301 	bic.w	r3, r3, #1
 800223e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002240:	f7fe fffa 	bl	8001238 <HAL_GetTick>
 8002244:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002246:	e008      	b.n	800225a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002248:	f7fe fff6 	bl	8001238 <HAL_GetTick>
 800224c:	4602      	mov	r2, r0
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	1ad3      	subs	r3, r2, r3
 8002252:	2b02      	cmp	r3, #2
 8002254:	d901      	bls.n	800225a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002256:	2303      	movs	r3, #3
 8002258:	e1a3      	b.n	80025a2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800225a:	4b1e      	ldr	r3, [pc, #120]	; (80022d4 <HAL_RCC_OscConfig+0x280>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f003 0302 	and.w	r3, r3, #2
 8002262:	2b00      	cmp	r3, #0
 8002264:	d1f0      	bne.n	8002248 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f003 0308 	and.w	r3, r3, #8
 800226e:	2b00      	cmp	r3, #0
 8002270:	d038      	beq.n	80022e4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	695b      	ldr	r3, [r3, #20]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d019      	beq.n	80022ae <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800227a:	4b16      	ldr	r3, [pc, #88]	; (80022d4 <HAL_RCC_OscConfig+0x280>)
 800227c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800227e:	4a15      	ldr	r2, [pc, #84]	; (80022d4 <HAL_RCC_OscConfig+0x280>)
 8002280:	f043 0301 	orr.w	r3, r3, #1
 8002284:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002286:	f7fe ffd7 	bl	8001238 <HAL_GetTick>
 800228a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800228c:	e008      	b.n	80022a0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800228e:	f7fe ffd3 	bl	8001238 <HAL_GetTick>
 8002292:	4602      	mov	r2, r0
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	1ad3      	subs	r3, r2, r3
 8002298:	2b02      	cmp	r3, #2
 800229a:	d901      	bls.n	80022a0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800229c:	2303      	movs	r3, #3
 800229e:	e180      	b.n	80025a2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022a0:	4b0c      	ldr	r3, [pc, #48]	; (80022d4 <HAL_RCC_OscConfig+0x280>)
 80022a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022a4:	f003 0302 	and.w	r3, r3, #2
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d0f0      	beq.n	800228e <HAL_RCC_OscConfig+0x23a>
 80022ac:	e01a      	b.n	80022e4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022ae:	4b09      	ldr	r3, [pc, #36]	; (80022d4 <HAL_RCC_OscConfig+0x280>)
 80022b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022b2:	4a08      	ldr	r2, [pc, #32]	; (80022d4 <HAL_RCC_OscConfig+0x280>)
 80022b4:	f023 0301 	bic.w	r3, r3, #1
 80022b8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022ba:	f7fe ffbd 	bl	8001238 <HAL_GetTick>
 80022be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022c0:	e00a      	b.n	80022d8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022c2:	f7fe ffb9 	bl	8001238 <HAL_GetTick>
 80022c6:	4602      	mov	r2, r0
 80022c8:	693b      	ldr	r3, [r7, #16]
 80022ca:	1ad3      	subs	r3, r2, r3
 80022cc:	2b02      	cmp	r3, #2
 80022ce:	d903      	bls.n	80022d8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80022d0:	2303      	movs	r3, #3
 80022d2:	e166      	b.n	80025a2 <HAL_RCC_OscConfig+0x54e>
 80022d4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022d8:	4b92      	ldr	r3, [pc, #584]	; (8002524 <HAL_RCC_OscConfig+0x4d0>)
 80022da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022dc:	f003 0302 	and.w	r3, r3, #2
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d1ee      	bne.n	80022c2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f003 0304 	and.w	r3, r3, #4
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	f000 80a4 	beq.w	800243a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022f2:	4b8c      	ldr	r3, [pc, #560]	; (8002524 <HAL_RCC_OscConfig+0x4d0>)
 80022f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d10d      	bne.n	800231a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80022fe:	4b89      	ldr	r3, [pc, #548]	; (8002524 <HAL_RCC_OscConfig+0x4d0>)
 8002300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002302:	4a88      	ldr	r2, [pc, #544]	; (8002524 <HAL_RCC_OscConfig+0x4d0>)
 8002304:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002308:	6413      	str	r3, [r2, #64]	; 0x40
 800230a:	4b86      	ldr	r3, [pc, #536]	; (8002524 <HAL_RCC_OscConfig+0x4d0>)
 800230c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800230e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002312:	60bb      	str	r3, [r7, #8]
 8002314:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002316:	2301      	movs	r3, #1
 8002318:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800231a:	4b83      	ldr	r3, [pc, #524]	; (8002528 <HAL_RCC_OscConfig+0x4d4>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002322:	2b00      	cmp	r3, #0
 8002324:	d118      	bne.n	8002358 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002326:	4b80      	ldr	r3, [pc, #512]	; (8002528 <HAL_RCC_OscConfig+0x4d4>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a7f      	ldr	r2, [pc, #508]	; (8002528 <HAL_RCC_OscConfig+0x4d4>)
 800232c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002330:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002332:	f7fe ff81 	bl	8001238 <HAL_GetTick>
 8002336:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002338:	e008      	b.n	800234c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800233a:	f7fe ff7d 	bl	8001238 <HAL_GetTick>
 800233e:	4602      	mov	r2, r0
 8002340:	693b      	ldr	r3, [r7, #16]
 8002342:	1ad3      	subs	r3, r2, r3
 8002344:	2b64      	cmp	r3, #100	; 0x64
 8002346:	d901      	bls.n	800234c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002348:	2303      	movs	r3, #3
 800234a:	e12a      	b.n	80025a2 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800234c:	4b76      	ldr	r3, [pc, #472]	; (8002528 <HAL_RCC_OscConfig+0x4d4>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002354:	2b00      	cmp	r3, #0
 8002356:	d0f0      	beq.n	800233a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	689b      	ldr	r3, [r3, #8]
 800235c:	2b01      	cmp	r3, #1
 800235e:	d106      	bne.n	800236e <HAL_RCC_OscConfig+0x31a>
 8002360:	4b70      	ldr	r3, [pc, #448]	; (8002524 <HAL_RCC_OscConfig+0x4d0>)
 8002362:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002364:	4a6f      	ldr	r2, [pc, #444]	; (8002524 <HAL_RCC_OscConfig+0x4d0>)
 8002366:	f043 0301 	orr.w	r3, r3, #1
 800236a:	6713      	str	r3, [r2, #112]	; 0x70
 800236c:	e02d      	b.n	80023ca <HAL_RCC_OscConfig+0x376>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	689b      	ldr	r3, [r3, #8]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d10c      	bne.n	8002390 <HAL_RCC_OscConfig+0x33c>
 8002376:	4b6b      	ldr	r3, [pc, #428]	; (8002524 <HAL_RCC_OscConfig+0x4d0>)
 8002378:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800237a:	4a6a      	ldr	r2, [pc, #424]	; (8002524 <HAL_RCC_OscConfig+0x4d0>)
 800237c:	f023 0301 	bic.w	r3, r3, #1
 8002380:	6713      	str	r3, [r2, #112]	; 0x70
 8002382:	4b68      	ldr	r3, [pc, #416]	; (8002524 <HAL_RCC_OscConfig+0x4d0>)
 8002384:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002386:	4a67      	ldr	r2, [pc, #412]	; (8002524 <HAL_RCC_OscConfig+0x4d0>)
 8002388:	f023 0304 	bic.w	r3, r3, #4
 800238c:	6713      	str	r3, [r2, #112]	; 0x70
 800238e:	e01c      	b.n	80023ca <HAL_RCC_OscConfig+0x376>
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	2b05      	cmp	r3, #5
 8002396:	d10c      	bne.n	80023b2 <HAL_RCC_OscConfig+0x35e>
 8002398:	4b62      	ldr	r3, [pc, #392]	; (8002524 <HAL_RCC_OscConfig+0x4d0>)
 800239a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800239c:	4a61      	ldr	r2, [pc, #388]	; (8002524 <HAL_RCC_OscConfig+0x4d0>)
 800239e:	f043 0304 	orr.w	r3, r3, #4
 80023a2:	6713      	str	r3, [r2, #112]	; 0x70
 80023a4:	4b5f      	ldr	r3, [pc, #380]	; (8002524 <HAL_RCC_OscConfig+0x4d0>)
 80023a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023a8:	4a5e      	ldr	r2, [pc, #376]	; (8002524 <HAL_RCC_OscConfig+0x4d0>)
 80023aa:	f043 0301 	orr.w	r3, r3, #1
 80023ae:	6713      	str	r3, [r2, #112]	; 0x70
 80023b0:	e00b      	b.n	80023ca <HAL_RCC_OscConfig+0x376>
 80023b2:	4b5c      	ldr	r3, [pc, #368]	; (8002524 <HAL_RCC_OscConfig+0x4d0>)
 80023b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023b6:	4a5b      	ldr	r2, [pc, #364]	; (8002524 <HAL_RCC_OscConfig+0x4d0>)
 80023b8:	f023 0301 	bic.w	r3, r3, #1
 80023bc:	6713      	str	r3, [r2, #112]	; 0x70
 80023be:	4b59      	ldr	r3, [pc, #356]	; (8002524 <HAL_RCC_OscConfig+0x4d0>)
 80023c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023c2:	4a58      	ldr	r2, [pc, #352]	; (8002524 <HAL_RCC_OscConfig+0x4d0>)
 80023c4:	f023 0304 	bic.w	r3, r3, #4
 80023c8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	689b      	ldr	r3, [r3, #8]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d015      	beq.n	80023fe <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023d2:	f7fe ff31 	bl	8001238 <HAL_GetTick>
 80023d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023d8:	e00a      	b.n	80023f0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023da:	f7fe ff2d 	bl	8001238 <HAL_GetTick>
 80023de:	4602      	mov	r2, r0
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	1ad3      	subs	r3, r2, r3
 80023e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d901      	bls.n	80023f0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80023ec:	2303      	movs	r3, #3
 80023ee:	e0d8      	b.n	80025a2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023f0:	4b4c      	ldr	r3, [pc, #304]	; (8002524 <HAL_RCC_OscConfig+0x4d0>)
 80023f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023f4:	f003 0302 	and.w	r3, r3, #2
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d0ee      	beq.n	80023da <HAL_RCC_OscConfig+0x386>
 80023fc:	e014      	b.n	8002428 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023fe:	f7fe ff1b 	bl	8001238 <HAL_GetTick>
 8002402:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002404:	e00a      	b.n	800241c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002406:	f7fe ff17 	bl	8001238 <HAL_GetTick>
 800240a:	4602      	mov	r2, r0
 800240c:	693b      	ldr	r3, [r7, #16]
 800240e:	1ad3      	subs	r3, r2, r3
 8002410:	f241 3288 	movw	r2, #5000	; 0x1388
 8002414:	4293      	cmp	r3, r2
 8002416:	d901      	bls.n	800241c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002418:	2303      	movs	r3, #3
 800241a:	e0c2      	b.n	80025a2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800241c:	4b41      	ldr	r3, [pc, #260]	; (8002524 <HAL_RCC_OscConfig+0x4d0>)
 800241e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002420:	f003 0302 	and.w	r3, r3, #2
 8002424:	2b00      	cmp	r3, #0
 8002426:	d1ee      	bne.n	8002406 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002428:	7dfb      	ldrb	r3, [r7, #23]
 800242a:	2b01      	cmp	r3, #1
 800242c:	d105      	bne.n	800243a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800242e:	4b3d      	ldr	r3, [pc, #244]	; (8002524 <HAL_RCC_OscConfig+0x4d0>)
 8002430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002432:	4a3c      	ldr	r2, [pc, #240]	; (8002524 <HAL_RCC_OscConfig+0x4d0>)
 8002434:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002438:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	699b      	ldr	r3, [r3, #24]
 800243e:	2b00      	cmp	r3, #0
 8002440:	f000 80ae 	beq.w	80025a0 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002444:	4b37      	ldr	r3, [pc, #220]	; (8002524 <HAL_RCC_OscConfig+0x4d0>)
 8002446:	689b      	ldr	r3, [r3, #8]
 8002448:	f003 030c 	and.w	r3, r3, #12
 800244c:	2b08      	cmp	r3, #8
 800244e:	d06d      	beq.n	800252c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	699b      	ldr	r3, [r3, #24]
 8002454:	2b02      	cmp	r3, #2
 8002456:	d14b      	bne.n	80024f0 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002458:	4b32      	ldr	r3, [pc, #200]	; (8002524 <HAL_RCC_OscConfig+0x4d0>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a31      	ldr	r2, [pc, #196]	; (8002524 <HAL_RCC_OscConfig+0x4d0>)
 800245e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002462:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002464:	f7fe fee8 	bl	8001238 <HAL_GetTick>
 8002468:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800246a:	e008      	b.n	800247e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800246c:	f7fe fee4 	bl	8001238 <HAL_GetTick>
 8002470:	4602      	mov	r2, r0
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	1ad3      	subs	r3, r2, r3
 8002476:	2b02      	cmp	r3, #2
 8002478:	d901      	bls.n	800247e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800247a:	2303      	movs	r3, #3
 800247c:	e091      	b.n	80025a2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800247e:	4b29      	ldr	r3, [pc, #164]	; (8002524 <HAL_RCC_OscConfig+0x4d0>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002486:	2b00      	cmp	r3, #0
 8002488:	d1f0      	bne.n	800246c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	69da      	ldr	r2, [r3, #28]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6a1b      	ldr	r3, [r3, #32]
 8002492:	431a      	orrs	r2, r3
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002498:	019b      	lsls	r3, r3, #6
 800249a:	431a      	orrs	r2, r3
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024a0:	085b      	lsrs	r3, r3, #1
 80024a2:	3b01      	subs	r3, #1
 80024a4:	041b      	lsls	r3, r3, #16
 80024a6:	431a      	orrs	r2, r3
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024ac:	061b      	lsls	r3, r3, #24
 80024ae:	431a      	orrs	r2, r3
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b4:	071b      	lsls	r3, r3, #28
 80024b6:	491b      	ldr	r1, [pc, #108]	; (8002524 <HAL_RCC_OscConfig+0x4d0>)
 80024b8:	4313      	orrs	r3, r2
 80024ba:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024bc:	4b19      	ldr	r3, [pc, #100]	; (8002524 <HAL_RCC_OscConfig+0x4d0>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a18      	ldr	r2, [pc, #96]	; (8002524 <HAL_RCC_OscConfig+0x4d0>)
 80024c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80024c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024c8:	f7fe feb6 	bl	8001238 <HAL_GetTick>
 80024cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024ce:	e008      	b.n	80024e2 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024d0:	f7fe feb2 	bl	8001238 <HAL_GetTick>
 80024d4:	4602      	mov	r2, r0
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	1ad3      	subs	r3, r2, r3
 80024da:	2b02      	cmp	r3, #2
 80024dc:	d901      	bls.n	80024e2 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80024de:	2303      	movs	r3, #3
 80024e0:	e05f      	b.n	80025a2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024e2:	4b10      	ldr	r3, [pc, #64]	; (8002524 <HAL_RCC_OscConfig+0x4d0>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d0f0      	beq.n	80024d0 <HAL_RCC_OscConfig+0x47c>
 80024ee:	e057      	b.n	80025a0 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024f0:	4b0c      	ldr	r3, [pc, #48]	; (8002524 <HAL_RCC_OscConfig+0x4d0>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a0b      	ldr	r2, [pc, #44]	; (8002524 <HAL_RCC_OscConfig+0x4d0>)
 80024f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80024fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024fc:	f7fe fe9c 	bl	8001238 <HAL_GetTick>
 8002500:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002502:	e008      	b.n	8002516 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002504:	f7fe fe98 	bl	8001238 <HAL_GetTick>
 8002508:	4602      	mov	r2, r0
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	1ad3      	subs	r3, r2, r3
 800250e:	2b02      	cmp	r3, #2
 8002510:	d901      	bls.n	8002516 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002512:	2303      	movs	r3, #3
 8002514:	e045      	b.n	80025a2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002516:	4b03      	ldr	r3, [pc, #12]	; (8002524 <HAL_RCC_OscConfig+0x4d0>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800251e:	2b00      	cmp	r3, #0
 8002520:	d1f0      	bne.n	8002504 <HAL_RCC_OscConfig+0x4b0>
 8002522:	e03d      	b.n	80025a0 <HAL_RCC_OscConfig+0x54c>
 8002524:	40023800 	.word	0x40023800
 8002528:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800252c:	4b1f      	ldr	r3, [pc, #124]	; (80025ac <HAL_RCC_OscConfig+0x558>)
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	699b      	ldr	r3, [r3, #24]
 8002536:	2b01      	cmp	r3, #1
 8002538:	d030      	beq.n	800259c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002544:	429a      	cmp	r2, r3
 8002546:	d129      	bne.n	800259c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002552:	429a      	cmp	r2, r3
 8002554:	d122      	bne.n	800259c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002556:	68fa      	ldr	r2, [r7, #12]
 8002558:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800255c:	4013      	ands	r3, r2
 800255e:	687a      	ldr	r2, [r7, #4]
 8002560:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002562:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002564:	4293      	cmp	r3, r2
 8002566:	d119      	bne.n	800259c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002572:	085b      	lsrs	r3, r3, #1
 8002574:	3b01      	subs	r3, #1
 8002576:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002578:	429a      	cmp	r2, r3
 800257a:	d10f      	bne.n	800259c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002586:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002588:	429a      	cmp	r2, r3
 800258a:	d107      	bne.n	800259c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002596:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002598:	429a      	cmp	r2, r3
 800259a:	d001      	beq.n	80025a0 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800259c:	2301      	movs	r3, #1
 800259e:	e000      	b.n	80025a2 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80025a0:	2300      	movs	r3, #0
}
 80025a2:	4618      	mov	r0, r3
 80025a4:	3718      	adds	r7, #24
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}
 80025aa:	bf00      	nop
 80025ac:	40023800 	.word	0x40023800

080025b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b084      	sub	sp, #16
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
 80025b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80025ba:	2300      	movs	r3, #0
 80025bc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d101      	bne.n	80025c8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80025c4:	2301      	movs	r3, #1
 80025c6:	e0d0      	b.n	800276a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80025c8:	4b6a      	ldr	r3, [pc, #424]	; (8002774 <HAL_RCC_ClockConfig+0x1c4>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f003 030f 	and.w	r3, r3, #15
 80025d0:	683a      	ldr	r2, [r7, #0]
 80025d2:	429a      	cmp	r2, r3
 80025d4:	d910      	bls.n	80025f8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025d6:	4b67      	ldr	r3, [pc, #412]	; (8002774 <HAL_RCC_ClockConfig+0x1c4>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f023 020f 	bic.w	r2, r3, #15
 80025de:	4965      	ldr	r1, [pc, #404]	; (8002774 <HAL_RCC_ClockConfig+0x1c4>)
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	4313      	orrs	r3, r2
 80025e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025e6:	4b63      	ldr	r3, [pc, #396]	; (8002774 <HAL_RCC_ClockConfig+0x1c4>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f003 030f 	and.w	r3, r3, #15
 80025ee:	683a      	ldr	r2, [r7, #0]
 80025f0:	429a      	cmp	r2, r3
 80025f2:	d001      	beq.n	80025f8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80025f4:	2301      	movs	r3, #1
 80025f6:	e0b8      	b.n	800276a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f003 0302 	and.w	r3, r3, #2
 8002600:	2b00      	cmp	r3, #0
 8002602:	d020      	beq.n	8002646 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f003 0304 	and.w	r3, r3, #4
 800260c:	2b00      	cmp	r3, #0
 800260e:	d005      	beq.n	800261c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002610:	4b59      	ldr	r3, [pc, #356]	; (8002778 <HAL_RCC_ClockConfig+0x1c8>)
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	4a58      	ldr	r2, [pc, #352]	; (8002778 <HAL_RCC_ClockConfig+0x1c8>)
 8002616:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800261a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f003 0308 	and.w	r3, r3, #8
 8002624:	2b00      	cmp	r3, #0
 8002626:	d005      	beq.n	8002634 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002628:	4b53      	ldr	r3, [pc, #332]	; (8002778 <HAL_RCC_ClockConfig+0x1c8>)
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	4a52      	ldr	r2, [pc, #328]	; (8002778 <HAL_RCC_ClockConfig+0x1c8>)
 800262e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002632:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002634:	4b50      	ldr	r3, [pc, #320]	; (8002778 <HAL_RCC_ClockConfig+0x1c8>)
 8002636:	689b      	ldr	r3, [r3, #8]
 8002638:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	689b      	ldr	r3, [r3, #8]
 8002640:	494d      	ldr	r1, [pc, #308]	; (8002778 <HAL_RCC_ClockConfig+0x1c8>)
 8002642:	4313      	orrs	r3, r2
 8002644:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f003 0301 	and.w	r3, r3, #1
 800264e:	2b00      	cmp	r3, #0
 8002650:	d040      	beq.n	80026d4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	2b01      	cmp	r3, #1
 8002658:	d107      	bne.n	800266a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800265a:	4b47      	ldr	r3, [pc, #284]	; (8002778 <HAL_RCC_ClockConfig+0x1c8>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002662:	2b00      	cmp	r3, #0
 8002664:	d115      	bne.n	8002692 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	e07f      	b.n	800276a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	2b02      	cmp	r3, #2
 8002670:	d107      	bne.n	8002682 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002672:	4b41      	ldr	r3, [pc, #260]	; (8002778 <HAL_RCC_ClockConfig+0x1c8>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800267a:	2b00      	cmp	r3, #0
 800267c:	d109      	bne.n	8002692 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	e073      	b.n	800276a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002682:	4b3d      	ldr	r3, [pc, #244]	; (8002778 <HAL_RCC_ClockConfig+0x1c8>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f003 0302 	and.w	r3, r3, #2
 800268a:	2b00      	cmp	r3, #0
 800268c:	d101      	bne.n	8002692 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	e06b      	b.n	800276a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002692:	4b39      	ldr	r3, [pc, #228]	; (8002778 <HAL_RCC_ClockConfig+0x1c8>)
 8002694:	689b      	ldr	r3, [r3, #8]
 8002696:	f023 0203 	bic.w	r2, r3, #3
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	4936      	ldr	r1, [pc, #216]	; (8002778 <HAL_RCC_ClockConfig+0x1c8>)
 80026a0:	4313      	orrs	r3, r2
 80026a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026a4:	f7fe fdc8 	bl	8001238 <HAL_GetTick>
 80026a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026aa:	e00a      	b.n	80026c2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026ac:	f7fe fdc4 	bl	8001238 <HAL_GetTick>
 80026b0:	4602      	mov	r2, r0
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	1ad3      	subs	r3, r2, r3
 80026b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d901      	bls.n	80026c2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80026be:	2303      	movs	r3, #3
 80026c0:	e053      	b.n	800276a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026c2:	4b2d      	ldr	r3, [pc, #180]	; (8002778 <HAL_RCC_ClockConfig+0x1c8>)
 80026c4:	689b      	ldr	r3, [r3, #8]
 80026c6:	f003 020c 	and.w	r2, r3, #12
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	009b      	lsls	r3, r3, #2
 80026d0:	429a      	cmp	r2, r3
 80026d2:	d1eb      	bne.n	80026ac <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80026d4:	4b27      	ldr	r3, [pc, #156]	; (8002774 <HAL_RCC_ClockConfig+0x1c4>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f003 030f 	and.w	r3, r3, #15
 80026dc:	683a      	ldr	r2, [r7, #0]
 80026de:	429a      	cmp	r2, r3
 80026e0:	d210      	bcs.n	8002704 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026e2:	4b24      	ldr	r3, [pc, #144]	; (8002774 <HAL_RCC_ClockConfig+0x1c4>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f023 020f 	bic.w	r2, r3, #15
 80026ea:	4922      	ldr	r1, [pc, #136]	; (8002774 <HAL_RCC_ClockConfig+0x1c4>)
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	4313      	orrs	r3, r2
 80026f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026f2:	4b20      	ldr	r3, [pc, #128]	; (8002774 <HAL_RCC_ClockConfig+0x1c4>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f003 030f 	and.w	r3, r3, #15
 80026fa:	683a      	ldr	r2, [r7, #0]
 80026fc:	429a      	cmp	r2, r3
 80026fe:	d001      	beq.n	8002704 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002700:	2301      	movs	r3, #1
 8002702:	e032      	b.n	800276a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f003 0304 	and.w	r3, r3, #4
 800270c:	2b00      	cmp	r3, #0
 800270e:	d008      	beq.n	8002722 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002710:	4b19      	ldr	r3, [pc, #100]	; (8002778 <HAL_RCC_ClockConfig+0x1c8>)
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	68db      	ldr	r3, [r3, #12]
 800271c:	4916      	ldr	r1, [pc, #88]	; (8002778 <HAL_RCC_ClockConfig+0x1c8>)
 800271e:	4313      	orrs	r3, r2
 8002720:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f003 0308 	and.w	r3, r3, #8
 800272a:	2b00      	cmp	r3, #0
 800272c:	d009      	beq.n	8002742 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800272e:	4b12      	ldr	r3, [pc, #72]	; (8002778 <HAL_RCC_ClockConfig+0x1c8>)
 8002730:	689b      	ldr	r3, [r3, #8]
 8002732:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	691b      	ldr	r3, [r3, #16]
 800273a:	00db      	lsls	r3, r3, #3
 800273c:	490e      	ldr	r1, [pc, #56]	; (8002778 <HAL_RCC_ClockConfig+0x1c8>)
 800273e:	4313      	orrs	r3, r2
 8002740:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002742:	f000 f821 	bl	8002788 <HAL_RCC_GetSysClockFreq>
 8002746:	4602      	mov	r2, r0
 8002748:	4b0b      	ldr	r3, [pc, #44]	; (8002778 <HAL_RCC_ClockConfig+0x1c8>)
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	091b      	lsrs	r3, r3, #4
 800274e:	f003 030f 	and.w	r3, r3, #15
 8002752:	490a      	ldr	r1, [pc, #40]	; (800277c <HAL_RCC_ClockConfig+0x1cc>)
 8002754:	5ccb      	ldrb	r3, [r1, r3]
 8002756:	fa22 f303 	lsr.w	r3, r2, r3
 800275a:	4a09      	ldr	r2, [pc, #36]	; (8002780 <HAL_RCC_ClockConfig+0x1d0>)
 800275c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800275e:	4b09      	ldr	r3, [pc, #36]	; (8002784 <HAL_RCC_ClockConfig+0x1d4>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4618      	mov	r0, r3
 8002764:	f7fe fd24 	bl	80011b0 <HAL_InitTick>

  return HAL_OK;
 8002768:	2300      	movs	r3, #0
}
 800276a:	4618      	mov	r0, r3
 800276c:	3710      	adds	r7, #16
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}
 8002772:	bf00      	nop
 8002774:	40023c00 	.word	0x40023c00
 8002778:	40023800 	.word	0x40023800
 800277c:	08007994 	.word	0x08007994
 8002780:	20000000 	.word	0x20000000
 8002784:	20000004 	.word	0x20000004

08002788 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002788:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800278c:	b094      	sub	sp, #80	; 0x50
 800278e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002790:	2300      	movs	r3, #0
 8002792:	647b      	str	r3, [r7, #68]	; 0x44
 8002794:	2300      	movs	r3, #0
 8002796:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002798:	2300      	movs	r3, #0
 800279a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 800279c:	2300      	movs	r3, #0
 800279e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80027a0:	4b79      	ldr	r3, [pc, #484]	; (8002988 <HAL_RCC_GetSysClockFreq+0x200>)
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	f003 030c 	and.w	r3, r3, #12
 80027a8:	2b08      	cmp	r3, #8
 80027aa:	d00d      	beq.n	80027c8 <HAL_RCC_GetSysClockFreq+0x40>
 80027ac:	2b08      	cmp	r3, #8
 80027ae:	f200 80e1 	bhi.w	8002974 <HAL_RCC_GetSysClockFreq+0x1ec>
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d002      	beq.n	80027bc <HAL_RCC_GetSysClockFreq+0x34>
 80027b6:	2b04      	cmp	r3, #4
 80027b8:	d003      	beq.n	80027c2 <HAL_RCC_GetSysClockFreq+0x3a>
 80027ba:	e0db      	b.n	8002974 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80027bc:	4b73      	ldr	r3, [pc, #460]	; (800298c <HAL_RCC_GetSysClockFreq+0x204>)
 80027be:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80027c0:	e0db      	b.n	800297a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80027c2:	4b72      	ldr	r3, [pc, #456]	; (800298c <HAL_RCC_GetSysClockFreq+0x204>)
 80027c4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80027c6:	e0d8      	b.n	800297a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80027c8:	4b6f      	ldr	r3, [pc, #444]	; (8002988 <HAL_RCC_GetSysClockFreq+0x200>)
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80027d0:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80027d2:	4b6d      	ldr	r3, [pc, #436]	; (8002988 <HAL_RCC_GetSysClockFreq+0x200>)
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d063      	beq.n	80028a6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027de:	4b6a      	ldr	r3, [pc, #424]	; (8002988 <HAL_RCC_GetSysClockFreq+0x200>)
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	099b      	lsrs	r3, r3, #6
 80027e4:	2200      	movs	r2, #0
 80027e6:	63bb      	str	r3, [r7, #56]	; 0x38
 80027e8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80027ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027f0:	633b      	str	r3, [r7, #48]	; 0x30
 80027f2:	2300      	movs	r3, #0
 80027f4:	637b      	str	r3, [r7, #52]	; 0x34
 80027f6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80027fa:	4622      	mov	r2, r4
 80027fc:	462b      	mov	r3, r5
 80027fe:	f04f 0000 	mov.w	r0, #0
 8002802:	f04f 0100 	mov.w	r1, #0
 8002806:	0159      	lsls	r1, r3, #5
 8002808:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800280c:	0150      	lsls	r0, r2, #5
 800280e:	4602      	mov	r2, r0
 8002810:	460b      	mov	r3, r1
 8002812:	4621      	mov	r1, r4
 8002814:	1a51      	subs	r1, r2, r1
 8002816:	6139      	str	r1, [r7, #16]
 8002818:	4629      	mov	r1, r5
 800281a:	eb63 0301 	sbc.w	r3, r3, r1
 800281e:	617b      	str	r3, [r7, #20]
 8002820:	f04f 0200 	mov.w	r2, #0
 8002824:	f04f 0300 	mov.w	r3, #0
 8002828:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800282c:	4659      	mov	r1, fp
 800282e:	018b      	lsls	r3, r1, #6
 8002830:	4651      	mov	r1, sl
 8002832:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002836:	4651      	mov	r1, sl
 8002838:	018a      	lsls	r2, r1, #6
 800283a:	4651      	mov	r1, sl
 800283c:	ebb2 0801 	subs.w	r8, r2, r1
 8002840:	4659      	mov	r1, fp
 8002842:	eb63 0901 	sbc.w	r9, r3, r1
 8002846:	f04f 0200 	mov.w	r2, #0
 800284a:	f04f 0300 	mov.w	r3, #0
 800284e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002852:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002856:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800285a:	4690      	mov	r8, r2
 800285c:	4699      	mov	r9, r3
 800285e:	4623      	mov	r3, r4
 8002860:	eb18 0303 	adds.w	r3, r8, r3
 8002864:	60bb      	str	r3, [r7, #8]
 8002866:	462b      	mov	r3, r5
 8002868:	eb49 0303 	adc.w	r3, r9, r3
 800286c:	60fb      	str	r3, [r7, #12]
 800286e:	f04f 0200 	mov.w	r2, #0
 8002872:	f04f 0300 	mov.w	r3, #0
 8002876:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800287a:	4629      	mov	r1, r5
 800287c:	028b      	lsls	r3, r1, #10
 800287e:	4621      	mov	r1, r4
 8002880:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002884:	4621      	mov	r1, r4
 8002886:	028a      	lsls	r2, r1, #10
 8002888:	4610      	mov	r0, r2
 800288a:	4619      	mov	r1, r3
 800288c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800288e:	2200      	movs	r2, #0
 8002890:	62bb      	str	r3, [r7, #40]	; 0x28
 8002892:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002894:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002898:	f7fd fd2a 	bl	80002f0 <__aeabi_uldivmod>
 800289c:	4602      	mov	r2, r0
 800289e:	460b      	mov	r3, r1
 80028a0:	4613      	mov	r3, r2
 80028a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80028a4:	e058      	b.n	8002958 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028a6:	4b38      	ldr	r3, [pc, #224]	; (8002988 <HAL_RCC_GetSysClockFreq+0x200>)
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	099b      	lsrs	r3, r3, #6
 80028ac:	2200      	movs	r2, #0
 80028ae:	4618      	mov	r0, r3
 80028b0:	4611      	mov	r1, r2
 80028b2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80028b6:	623b      	str	r3, [r7, #32]
 80028b8:	2300      	movs	r3, #0
 80028ba:	627b      	str	r3, [r7, #36]	; 0x24
 80028bc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80028c0:	4642      	mov	r2, r8
 80028c2:	464b      	mov	r3, r9
 80028c4:	f04f 0000 	mov.w	r0, #0
 80028c8:	f04f 0100 	mov.w	r1, #0
 80028cc:	0159      	lsls	r1, r3, #5
 80028ce:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80028d2:	0150      	lsls	r0, r2, #5
 80028d4:	4602      	mov	r2, r0
 80028d6:	460b      	mov	r3, r1
 80028d8:	4641      	mov	r1, r8
 80028da:	ebb2 0a01 	subs.w	sl, r2, r1
 80028de:	4649      	mov	r1, r9
 80028e0:	eb63 0b01 	sbc.w	fp, r3, r1
 80028e4:	f04f 0200 	mov.w	r2, #0
 80028e8:	f04f 0300 	mov.w	r3, #0
 80028ec:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80028f0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80028f4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80028f8:	ebb2 040a 	subs.w	r4, r2, sl
 80028fc:	eb63 050b 	sbc.w	r5, r3, fp
 8002900:	f04f 0200 	mov.w	r2, #0
 8002904:	f04f 0300 	mov.w	r3, #0
 8002908:	00eb      	lsls	r3, r5, #3
 800290a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800290e:	00e2      	lsls	r2, r4, #3
 8002910:	4614      	mov	r4, r2
 8002912:	461d      	mov	r5, r3
 8002914:	4643      	mov	r3, r8
 8002916:	18e3      	adds	r3, r4, r3
 8002918:	603b      	str	r3, [r7, #0]
 800291a:	464b      	mov	r3, r9
 800291c:	eb45 0303 	adc.w	r3, r5, r3
 8002920:	607b      	str	r3, [r7, #4]
 8002922:	f04f 0200 	mov.w	r2, #0
 8002926:	f04f 0300 	mov.w	r3, #0
 800292a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800292e:	4629      	mov	r1, r5
 8002930:	028b      	lsls	r3, r1, #10
 8002932:	4621      	mov	r1, r4
 8002934:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002938:	4621      	mov	r1, r4
 800293a:	028a      	lsls	r2, r1, #10
 800293c:	4610      	mov	r0, r2
 800293e:	4619      	mov	r1, r3
 8002940:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002942:	2200      	movs	r2, #0
 8002944:	61bb      	str	r3, [r7, #24]
 8002946:	61fa      	str	r2, [r7, #28]
 8002948:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800294c:	f7fd fcd0 	bl	80002f0 <__aeabi_uldivmod>
 8002950:	4602      	mov	r2, r0
 8002952:	460b      	mov	r3, r1
 8002954:	4613      	mov	r3, r2
 8002956:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002958:	4b0b      	ldr	r3, [pc, #44]	; (8002988 <HAL_RCC_GetSysClockFreq+0x200>)
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	0c1b      	lsrs	r3, r3, #16
 800295e:	f003 0303 	and.w	r3, r3, #3
 8002962:	3301      	adds	r3, #1
 8002964:	005b      	lsls	r3, r3, #1
 8002966:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8002968:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800296a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800296c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002970:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002972:	e002      	b.n	800297a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002974:	4b05      	ldr	r3, [pc, #20]	; (800298c <HAL_RCC_GetSysClockFreq+0x204>)
 8002976:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002978:	bf00      	nop
    }
  }
  return sysclockfreq;
 800297a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800297c:	4618      	mov	r0, r3
 800297e:	3750      	adds	r7, #80	; 0x50
 8002980:	46bd      	mov	sp, r7
 8002982:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002986:	bf00      	nop
 8002988:	40023800 	.word	0x40023800
 800298c:	00f42400 	.word	0x00f42400

08002990 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002990:	b480      	push	{r7}
 8002992:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002994:	4b03      	ldr	r3, [pc, #12]	; (80029a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002996:	681b      	ldr	r3, [r3, #0]
}
 8002998:	4618      	mov	r0, r3
 800299a:	46bd      	mov	sp, r7
 800299c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a0:	4770      	bx	lr
 80029a2:	bf00      	nop
 80029a4:	20000000 	.word	0x20000000

080029a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80029ac:	f7ff fff0 	bl	8002990 <HAL_RCC_GetHCLKFreq>
 80029b0:	4602      	mov	r2, r0
 80029b2:	4b05      	ldr	r3, [pc, #20]	; (80029c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80029b4:	689b      	ldr	r3, [r3, #8]
 80029b6:	0a9b      	lsrs	r3, r3, #10
 80029b8:	f003 0307 	and.w	r3, r3, #7
 80029bc:	4903      	ldr	r1, [pc, #12]	; (80029cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80029be:	5ccb      	ldrb	r3, [r1, r3]
 80029c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	bd80      	pop	{r7, pc}
 80029c8:	40023800 	.word	0x40023800
 80029cc:	080079a4 	.word	0x080079a4

080029d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80029d4:	f7ff ffdc 	bl	8002990 <HAL_RCC_GetHCLKFreq>
 80029d8:	4602      	mov	r2, r0
 80029da:	4b05      	ldr	r3, [pc, #20]	; (80029f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80029dc:	689b      	ldr	r3, [r3, #8]
 80029de:	0b5b      	lsrs	r3, r3, #13
 80029e0:	f003 0307 	and.w	r3, r3, #7
 80029e4:	4903      	ldr	r1, [pc, #12]	; (80029f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80029e6:	5ccb      	ldrb	r3, [r1, r3]
 80029e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	bd80      	pop	{r7, pc}
 80029f0:	40023800 	.word	0x40023800
 80029f4:	080079a4 	.word	0x080079a4

080029f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b088      	sub	sp, #32
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002a00:	2300      	movs	r3, #0
 8002a02:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002a04:	2300      	movs	r3, #0
 8002a06:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002a10:	2300      	movs	r3, #0
 8002a12:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f003 0301 	and.w	r3, r3, #1
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d012      	beq.n	8002a46 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002a20:	4b69      	ldr	r3, [pc, #420]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a22:	689b      	ldr	r3, [r3, #8]
 8002a24:	4a68      	ldr	r2, [pc, #416]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a26:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002a2a:	6093      	str	r3, [r2, #8]
 8002a2c:	4b66      	ldr	r3, [pc, #408]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a2e:	689a      	ldr	r2, [r3, #8]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a34:	4964      	ldr	r1, [pc, #400]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a36:	4313      	orrs	r3, r2
 8002a38:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d101      	bne.n	8002a46 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002a42:	2301      	movs	r3, #1
 8002a44:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d017      	beq.n	8002a82 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002a52:	4b5d      	ldr	r3, [pc, #372]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a58:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a60:	4959      	ldr	r1, [pc, #356]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a62:	4313      	orrs	r3, r2
 8002a64:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a6c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a70:	d101      	bne.n	8002a76 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002a72:	2301      	movs	r3, #1
 8002a74:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d101      	bne.n	8002a82 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d017      	beq.n	8002abe <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002a8e:	4b4e      	ldr	r3, [pc, #312]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a94:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a9c:	494a      	ldr	r1, [pc, #296]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002aac:	d101      	bne.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d101      	bne.n	8002abe <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002aba:	2301      	movs	r3, #1
 8002abc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d001      	beq.n	8002ace <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002aca:	2301      	movs	r3, #1
 8002acc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f003 0320 	and.w	r3, r3, #32
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	f000 808b 	beq.w	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002adc:	4b3a      	ldr	r3, [pc, #232]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae0:	4a39      	ldr	r2, [pc, #228]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ae2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ae6:	6413      	str	r3, [r2, #64]	; 0x40
 8002ae8:	4b37      	ldr	r3, [pc, #220]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002af0:	60bb      	str	r3, [r7, #8]
 8002af2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002af4:	4b35      	ldr	r3, [pc, #212]	; (8002bcc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a34      	ldr	r2, [pc, #208]	; (8002bcc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002afa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002afe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b00:	f7fe fb9a 	bl	8001238 <HAL_GetTick>
 8002b04:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002b06:	e008      	b.n	8002b1a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b08:	f7fe fb96 	bl	8001238 <HAL_GetTick>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	1ad3      	subs	r3, r2, r3
 8002b12:	2b64      	cmp	r3, #100	; 0x64
 8002b14:	d901      	bls.n	8002b1a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002b16:	2303      	movs	r3, #3
 8002b18:	e38f      	b.n	800323a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002b1a:	4b2c      	ldr	r3, [pc, #176]	; (8002bcc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d0f0      	beq.n	8002b08 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002b26:	4b28      	ldr	r3, [pc, #160]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b2e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002b30:	693b      	ldr	r3, [r7, #16]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d035      	beq.n	8002ba2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b3e:	693a      	ldr	r2, [r7, #16]
 8002b40:	429a      	cmp	r2, r3
 8002b42:	d02e      	beq.n	8002ba2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002b44:	4b20      	ldr	r3, [pc, #128]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b4c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002b4e:	4b1e      	ldr	r3, [pc, #120]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b52:	4a1d      	ldr	r2, [pc, #116]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b58:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002b5a:	4b1b      	ldr	r3, [pc, #108]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b5e:	4a1a      	ldr	r2, [pc, #104]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b64:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002b66:	4a18      	ldr	r2, [pc, #96]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b68:	693b      	ldr	r3, [r7, #16]
 8002b6a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002b6c:	4b16      	ldr	r3, [pc, #88]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b70:	f003 0301 	and.w	r3, r3, #1
 8002b74:	2b01      	cmp	r3, #1
 8002b76:	d114      	bne.n	8002ba2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b78:	f7fe fb5e 	bl	8001238 <HAL_GetTick>
 8002b7c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b7e:	e00a      	b.n	8002b96 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b80:	f7fe fb5a 	bl	8001238 <HAL_GetTick>
 8002b84:	4602      	mov	r2, r0
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	1ad3      	subs	r3, r2, r3
 8002b8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d901      	bls.n	8002b96 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002b92:	2303      	movs	r3, #3
 8002b94:	e351      	b.n	800323a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b96:	4b0c      	ldr	r3, [pc, #48]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b9a:	f003 0302 	and.w	r3, r3, #2
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d0ee      	beq.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ba6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002baa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002bae:	d111      	bne.n	8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002bb0:	4b05      	ldr	r3, [pc, #20]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bb2:	689b      	ldr	r3, [r3, #8]
 8002bb4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002bbc:	4b04      	ldr	r3, [pc, #16]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002bbe:	400b      	ands	r3, r1
 8002bc0:	4901      	ldr	r1, [pc, #4]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	608b      	str	r3, [r1, #8]
 8002bc6:	e00b      	b.n	8002be0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002bc8:	40023800 	.word	0x40023800
 8002bcc:	40007000 	.word	0x40007000
 8002bd0:	0ffffcff 	.word	0x0ffffcff
 8002bd4:	4bac      	ldr	r3, [pc, #688]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	4aab      	ldr	r2, [pc, #684]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bda:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002bde:	6093      	str	r3, [r2, #8]
 8002be0:	4ba9      	ldr	r3, [pc, #676]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002be2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bec:	49a6      	ldr	r1, [pc, #664]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f003 0310 	and.w	r3, r3, #16
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d010      	beq.n	8002c20 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002bfe:	4ba2      	ldr	r3, [pc, #648]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c04:	4aa0      	ldr	r2, [pc, #640]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c06:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c0a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002c0e:	4b9e      	ldr	r3, [pc, #632]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c10:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c18:	499b      	ldr	r1, [pc, #620]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d00a      	beq.n	8002c42 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002c2c:	4b96      	ldr	r3, [pc, #600]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c32:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002c3a:	4993      	ldr	r1, [pc, #588]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d00a      	beq.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002c4e:	4b8e      	ldr	r3, [pc, #568]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c54:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002c5c:	498a      	ldr	r1, [pc, #552]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d00a      	beq.n	8002c86 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002c70:	4b85      	ldr	r3, [pc, #532]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c76:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c7e:	4982      	ldr	r1, [pc, #520]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c80:	4313      	orrs	r3, r2
 8002c82:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d00a      	beq.n	8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002c92:	4b7d      	ldr	r3, [pc, #500]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c98:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ca0:	4979      	ldr	r1, [pc, #484]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d00a      	beq.n	8002cca <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002cb4:	4b74      	ldr	r3, [pc, #464]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cba:	f023 0203 	bic.w	r2, r3, #3
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cc2:	4971      	ldr	r1, [pc, #452]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d00a      	beq.n	8002cec <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002cd6:	4b6c      	ldr	r3, [pc, #432]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cdc:	f023 020c 	bic.w	r2, r3, #12
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ce4:	4968      	ldr	r1, [pc, #416]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d00a      	beq.n	8002d0e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002cf8:	4b63      	ldr	r3, [pc, #396]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cfe:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d06:	4960      	ldr	r1, [pc, #384]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d00a      	beq.n	8002d30 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002d1a:	4b5b      	ldr	r3, [pc, #364]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d20:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d28:	4957      	ldr	r1, [pc, #348]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d00a      	beq.n	8002d52 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002d3c:	4b52      	ldr	r3, [pc, #328]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d42:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d4a:	494f      	ldr	r1, [pc, #316]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d00a      	beq.n	8002d74 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002d5e:	4b4a      	ldr	r3, [pc, #296]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d64:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d6c:	4946      	ldr	r1, [pc, #280]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d00a      	beq.n	8002d96 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002d80:	4b41      	ldr	r3, [pc, #260]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d86:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d8e:	493e      	ldr	r1, [pc, #248]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d90:	4313      	orrs	r3, r2
 8002d92:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d00a      	beq.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002da2:	4b39      	ldr	r3, [pc, #228]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002da4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002da8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002db0:	4935      	ldr	r1, [pc, #212]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002db2:	4313      	orrs	r3, r2
 8002db4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d00a      	beq.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002dc4:	4b30      	ldr	r3, [pc, #192]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dca:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002dd2:	492d      	ldr	r1, [pc, #180]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d011      	beq.n	8002e0a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002de6:	4b28      	ldr	r3, [pc, #160]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002de8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dec:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002df4:	4924      	ldr	r1, [pc, #144]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002df6:	4313      	orrs	r3, r2
 8002df8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e00:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e04:	d101      	bne.n	8002e0a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002e06:	2301      	movs	r3, #1
 8002e08:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f003 0308 	and.w	r3, r3, #8
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d001      	beq.n	8002e1a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002e16:	2301      	movs	r3, #1
 8002e18:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d00a      	beq.n	8002e3c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002e26:	4b18      	ldr	r3, [pc, #96]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e2c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e34:	4914      	ldr	r1, [pc, #80]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e36:	4313      	orrs	r3, r2
 8002e38:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d00b      	beq.n	8002e60 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002e48:	4b0f      	ldr	r3, [pc, #60]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e4e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e58:	490b      	ldr	r1, [pc, #44]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d00f      	beq.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002e6c:	4b06      	ldr	r3, [pc, #24]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e72:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e7c:	4902      	ldr	r1, [pc, #8]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002e84:	e002      	b.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0x494>
 8002e86:	bf00      	nop
 8002e88:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d00b      	beq.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002e98:	4b8a      	ldr	r3, [pc, #552]	; (80030c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e9e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ea8:	4986      	ldr	r1, [pc, #536]	; (80030c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d00b      	beq.n	8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002ebc:	4b81      	ldr	r3, [pc, #516]	; (80030c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ebe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ec2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ecc:	497d      	ldr	r1, [pc, #500]	; (80030c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002ed4:	69fb      	ldr	r3, [r7, #28]
 8002ed6:	2b01      	cmp	r3, #1
 8002ed8:	d006      	beq.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	f000 80d6 	beq.w	8003094 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002ee8:	4b76      	ldr	r3, [pc, #472]	; (80030c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a75      	ldr	r2, [pc, #468]	; (80030c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002eee:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002ef2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ef4:	f7fe f9a0 	bl	8001238 <HAL_GetTick>
 8002ef8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002efa:	e008      	b.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002efc:	f7fe f99c 	bl	8001238 <HAL_GetTick>
 8002f00:	4602      	mov	r2, r0
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	1ad3      	subs	r3, r2, r3
 8002f06:	2b64      	cmp	r3, #100	; 0x64
 8002f08:	d901      	bls.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002f0a:	2303      	movs	r3, #3
 8002f0c:	e195      	b.n	800323a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002f0e:	4b6d      	ldr	r3, [pc, #436]	; (80030c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d1f0      	bne.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f003 0301 	and.w	r3, r3, #1
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d021      	beq.n	8002f6a <HAL_RCCEx_PeriphCLKConfig+0x572>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d11d      	bne.n	8002f6a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002f2e:	4b65      	ldr	r3, [pc, #404]	; (80030c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f34:	0c1b      	lsrs	r3, r3, #16
 8002f36:	f003 0303 	and.w	r3, r3, #3
 8002f3a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002f3c:	4b61      	ldr	r3, [pc, #388]	; (80030c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f42:	0e1b      	lsrs	r3, r3, #24
 8002f44:	f003 030f 	and.w	r3, r3, #15
 8002f48:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	019a      	lsls	r2, r3, #6
 8002f50:	693b      	ldr	r3, [r7, #16]
 8002f52:	041b      	lsls	r3, r3, #16
 8002f54:	431a      	orrs	r2, r3
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	061b      	lsls	r3, r3, #24
 8002f5a:	431a      	orrs	r2, r3
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	689b      	ldr	r3, [r3, #8]
 8002f60:	071b      	lsls	r3, r3, #28
 8002f62:	4958      	ldr	r1, [pc, #352]	; (80030c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f64:	4313      	orrs	r3, r2
 8002f66:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d004      	beq.n	8002f80 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f7a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002f7e:	d00a      	beq.n	8002f96 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d02e      	beq.n	8002fea <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f90:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f94:	d129      	bne.n	8002fea <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002f96:	4b4b      	ldr	r3, [pc, #300]	; (80030c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f98:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f9c:	0c1b      	lsrs	r3, r3, #16
 8002f9e:	f003 0303 	and.w	r3, r3, #3
 8002fa2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002fa4:	4b47      	ldr	r3, [pc, #284]	; (80030c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fa6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002faa:	0f1b      	lsrs	r3, r3, #28
 8002fac:	f003 0307 	and.w	r3, r3, #7
 8002fb0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	019a      	lsls	r2, r3, #6
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	041b      	lsls	r3, r3, #16
 8002fbc:	431a      	orrs	r2, r3
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	68db      	ldr	r3, [r3, #12]
 8002fc2:	061b      	lsls	r3, r3, #24
 8002fc4:	431a      	orrs	r2, r3
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	071b      	lsls	r3, r3, #28
 8002fca:	493e      	ldr	r1, [pc, #248]	; (80030c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002fd2:	4b3c      	ldr	r3, [pc, #240]	; (80030c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002fd8:	f023 021f 	bic.w	r2, r3, #31
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe0:	3b01      	subs	r3, #1
 8002fe2:	4938      	ldr	r1, [pc, #224]	; (80030c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d01d      	beq.n	8003032 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002ff6:	4b33      	ldr	r3, [pc, #204]	; (80030c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ff8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ffc:	0e1b      	lsrs	r3, r3, #24
 8002ffe:	f003 030f 	and.w	r3, r3, #15
 8003002:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003004:	4b2f      	ldr	r3, [pc, #188]	; (80030c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003006:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800300a:	0f1b      	lsrs	r3, r3, #28
 800300c:	f003 0307 	and.w	r3, r3, #7
 8003010:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	019a      	lsls	r2, r3, #6
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	691b      	ldr	r3, [r3, #16]
 800301c:	041b      	lsls	r3, r3, #16
 800301e:	431a      	orrs	r2, r3
 8003020:	693b      	ldr	r3, [r7, #16]
 8003022:	061b      	lsls	r3, r3, #24
 8003024:	431a      	orrs	r2, r3
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	071b      	lsls	r3, r3, #28
 800302a:	4926      	ldr	r1, [pc, #152]	; (80030c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800302c:	4313      	orrs	r3, r2
 800302e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800303a:	2b00      	cmp	r3, #0
 800303c:	d011      	beq.n	8003062 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	019a      	lsls	r2, r3, #6
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	691b      	ldr	r3, [r3, #16]
 8003048:	041b      	lsls	r3, r3, #16
 800304a:	431a      	orrs	r2, r3
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	68db      	ldr	r3, [r3, #12]
 8003050:	061b      	lsls	r3, r3, #24
 8003052:	431a      	orrs	r2, r3
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	689b      	ldr	r3, [r3, #8]
 8003058:	071b      	lsls	r3, r3, #28
 800305a:	491a      	ldr	r1, [pc, #104]	; (80030c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800305c:	4313      	orrs	r3, r2
 800305e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003062:	4b18      	ldr	r3, [pc, #96]	; (80030c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a17      	ldr	r2, [pc, #92]	; (80030c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003068:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800306c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800306e:	f7fe f8e3 	bl	8001238 <HAL_GetTick>
 8003072:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003074:	e008      	b.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003076:	f7fe f8df 	bl	8001238 <HAL_GetTick>
 800307a:	4602      	mov	r2, r0
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	1ad3      	subs	r3, r2, r3
 8003080:	2b64      	cmp	r3, #100	; 0x64
 8003082:	d901      	bls.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003084:	2303      	movs	r3, #3
 8003086:	e0d8      	b.n	800323a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003088:	4b0e      	ldr	r3, [pc, #56]	; (80030c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003090:	2b00      	cmp	r3, #0
 8003092:	d0f0      	beq.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003094:	69bb      	ldr	r3, [r7, #24]
 8003096:	2b01      	cmp	r3, #1
 8003098:	f040 80ce 	bne.w	8003238 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800309c:	4b09      	ldr	r3, [pc, #36]	; (80030c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a08      	ldr	r2, [pc, #32]	; (80030c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030a6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030a8:	f7fe f8c6 	bl	8001238 <HAL_GetTick>
 80030ac:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80030ae:	e00b      	b.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80030b0:	f7fe f8c2 	bl	8001238 <HAL_GetTick>
 80030b4:	4602      	mov	r2, r0
 80030b6:	697b      	ldr	r3, [r7, #20]
 80030b8:	1ad3      	subs	r3, r2, r3
 80030ba:	2b64      	cmp	r3, #100	; 0x64
 80030bc:	d904      	bls.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80030be:	2303      	movs	r3, #3
 80030c0:	e0bb      	b.n	800323a <HAL_RCCEx_PeriphCLKConfig+0x842>
 80030c2:	bf00      	nop
 80030c4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80030c8:	4b5e      	ldr	r3, [pc, #376]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80030d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80030d4:	d0ec      	beq.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d003      	beq.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d009      	beq.n	80030fe <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d02e      	beq.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d12a      	bne.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80030fe:	4b51      	ldr	r3, [pc, #324]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003100:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003104:	0c1b      	lsrs	r3, r3, #16
 8003106:	f003 0303 	and.w	r3, r3, #3
 800310a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800310c:	4b4d      	ldr	r3, [pc, #308]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800310e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003112:	0f1b      	lsrs	r3, r3, #28
 8003114:	f003 0307 	and.w	r3, r3, #7
 8003118:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	695b      	ldr	r3, [r3, #20]
 800311e:	019a      	lsls	r2, r3, #6
 8003120:	693b      	ldr	r3, [r7, #16]
 8003122:	041b      	lsls	r3, r3, #16
 8003124:	431a      	orrs	r2, r3
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	699b      	ldr	r3, [r3, #24]
 800312a:	061b      	lsls	r3, r3, #24
 800312c:	431a      	orrs	r2, r3
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	071b      	lsls	r3, r3, #28
 8003132:	4944      	ldr	r1, [pc, #272]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003134:	4313      	orrs	r3, r2
 8003136:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800313a:	4b42      	ldr	r3, [pc, #264]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800313c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003140:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003148:	3b01      	subs	r3, #1
 800314a:	021b      	lsls	r3, r3, #8
 800314c:	493d      	ldr	r1, [pc, #244]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800314e:	4313      	orrs	r3, r2
 8003150:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800315c:	2b00      	cmp	r3, #0
 800315e:	d022      	beq.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003164:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003168:	d11d      	bne.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800316a:	4b36      	ldr	r3, [pc, #216]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800316c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003170:	0e1b      	lsrs	r3, r3, #24
 8003172:	f003 030f 	and.w	r3, r3, #15
 8003176:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003178:	4b32      	ldr	r3, [pc, #200]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800317a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800317e:	0f1b      	lsrs	r3, r3, #28
 8003180:	f003 0307 	and.w	r3, r3, #7
 8003184:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	695b      	ldr	r3, [r3, #20]
 800318a:	019a      	lsls	r2, r3, #6
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6a1b      	ldr	r3, [r3, #32]
 8003190:	041b      	lsls	r3, r3, #16
 8003192:	431a      	orrs	r2, r3
 8003194:	693b      	ldr	r3, [r7, #16]
 8003196:	061b      	lsls	r3, r3, #24
 8003198:	431a      	orrs	r2, r3
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	071b      	lsls	r3, r3, #28
 800319e:	4929      	ldr	r1, [pc, #164]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80031a0:	4313      	orrs	r3, r2
 80031a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f003 0308 	and.w	r3, r3, #8
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d028      	beq.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80031b2:	4b24      	ldr	r3, [pc, #144]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80031b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031b8:	0e1b      	lsrs	r3, r3, #24
 80031ba:	f003 030f 	and.w	r3, r3, #15
 80031be:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80031c0:	4b20      	ldr	r3, [pc, #128]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80031c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031c6:	0c1b      	lsrs	r3, r3, #16
 80031c8:	f003 0303 	and.w	r3, r3, #3
 80031cc:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	695b      	ldr	r3, [r3, #20]
 80031d2:	019a      	lsls	r2, r3, #6
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	041b      	lsls	r3, r3, #16
 80031d8:	431a      	orrs	r2, r3
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	061b      	lsls	r3, r3, #24
 80031de:	431a      	orrs	r2, r3
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	69db      	ldr	r3, [r3, #28]
 80031e4:	071b      	lsls	r3, r3, #28
 80031e6:	4917      	ldr	r1, [pc, #92]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80031e8:	4313      	orrs	r3, r2
 80031ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80031ee:	4b15      	ldr	r3, [pc, #84]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80031f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80031f4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031fc:	4911      	ldr	r1, [pc, #68]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80031fe:	4313      	orrs	r3, r2
 8003200:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003204:	4b0f      	ldr	r3, [pc, #60]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a0e      	ldr	r2, [pc, #56]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800320a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800320e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003210:	f7fe f812 	bl	8001238 <HAL_GetTick>
 8003214:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003216:	e008      	b.n	800322a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003218:	f7fe f80e 	bl	8001238 <HAL_GetTick>
 800321c:	4602      	mov	r2, r0
 800321e:	697b      	ldr	r3, [r7, #20]
 8003220:	1ad3      	subs	r3, r2, r3
 8003222:	2b64      	cmp	r3, #100	; 0x64
 8003224:	d901      	bls.n	800322a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003226:	2303      	movs	r3, #3
 8003228:	e007      	b.n	800323a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800322a:	4b06      	ldr	r3, [pc, #24]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003232:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003236:	d1ef      	bne.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003238:	2300      	movs	r3, #0
}
 800323a:	4618      	mov	r0, r3
 800323c:	3720      	adds	r7, #32
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}
 8003242:	bf00      	nop
 8003244:	40023800 	.word	0x40023800

08003248 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b082      	sub	sp, #8
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d101      	bne.n	800325a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003256:	2301      	movs	r3, #1
 8003258:	e049      	b.n	80032ee <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003260:	b2db      	uxtb	r3, r3
 8003262:	2b00      	cmp	r3, #0
 8003264:	d106      	bne.n	8003274 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2200      	movs	r2, #0
 800326a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800326e:	6878      	ldr	r0, [r7, #4]
 8003270:	f7fd fdae 	bl	8000dd0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2202      	movs	r2, #2
 8003278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681a      	ldr	r2, [r3, #0]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	3304      	adds	r3, #4
 8003284:	4619      	mov	r1, r3
 8003286:	4610      	mov	r0, r2
 8003288:	f000 fb6e 	bl	8003968 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2201      	movs	r2, #1
 8003290:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2201      	movs	r2, #1
 8003298:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2201      	movs	r2, #1
 80032a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2201      	movs	r2, #1
 80032a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2201      	movs	r2, #1
 80032b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2201      	movs	r2, #1
 80032b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2201      	movs	r2, #1
 80032c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2201      	movs	r2, #1
 80032c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2201      	movs	r2, #1
 80032d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2201      	movs	r2, #1
 80032d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2201      	movs	r2, #1
 80032e0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2201      	movs	r2, #1
 80032e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80032ec:	2300      	movs	r3, #0
}
 80032ee:	4618      	mov	r0, r3
 80032f0:	3708      	adds	r7, #8
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}

080032f6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80032f6:	b580      	push	{r7, lr}
 80032f8:	b082      	sub	sp, #8
 80032fa:	af00      	add	r7, sp, #0
 80032fc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d101      	bne.n	8003308 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003304:	2301      	movs	r3, #1
 8003306:	e049      	b.n	800339c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800330e:	b2db      	uxtb	r3, r3
 8003310:	2b00      	cmp	r3, #0
 8003312:	d106      	bne.n	8003322 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2200      	movs	r2, #0
 8003318:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800331c:	6878      	ldr	r0, [r7, #4]
 800331e:	f000 f841 	bl	80033a4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2202      	movs	r2, #2
 8003326:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681a      	ldr	r2, [r3, #0]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	3304      	adds	r3, #4
 8003332:	4619      	mov	r1, r3
 8003334:	4610      	mov	r0, r2
 8003336:	f000 fb17 	bl	8003968 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2201      	movs	r2, #1
 800333e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2201      	movs	r2, #1
 8003346:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2201      	movs	r2, #1
 800334e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2201      	movs	r2, #1
 8003356:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2201      	movs	r2, #1
 800335e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2201      	movs	r2, #1
 8003366:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2201      	movs	r2, #1
 800336e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2201      	movs	r2, #1
 8003376:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2201      	movs	r2, #1
 800337e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2201      	movs	r2, #1
 8003386:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2201      	movs	r2, #1
 800338e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2201      	movs	r2, #1
 8003396:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800339a:	2300      	movs	r3, #0
}
 800339c:	4618      	mov	r0, r3
 800339e:	3708      	adds	r7, #8
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bd80      	pop	{r7, pc}

080033a4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80033a4:	b480      	push	{r7}
 80033a6:	b083      	sub	sp, #12
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80033ac:	bf00      	nop
 80033ae:	370c      	adds	r7, #12
 80033b0:	46bd      	mov	sp, r7
 80033b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b6:	4770      	bx	lr

080033b8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b084      	sub	sp, #16
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
 80033c0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d109      	bne.n	80033dc <HAL_TIM_PWM_Start+0x24>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80033ce:	b2db      	uxtb	r3, r3
 80033d0:	2b01      	cmp	r3, #1
 80033d2:	bf14      	ite	ne
 80033d4:	2301      	movne	r3, #1
 80033d6:	2300      	moveq	r3, #0
 80033d8:	b2db      	uxtb	r3, r3
 80033da:	e03c      	b.n	8003456 <HAL_TIM_PWM_Start+0x9e>
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	2b04      	cmp	r3, #4
 80033e0:	d109      	bne.n	80033f6 <HAL_TIM_PWM_Start+0x3e>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80033e8:	b2db      	uxtb	r3, r3
 80033ea:	2b01      	cmp	r3, #1
 80033ec:	bf14      	ite	ne
 80033ee:	2301      	movne	r3, #1
 80033f0:	2300      	moveq	r3, #0
 80033f2:	b2db      	uxtb	r3, r3
 80033f4:	e02f      	b.n	8003456 <HAL_TIM_PWM_Start+0x9e>
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	2b08      	cmp	r3, #8
 80033fa:	d109      	bne.n	8003410 <HAL_TIM_PWM_Start+0x58>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003402:	b2db      	uxtb	r3, r3
 8003404:	2b01      	cmp	r3, #1
 8003406:	bf14      	ite	ne
 8003408:	2301      	movne	r3, #1
 800340a:	2300      	moveq	r3, #0
 800340c:	b2db      	uxtb	r3, r3
 800340e:	e022      	b.n	8003456 <HAL_TIM_PWM_Start+0x9e>
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	2b0c      	cmp	r3, #12
 8003414:	d109      	bne.n	800342a <HAL_TIM_PWM_Start+0x72>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800341c:	b2db      	uxtb	r3, r3
 800341e:	2b01      	cmp	r3, #1
 8003420:	bf14      	ite	ne
 8003422:	2301      	movne	r3, #1
 8003424:	2300      	moveq	r3, #0
 8003426:	b2db      	uxtb	r3, r3
 8003428:	e015      	b.n	8003456 <HAL_TIM_PWM_Start+0x9e>
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	2b10      	cmp	r3, #16
 800342e:	d109      	bne.n	8003444 <HAL_TIM_PWM_Start+0x8c>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003436:	b2db      	uxtb	r3, r3
 8003438:	2b01      	cmp	r3, #1
 800343a:	bf14      	ite	ne
 800343c:	2301      	movne	r3, #1
 800343e:	2300      	moveq	r3, #0
 8003440:	b2db      	uxtb	r3, r3
 8003442:	e008      	b.n	8003456 <HAL_TIM_PWM_Start+0x9e>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800344a:	b2db      	uxtb	r3, r3
 800344c:	2b01      	cmp	r3, #1
 800344e:	bf14      	ite	ne
 8003450:	2301      	movne	r3, #1
 8003452:	2300      	moveq	r3, #0
 8003454:	b2db      	uxtb	r3, r3
 8003456:	2b00      	cmp	r3, #0
 8003458:	d001      	beq.n	800345e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800345a:	2301      	movs	r3, #1
 800345c:	e092      	b.n	8003584 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d104      	bne.n	800346e <HAL_TIM_PWM_Start+0xb6>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2202      	movs	r2, #2
 8003468:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800346c:	e023      	b.n	80034b6 <HAL_TIM_PWM_Start+0xfe>
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	2b04      	cmp	r3, #4
 8003472:	d104      	bne.n	800347e <HAL_TIM_PWM_Start+0xc6>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2202      	movs	r2, #2
 8003478:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800347c:	e01b      	b.n	80034b6 <HAL_TIM_PWM_Start+0xfe>
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	2b08      	cmp	r3, #8
 8003482:	d104      	bne.n	800348e <HAL_TIM_PWM_Start+0xd6>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2202      	movs	r2, #2
 8003488:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800348c:	e013      	b.n	80034b6 <HAL_TIM_PWM_Start+0xfe>
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	2b0c      	cmp	r3, #12
 8003492:	d104      	bne.n	800349e <HAL_TIM_PWM_Start+0xe6>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2202      	movs	r2, #2
 8003498:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800349c:	e00b      	b.n	80034b6 <HAL_TIM_PWM_Start+0xfe>
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	2b10      	cmp	r3, #16
 80034a2:	d104      	bne.n	80034ae <HAL_TIM_PWM_Start+0xf6>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2202      	movs	r2, #2
 80034a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80034ac:	e003      	b.n	80034b6 <HAL_TIM_PWM_Start+0xfe>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2202      	movs	r2, #2
 80034b2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	2201      	movs	r2, #1
 80034bc:	6839      	ldr	r1, [r7, #0]
 80034be:	4618      	mov	r0, r3
 80034c0:	f000 fdf0 	bl	80040a4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a30      	ldr	r2, [pc, #192]	; (800358c <HAL_TIM_PWM_Start+0x1d4>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d004      	beq.n	80034d8 <HAL_TIM_PWM_Start+0x120>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a2f      	ldr	r2, [pc, #188]	; (8003590 <HAL_TIM_PWM_Start+0x1d8>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d101      	bne.n	80034dc <HAL_TIM_PWM_Start+0x124>
 80034d8:	2301      	movs	r3, #1
 80034da:	e000      	b.n	80034de <HAL_TIM_PWM_Start+0x126>
 80034dc:	2300      	movs	r3, #0
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d007      	beq.n	80034f2 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80034f0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a25      	ldr	r2, [pc, #148]	; (800358c <HAL_TIM_PWM_Start+0x1d4>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d022      	beq.n	8003542 <HAL_TIM_PWM_Start+0x18a>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003504:	d01d      	beq.n	8003542 <HAL_TIM_PWM_Start+0x18a>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a22      	ldr	r2, [pc, #136]	; (8003594 <HAL_TIM_PWM_Start+0x1dc>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d018      	beq.n	8003542 <HAL_TIM_PWM_Start+0x18a>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a20      	ldr	r2, [pc, #128]	; (8003598 <HAL_TIM_PWM_Start+0x1e0>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d013      	beq.n	8003542 <HAL_TIM_PWM_Start+0x18a>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a1f      	ldr	r2, [pc, #124]	; (800359c <HAL_TIM_PWM_Start+0x1e4>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d00e      	beq.n	8003542 <HAL_TIM_PWM_Start+0x18a>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a19      	ldr	r2, [pc, #100]	; (8003590 <HAL_TIM_PWM_Start+0x1d8>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d009      	beq.n	8003542 <HAL_TIM_PWM_Start+0x18a>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a1b      	ldr	r2, [pc, #108]	; (80035a0 <HAL_TIM_PWM_Start+0x1e8>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d004      	beq.n	8003542 <HAL_TIM_PWM_Start+0x18a>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a19      	ldr	r2, [pc, #100]	; (80035a4 <HAL_TIM_PWM_Start+0x1ec>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d115      	bne.n	800356e <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	689a      	ldr	r2, [r3, #8]
 8003548:	4b17      	ldr	r3, [pc, #92]	; (80035a8 <HAL_TIM_PWM_Start+0x1f0>)
 800354a:	4013      	ands	r3, r2
 800354c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	2b06      	cmp	r3, #6
 8003552:	d015      	beq.n	8003580 <HAL_TIM_PWM_Start+0x1c8>
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800355a:	d011      	beq.n	8003580 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	681a      	ldr	r2, [r3, #0]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f042 0201 	orr.w	r2, r2, #1
 800356a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800356c:	e008      	b.n	8003580 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	681a      	ldr	r2, [r3, #0]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f042 0201 	orr.w	r2, r2, #1
 800357c:	601a      	str	r2, [r3, #0]
 800357e:	e000      	b.n	8003582 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003580:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003582:	2300      	movs	r3, #0
}
 8003584:	4618      	mov	r0, r3
 8003586:	3710      	adds	r7, #16
 8003588:	46bd      	mov	sp, r7
 800358a:	bd80      	pop	{r7, pc}
 800358c:	40010000 	.word	0x40010000
 8003590:	40010400 	.word	0x40010400
 8003594:	40000400 	.word	0x40000400
 8003598:	40000800 	.word	0x40000800
 800359c:	40000c00 	.word	0x40000c00
 80035a0:	40014000 	.word	0x40014000
 80035a4:	40001800 	.word	0x40001800
 80035a8:	00010007 	.word	0x00010007

080035ac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b086      	sub	sp, #24
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	60f8      	str	r0, [r7, #12]
 80035b4:	60b9      	str	r1, [r7, #8]
 80035b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035b8:	2300      	movs	r3, #0
 80035ba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035c2:	2b01      	cmp	r3, #1
 80035c4:	d101      	bne.n	80035ca <HAL_TIM_PWM_ConfigChannel+0x1e>
 80035c6:	2302      	movs	r3, #2
 80035c8:	e0ff      	b.n	80037ca <HAL_TIM_PWM_ConfigChannel+0x21e>
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	2201      	movs	r2, #1
 80035ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2b14      	cmp	r3, #20
 80035d6:	f200 80f0 	bhi.w	80037ba <HAL_TIM_PWM_ConfigChannel+0x20e>
 80035da:	a201      	add	r2, pc, #4	; (adr r2, 80035e0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80035dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035e0:	08003635 	.word	0x08003635
 80035e4:	080037bb 	.word	0x080037bb
 80035e8:	080037bb 	.word	0x080037bb
 80035ec:	080037bb 	.word	0x080037bb
 80035f0:	08003675 	.word	0x08003675
 80035f4:	080037bb 	.word	0x080037bb
 80035f8:	080037bb 	.word	0x080037bb
 80035fc:	080037bb 	.word	0x080037bb
 8003600:	080036b7 	.word	0x080036b7
 8003604:	080037bb 	.word	0x080037bb
 8003608:	080037bb 	.word	0x080037bb
 800360c:	080037bb 	.word	0x080037bb
 8003610:	080036f7 	.word	0x080036f7
 8003614:	080037bb 	.word	0x080037bb
 8003618:	080037bb 	.word	0x080037bb
 800361c:	080037bb 	.word	0x080037bb
 8003620:	08003739 	.word	0x08003739
 8003624:	080037bb 	.word	0x080037bb
 8003628:	080037bb 	.word	0x080037bb
 800362c:	080037bb 	.word	0x080037bb
 8003630:	08003779 	.word	0x08003779
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	68b9      	ldr	r1, [r7, #8]
 800363a:	4618      	mov	r0, r3
 800363c:	f000 fa3a 	bl	8003ab4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	699a      	ldr	r2, [r3, #24]
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f042 0208 	orr.w	r2, r2, #8
 800364e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	699a      	ldr	r2, [r3, #24]
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f022 0204 	bic.w	r2, r2, #4
 800365e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	6999      	ldr	r1, [r3, #24]
 8003666:	68bb      	ldr	r3, [r7, #8]
 8003668:	691a      	ldr	r2, [r3, #16]
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	430a      	orrs	r2, r1
 8003670:	619a      	str	r2, [r3, #24]
      break;
 8003672:	e0a5      	b.n	80037c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	68b9      	ldr	r1, [r7, #8]
 800367a:	4618      	mov	r0, r3
 800367c:	f000 fa8c 	bl	8003b98 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	699a      	ldr	r2, [r3, #24]
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800368e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	699a      	ldr	r2, [r3, #24]
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800369e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	6999      	ldr	r1, [r3, #24]
 80036a6:	68bb      	ldr	r3, [r7, #8]
 80036a8:	691b      	ldr	r3, [r3, #16]
 80036aa:	021a      	lsls	r2, r3, #8
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	430a      	orrs	r2, r1
 80036b2:	619a      	str	r2, [r3, #24]
      break;
 80036b4:	e084      	b.n	80037c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	68b9      	ldr	r1, [r7, #8]
 80036bc:	4618      	mov	r0, r3
 80036be:	f000 fae3 	bl	8003c88 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	69da      	ldr	r2, [r3, #28]
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f042 0208 	orr.w	r2, r2, #8
 80036d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	69da      	ldr	r2, [r3, #28]
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f022 0204 	bic.w	r2, r2, #4
 80036e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	69d9      	ldr	r1, [r3, #28]
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	691a      	ldr	r2, [r3, #16]
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	430a      	orrs	r2, r1
 80036f2:	61da      	str	r2, [r3, #28]
      break;
 80036f4:	e064      	b.n	80037c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	68b9      	ldr	r1, [r7, #8]
 80036fc:	4618      	mov	r0, r3
 80036fe:	f000 fb39 	bl	8003d74 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	69da      	ldr	r2, [r3, #28]
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003710:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	69da      	ldr	r2, [r3, #28]
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003720:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	69d9      	ldr	r1, [r3, #28]
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	691b      	ldr	r3, [r3, #16]
 800372c:	021a      	lsls	r2, r3, #8
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	430a      	orrs	r2, r1
 8003734:	61da      	str	r2, [r3, #28]
      break;
 8003736:	e043      	b.n	80037c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	68b9      	ldr	r1, [r7, #8]
 800373e:	4618      	mov	r0, r3
 8003740:	f000 fb70 	bl	8003e24 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f042 0208 	orr.w	r2, r2, #8
 8003752:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f022 0204 	bic.w	r2, r2, #4
 8003762:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800376a:	68bb      	ldr	r3, [r7, #8]
 800376c:	691a      	ldr	r2, [r3, #16]
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	430a      	orrs	r2, r1
 8003774:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003776:	e023      	b.n	80037c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	68b9      	ldr	r1, [r7, #8]
 800377e:	4618      	mov	r0, r3
 8003780:	f000 fba2 	bl	8003ec8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003792:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037a2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80037aa:	68bb      	ldr	r3, [r7, #8]
 80037ac:	691b      	ldr	r3, [r3, #16]
 80037ae:	021a      	lsls	r2, r3, #8
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	430a      	orrs	r2, r1
 80037b6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80037b8:	e002      	b.n	80037c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	75fb      	strb	r3, [r7, #23]
      break;
 80037be:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	2200      	movs	r2, #0
 80037c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80037c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80037ca:	4618      	mov	r0, r3
 80037cc:	3718      	adds	r7, #24
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bd80      	pop	{r7, pc}
 80037d2:	bf00      	nop

080037d4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b084      	sub	sp, #16
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
 80037dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80037de:	2300      	movs	r3, #0
 80037e0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037e8:	2b01      	cmp	r3, #1
 80037ea:	d101      	bne.n	80037f0 <HAL_TIM_ConfigClockSource+0x1c>
 80037ec:	2302      	movs	r3, #2
 80037ee:	e0b4      	b.n	800395a <HAL_TIM_ConfigClockSource+0x186>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2201      	movs	r2, #1
 80037f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2202      	movs	r2, #2
 80037fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003808:	68ba      	ldr	r2, [r7, #8]
 800380a:	4b56      	ldr	r3, [pc, #344]	; (8003964 <HAL_TIM_ConfigClockSource+0x190>)
 800380c:	4013      	ands	r3, r2
 800380e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003816:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	68ba      	ldr	r2, [r7, #8]
 800381e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003828:	d03e      	beq.n	80038a8 <HAL_TIM_ConfigClockSource+0xd4>
 800382a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800382e:	f200 8087 	bhi.w	8003940 <HAL_TIM_ConfigClockSource+0x16c>
 8003832:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003836:	f000 8086 	beq.w	8003946 <HAL_TIM_ConfigClockSource+0x172>
 800383a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800383e:	d87f      	bhi.n	8003940 <HAL_TIM_ConfigClockSource+0x16c>
 8003840:	2b70      	cmp	r3, #112	; 0x70
 8003842:	d01a      	beq.n	800387a <HAL_TIM_ConfigClockSource+0xa6>
 8003844:	2b70      	cmp	r3, #112	; 0x70
 8003846:	d87b      	bhi.n	8003940 <HAL_TIM_ConfigClockSource+0x16c>
 8003848:	2b60      	cmp	r3, #96	; 0x60
 800384a:	d050      	beq.n	80038ee <HAL_TIM_ConfigClockSource+0x11a>
 800384c:	2b60      	cmp	r3, #96	; 0x60
 800384e:	d877      	bhi.n	8003940 <HAL_TIM_ConfigClockSource+0x16c>
 8003850:	2b50      	cmp	r3, #80	; 0x50
 8003852:	d03c      	beq.n	80038ce <HAL_TIM_ConfigClockSource+0xfa>
 8003854:	2b50      	cmp	r3, #80	; 0x50
 8003856:	d873      	bhi.n	8003940 <HAL_TIM_ConfigClockSource+0x16c>
 8003858:	2b40      	cmp	r3, #64	; 0x40
 800385a:	d058      	beq.n	800390e <HAL_TIM_ConfigClockSource+0x13a>
 800385c:	2b40      	cmp	r3, #64	; 0x40
 800385e:	d86f      	bhi.n	8003940 <HAL_TIM_ConfigClockSource+0x16c>
 8003860:	2b30      	cmp	r3, #48	; 0x30
 8003862:	d064      	beq.n	800392e <HAL_TIM_ConfigClockSource+0x15a>
 8003864:	2b30      	cmp	r3, #48	; 0x30
 8003866:	d86b      	bhi.n	8003940 <HAL_TIM_ConfigClockSource+0x16c>
 8003868:	2b20      	cmp	r3, #32
 800386a:	d060      	beq.n	800392e <HAL_TIM_ConfigClockSource+0x15a>
 800386c:	2b20      	cmp	r3, #32
 800386e:	d867      	bhi.n	8003940 <HAL_TIM_ConfigClockSource+0x16c>
 8003870:	2b00      	cmp	r3, #0
 8003872:	d05c      	beq.n	800392e <HAL_TIM_ConfigClockSource+0x15a>
 8003874:	2b10      	cmp	r3, #16
 8003876:	d05a      	beq.n	800392e <HAL_TIM_ConfigClockSource+0x15a>
 8003878:	e062      	b.n	8003940 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800388a:	f000 fbeb 	bl	8004064 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	689b      	ldr	r3, [r3, #8]
 8003894:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003896:	68bb      	ldr	r3, [r7, #8]
 8003898:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800389c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	68ba      	ldr	r2, [r7, #8]
 80038a4:	609a      	str	r2, [r3, #8]
      break;
 80038a6:	e04f      	b.n	8003948 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80038b8:	f000 fbd4 	bl	8004064 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	689a      	ldr	r2, [r3, #8]
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80038ca:	609a      	str	r2, [r3, #8]
      break;
 80038cc:	e03c      	b.n	8003948 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80038da:	461a      	mov	r2, r3
 80038dc:	f000 fb48 	bl	8003f70 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	2150      	movs	r1, #80	; 0x50
 80038e6:	4618      	mov	r0, r3
 80038e8:	f000 fba1 	bl	800402e <TIM_ITRx_SetConfig>
      break;
 80038ec:	e02c      	b.n	8003948 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80038fa:	461a      	mov	r2, r3
 80038fc:	f000 fb67 	bl	8003fce <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	2160      	movs	r1, #96	; 0x60
 8003906:	4618      	mov	r0, r3
 8003908:	f000 fb91 	bl	800402e <TIM_ITRx_SetConfig>
      break;
 800390c:	e01c      	b.n	8003948 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800391a:	461a      	mov	r2, r3
 800391c:	f000 fb28 	bl	8003f70 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	2140      	movs	r1, #64	; 0x40
 8003926:	4618      	mov	r0, r3
 8003928:	f000 fb81 	bl	800402e <TIM_ITRx_SetConfig>
      break;
 800392c:	e00c      	b.n	8003948 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681a      	ldr	r2, [r3, #0]
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4619      	mov	r1, r3
 8003938:	4610      	mov	r0, r2
 800393a:	f000 fb78 	bl	800402e <TIM_ITRx_SetConfig>
      break;
 800393e:	e003      	b.n	8003948 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003940:	2301      	movs	r3, #1
 8003942:	73fb      	strb	r3, [r7, #15]
      break;
 8003944:	e000      	b.n	8003948 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003946:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2201      	movs	r2, #1
 800394c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2200      	movs	r2, #0
 8003954:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003958:	7bfb      	ldrb	r3, [r7, #15]
}
 800395a:	4618      	mov	r0, r3
 800395c:	3710      	adds	r7, #16
 800395e:	46bd      	mov	sp, r7
 8003960:	bd80      	pop	{r7, pc}
 8003962:	bf00      	nop
 8003964:	fffeff88 	.word	0xfffeff88

08003968 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003968:	b480      	push	{r7}
 800396a:	b085      	sub	sp, #20
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
 8003970:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	4a43      	ldr	r2, [pc, #268]	; (8003a88 <TIM_Base_SetConfig+0x120>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d013      	beq.n	80039a8 <TIM_Base_SetConfig+0x40>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003986:	d00f      	beq.n	80039a8 <TIM_Base_SetConfig+0x40>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	4a40      	ldr	r2, [pc, #256]	; (8003a8c <TIM_Base_SetConfig+0x124>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d00b      	beq.n	80039a8 <TIM_Base_SetConfig+0x40>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	4a3f      	ldr	r2, [pc, #252]	; (8003a90 <TIM_Base_SetConfig+0x128>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d007      	beq.n	80039a8 <TIM_Base_SetConfig+0x40>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	4a3e      	ldr	r2, [pc, #248]	; (8003a94 <TIM_Base_SetConfig+0x12c>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d003      	beq.n	80039a8 <TIM_Base_SetConfig+0x40>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	4a3d      	ldr	r2, [pc, #244]	; (8003a98 <TIM_Base_SetConfig+0x130>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d108      	bne.n	80039ba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	68fa      	ldr	r2, [r7, #12]
 80039b6:	4313      	orrs	r3, r2
 80039b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	4a32      	ldr	r2, [pc, #200]	; (8003a88 <TIM_Base_SetConfig+0x120>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d02b      	beq.n	8003a1a <TIM_Base_SetConfig+0xb2>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039c8:	d027      	beq.n	8003a1a <TIM_Base_SetConfig+0xb2>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	4a2f      	ldr	r2, [pc, #188]	; (8003a8c <TIM_Base_SetConfig+0x124>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d023      	beq.n	8003a1a <TIM_Base_SetConfig+0xb2>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	4a2e      	ldr	r2, [pc, #184]	; (8003a90 <TIM_Base_SetConfig+0x128>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d01f      	beq.n	8003a1a <TIM_Base_SetConfig+0xb2>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	4a2d      	ldr	r2, [pc, #180]	; (8003a94 <TIM_Base_SetConfig+0x12c>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d01b      	beq.n	8003a1a <TIM_Base_SetConfig+0xb2>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	4a2c      	ldr	r2, [pc, #176]	; (8003a98 <TIM_Base_SetConfig+0x130>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d017      	beq.n	8003a1a <TIM_Base_SetConfig+0xb2>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	4a2b      	ldr	r2, [pc, #172]	; (8003a9c <TIM_Base_SetConfig+0x134>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d013      	beq.n	8003a1a <TIM_Base_SetConfig+0xb2>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	4a2a      	ldr	r2, [pc, #168]	; (8003aa0 <TIM_Base_SetConfig+0x138>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d00f      	beq.n	8003a1a <TIM_Base_SetConfig+0xb2>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	4a29      	ldr	r2, [pc, #164]	; (8003aa4 <TIM_Base_SetConfig+0x13c>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d00b      	beq.n	8003a1a <TIM_Base_SetConfig+0xb2>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	4a28      	ldr	r2, [pc, #160]	; (8003aa8 <TIM_Base_SetConfig+0x140>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d007      	beq.n	8003a1a <TIM_Base_SetConfig+0xb2>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	4a27      	ldr	r2, [pc, #156]	; (8003aac <TIM_Base_SetConfig+0x144>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d003      	beq.n	8003a1a <TIM_Base_SetConfig+0xb2>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	4a26      	ldr	r2, [pc, #152]	; (8003ab0 <TIM_Base_SetConfig+0x148>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d108      	bne.n	8003a2c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	68db      	ldr	r3, [r3, #12]
 8003a26:	68fa      	ldr	r2, [r7, #12]
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	695b      	ldr	r3, [r3, #20]
 8003a36:	4313      	orrs	r3, r2
 8003a38:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	689a      	ldr	r2, [r3, #8]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	681a      	ldr	r2, [r3, #0]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	4a0e      	ldr	r2, [pc, #56]	; (8003a88 <TIM_Base_SetConfig+0x120>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d003      	beq.n	8003a5a <TIM_Base_SetConfig+0xf2>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	4a10      	ldr	r2, [pc, #64]	; (8003a98 <TIM_Base_SetConfig+0x130>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d103      	bne.n	8003a62 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	691a      	ldr	r2, [r3, #16]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f043 0204 	orr.w	r2, r3, #4
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2201      	movs	r2, #1
 8003a72:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	68fa      	ldr	r2, [r7, #12]
 8003a78:	601a      	str	r2, [r3, #0]
}
 8003a7a:	bf00      	nop
 8003a7c:	3714      	adds	r7, #20
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a84:	4770      	bx	lr
 8003a86:	bf00      	nop
 8003a88:	40010000 	.word	0x40010000
 8003a8c:	40000400 	.word	0x40000400
 8003a90:	40000800 	.word	0x40000800
 8003a94:	40000c00 	.word	0x40000c00
 8003a98:	40010400 	.word	0x40010400
 8003a9c:	40014000 	.word	0x40014000
 8003aa0:	40014400 	.word	0x40014400
 8003aa4:	40014800 	.word	0x40014800
 8003aa8:	40001800 	.word	0x40001800
 8003aac:	40001c00 	.word	0x40001c00
 8003ab0:	40002000 	.word	0x40002000

08003ab4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b087      	sub	sp, #28
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
 8003abc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6a1b      	ldr	r3, [r3, #32]
 8003ac2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6a1b      	ldr	r3, [r3, #32]
 8003ac8:	f023 0201 	bic.w	r2, r3, #1
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	699b      	ldr	r3, [r3, #24]
 8003ada:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003adc:	68fa      	ldr	r2, [r7, #12]
 8003ade:	4b2b      	ldr	r3, [pc, #172]	; (8003b8c <TIM_OC1_SetConfig+0xd8>)
 8003ae0:	4013      	ands	r3, r2
 8003ae2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	f023 0303 	bic.w	r3, r3, #3
 8003aea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	68fa      	ldr	r2, [r7, #12]
 8003af2:	4313      	orrs	r3, r2
 8003af4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	f023 0302 	bic.w	r3, r3, #2
 8003afc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	689b      	ldr	r3, [r3, #8]
 8003b02:	697a      	ldr	r2, [r7, #20]
 8003b04:	4313      	orrs	r3, r2
 8003b06:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	4a21      	ldr	r2, [pc, #132]	; (8003b90 <TIM_OC1_SetConfig+0xdc>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d003      	beq.n	8003b18 <TIM_OC1_SetConfig+0x64>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	4a20      	ldr	r2, [pc, #128]	; (8003b94 <TIM_OC1_SetConfig+0xe0>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d10c      	bne.n	8003b32 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003b18:	697b      	ldr	r3, [r7, #20]
 8003b1a:	f023 0308 	bic.w	r3, r3, #8
 8003b1e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	68db      	ldr	r3, [r3, #12]
 8003b24:	697a      	ldr	r2, [r7, #20]
 8003b26:	4313      	orrs	r3, r2
 8003b28:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	f023 0304 	bic.w	r3, r3, #4
 8003b30:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	4a16      	ldr	r2, [pc, #88]	; (8003b90 <TIM_OC1_SetConfig+0xdc>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d003      	beq.n	8003b42 <TIM_OC1_SetConfig+0x8e>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	4a15      	ldr	r2, [pc, #84]	; (8003b94 <TIM_OC1_SetConfig+0xe0>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d111      	bne.n	8003b66 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003b42:	693b      	ldr	r3, [r7, #16]
 8003b44:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b48:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003b50:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	695b      	ldr	r3, [r3, #20]
 8003b56:	693a      	ldr	r2, [r7, #16]
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	699b      	ldr	r3, [r3, #24]
 8003b60:	693a      	ldr	r2, [r7, #16]
 8003b62:	4313      	orrs	r3, r2
 8003b64:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	693a      	ldr	r2, [r7, #16]
 8003b6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	68fa      	ldr	r2, [r7, #12]
 8003b70:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	685a      	ldr	r2, [r3, #4]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	697a      	ldr	r2, [r7, #20]
 8003b7e:	621a      	str	r2, [r3, #32]
}
 8003b80:	bf00      	nop
 8003b82:	371c      	adds	r7, #28
 8003b84:	46bd      	mov	sp, r7
 8003b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8a:	4770      	bx	lr
 8003b8c:	fffeff8f 	.word	0xfffeff8f
 8003b90:	40010000 	.word	0x40010000
 8003b94:	40010400 	.word	0x40010400

08003b98 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b087      	sub	sp, #28
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
 8003ba0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6a1b      	ldr	r3, [r3, #32]
 8003ba6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6a1b      	ldr	r3, [r3, #32]
 8003bac:	f023 0210 	bic.w	r2, r3, #16
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	699b      	ldr	r3, [r3, #24]
 8003bbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003bc0:	68fa      	ldr	r2, [r7, #12]
 8003bc2:	4b2e      	ldr	r3, [pc, #184]	; (8003c7c <TIM_OC2_SetConfig+0xe4>)
 8003bc4:	4013      	ands	r3, r2
 8003bc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	021b      	lsls	r3, r3, #8
 8003bd6:	68fa      	ldr	r2, [r7, #12]
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003bdc:	697b      	ldr	r3, [r7, #20]
 8003bde:	f023 0320 	bic.w	r3, r3, #32
 8003be2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	689b      	ldr	r3, [r3, #8]
 8003be8:	011b      	lsls	r3, r3, #4
 8003bea:	697a      	ldr	r2, [r7, #20]
 8003bec:	4313      	orrs	r3, r2
 8003bee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	4a23      	ldr	r2, [pc, #140]	; (8003c80 <TIM_OC2_SetConfig+0xe8>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d003      	beq.n	8003c00 <TIM_OC2_SetConfig+0x68>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	4a22      	ldr	r2, [pc, #136]	; (8003c84 <TIM_OC2_SetConfig+0xec>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d10d      	bne.n	8003c1c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003c00:	697b      	ldr	r3, [r7, #20]
 8003c02:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c06:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	68db      	ldr	r3, [r3, #12]
 8003c0c:	011b      	lsls	r3, r3, #4
 8003c0e:	697a      	ldr	r2, [r7, #20]
 8003c10:	4313      	orrs	r3, r2
 8003c12:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003c14:	697b      	ldr	r3, [r7, #20]
 8003c16:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c1a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	4a18      	ldr	r2, [pc, #96]	; (8003c80 <TIM_OC2_SetConfig+0xe8>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d003      	beq.n	8003c2c <TIM_OC2_SetConfig+0x94>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	4a17      	ldr	r2, [pc, #92]	; (8003c84 <TIM_OC2_SetConfig+0xec>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d113      	bne.n	8003c54 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003c32:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003c34:	693b      	ldr	r3, [r7, #16]
 8003c36:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003c3a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	695b      	ldr	r3, [r3, #20]
 8003c40:	009b      	lsls	r3, r3, #2
 8003c42:	693a      	ldr	r2, [r7, #16]
 8003c44:	4313      	orrs	r3, r2
 8003c46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	699b      	ldr	r3, [r3, #24]
 8003c4c:	009b      	lsls	r3, r3, #2
 8003c4e:	693a      	ldr	r2, [r7, #16]
 8003c50:	4313      	orrs	r3, r2
 8003c52:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	693a      	ldr	r2, [r7, #16]
 8003c58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	68fa      	ldr	r2, [r7, #12]
 8003c5e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	685a      	ldr	r2, [r3, #4]
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	697a      	ldr	r2, [r7, #20]
 8003c6c:	621a      	str	r2, [r3, #32]
}
 8003c6e:	bf00      	nop
 8003c70:	371c      	adds	r7, #28
 8003c72:	46bd      	mov	sp, r7
 8003c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c78:	4770      	bx	lr
 8003c7a:	bf00      	nop
 8003c7c:	feff8fff 	.word	0xfeff8fff
 8003c80:	40010000 	.word	0x40010000
 8003c84:	40010400 	.word	0x40010400

08003c88 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b087      	sub	sp, #28
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
 8003c90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6a1b      	ldr	r3, [r3, #32]
 8003c96:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6a1b      	ldr	r3, [r3, #32]
 8003c9c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	69db      	ldr	r3, [r3, #28]
 8003cae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003cb0:	68fa      	ldr	r2, [r7, #12]
 8003cb2:	4b2d      	ldr	r3, [pc, #180]	; (8003d68 <TIM_OC3_SetConfig+0xe0>)
 8003cb4:	4013      	ands	r3, r2
 8003cb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	f023 0303 	bic.w	r3, r3, #3
 8003cbe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	68fa      	ldr	r2, [r7, #12]
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003cca:	697b      	ldr	r3, [r7, #20]
 8003ccc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003cd0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	689b      	ldr	r3, [r3, #8]
 8003cd6:	021b      	lsls	r3, r3, #8
 8003cd8:	697a      	ldr	r2, [r7, #20]
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	4a22      	ldr	r2, [pc, #136]	; (8003d6c <TIM_OC3_SetConfig+0xe4>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d003      	beq.n	8003cee <TIM_OC3_SetConfig+0x66>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	4a21      	ldr	r2, [pc, #132]	; (8003d70 <TIM_OC3_SetConfig+0xe8>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d10d      	bne.n	8003d0a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003cee:	697b      	ldr	r3, [r7, #20]
 8003cf0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003cf4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	68db      	ldr	r3, [r3, #12]
 8003cfa:	021b      	lsls	r3, r3, #8
 8003cfc:	697a      	ldr	r2, [r7, #20]
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003d02:	697b      	ldr	r3, [r7, #20]
 8003d04:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003d08:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	4a17      	ldr	r2, [pc, #92]	; (8003d6c <TIM_OC3_SetConfig+0xe4>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d003      	beq.n	8003d1a <TIM_OC3_SetConfig+0x92>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	4a16      	ldr	r2, [pc, #88]	; (8003d70 <TIM_OC3_SetConfig+0xe8>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d113      	bne.n	8003d42 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003d20:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003d22:	693b      	ldr	r3, [r7, #16]
 8003d24:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003d28:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	695b      	ldr	r3, [r3, #20]
 8003d2e:	011b      	lsls	r3, r3, #4
 8003d30:	693a      	ldr	r2, [r7, #16]
 8003d32:	4313      	orrs	r3, r2
 8003d34:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	699b      	ldr	r3, [r3, #24]
 8003d3a:	011b      	lsls	r3, r3, #4
 8003d3c:	693a      	ldr	r2, [r7, #16]
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	693a      	ldr	r2, [r7, #16]
 8003d46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	68fa      	ldr	r2, [r7, #12]
 8003d4c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	685a      	ldr	r2, [r3, #4]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	697a      	ldr	r2, [r7, #20]
 8003d5a:	621a      	str	r2, [r3, #32]
}
 8003d5c:	bf00      	nop
 8003d5e:	371c      	adds	r7, #28
 8003d60:	46bd      	mov	sp, r7
 8003d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d66:	4770      	bx	lr
 8003d68:	fffeff8f 	.word	0xfffeff8f
 8003d6c:	40010000 	.word	0x40010000
 8003d70:	40010400 	.word	0x40010400

08003d74 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d74:	b480      	push	{r7}
 8003d76:	b087      	sub	sp, #28
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
 8003d7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6a1b      	ldr	r3, [r3, #32]
 8003d82:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6a1b      	ldr	r3, [r3, #32]
 8003d88:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	69db      	ldr	r3, [r3, #28]
 8003d9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003d9c:	68fa      	ldr	r2, [r7, #12]
 8003d9e:	4b1e      	ldr	r3, [pc, #120]	; (8003e18 <TIM_OC4_SetConfig+0xa4>)
 8003da0:	4013      	ands	r3, r2
 8003da2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003daa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	021b      	lsls	r3, r3, #8
 8003db2:	68fa      	ldr	r2, [r7, #12]
 8003db4:	4313      	orrs	r3, r2
 8003db6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003db8:	693b      	ldr	r3, [r7, #16]
 8003dba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003dbe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	689b      	ldr	r3, [r3, #8]
 8003dc4:	031b      	lsls	r3, r3, #12
 8003dc6:	693a      	ldr	r2, [r7, #16]
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	4a13      	ldr	r2, [pc, #76]	; (8003e1c <TIM_OC4_SetConfig+0xa8>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d003      	beq.n	8003ddc <TIM_OC4_SetConfig+0x68>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	4a12      	ldr	r2, [pc, #72]	; (8003e20 <TIM_OC4_SetConfig+0xac>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d109      	bne.n	8003df0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003ddc:	697b      	ldr	r3, [r7, #20]
 8003dde:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003de2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	695b      	ldr	r3, [r3, #20]
 8003de8:	019b      	lsls	r3, r3, #6
 8003dea:	697a      	ldr	r2, [r7, #20]
 8003dec:	4313      	orrs	r3, r2
 8003dee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	697a      	ldr	r2, [r7, #20]
 8003df4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	68fa      	ldr	r2, [r7, #12]
 8003dfa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	685a      	ldr	r2, [r3, #4]
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	693a      	ldr	r2, [r7, #16]
 8003e08:	621a      	str	r2, [r3, #32]
}
 8003e0a:	bf00      	nop
 8003e0c:	371c      	adds	r7, #28
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e14:	4770      	bx	lr
 8003e16:	bf00      	nop
 8003e18:	feff8fff 	.word	0xfeff8fff
 8003e1c:	40010000 	.word	0x40010000
 8003e20:	40010400 	.word	0x40010400

08003e24 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003e24:	b480      	push	{r7}
 8003e26:	b087      	sub	sp, #28
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
 8003e2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6a1b      	ldr	r3, [r3, #32]
 8003e32:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6a1b      	ldr	r3, [r3, #32]
 8003e38:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003e4c:	68fa      	ldr	r2, [r7, #12]
 8003e4e:	4b1b      	ldr	r3, [pc, #108]	; (8003ebc <TIM_OC5_SetConfig+0x98>)
 8003e50:	4013      	ands	r3, r2
 8003e52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	68fa      	ldr	r2, [r7, #12]
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003e5e:	693b      	ldr	r3, [r7, #16]
 8003e60:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003e64:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	689b      	ldr	r3, [r3, #8]
 8003e6a:	041b      	lsls	r3, r3, #16
 8003e6c:	693a      	ldr	r2, [r7, #16]
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	4a12      	ldr	r2, [pc, #72]	; (8003ec0 <TIM_OC5_SetConfig+0x9c>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d003      	beq.n	8003e82 <TIM_OC5_SetConfig+0x5e>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	4a11      	ldr	r2, [pc, #68]	; (8003ec4 <TIM_OC5_SetConfig+0xa0>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d109      	bne.n	8003e96 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003e82:	697b      	ldr	r3, [r7, #20]
 8003e84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e88:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	695b      	ldr	r3, [r3, #20]
 8003e8e:	021b      	lsls	r3, r3, #8
 8003e90:	697a      	ldr	r2, [r7, #20]
 8003e92:	4313      	orrs	r3, r2
 8003e94:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	697a      	ldr	r2, [r7, #20]
 8003e9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	68fa      	ldr	r2, [r7, #12]
 8003ea0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	685a      	ldr	r2, [r3, #4]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	693a      	ldr	r2, [r7, #16]
 8003eae:	621a      	str	r2, [r3, #32]
}
 8003eb0:	bf00      	nop
 8003eb2:	371c      	adds	r7, #28
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eba:	4770      	bx	lr
 8003ebc:	fffeff8f 	.word	0xfffeff8f
 8003ec0:	40010000 	.word	0x40010000
 8003ec4:	40010400 	.word	0x40010400

08003ec8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b087      	sub	sp, #28
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
 8003ed0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6a1b      	ldr	r3, [r3, #32]
 8003ed6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6a1b      	ldr	r3, [r3, #32]
 8003edc:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003ef0:	68fa      	ldr	r2, [r7, #12]
 8003ef2:	4b1c      	ldr	r3, [pc, #112]	; (8003f64 <TIM_OC6_SetConfig+0x9c>)
 8003ef4:	4013      	ands	r3, r2
 8003ef6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	021b      	lsls	r3, r3, #8
 8003efe:	68fa      	ldr	r2, [r7, #12]
 8003f00:	4313      	orrs	r3, r2
 8003f02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003f04:	693b      	ldr	r3, [r7, #16]
 8003f06:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003f0a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	689b      	ldr	r3, [r3, #8]
 8003f10:	051b      	lsls	r3, r3, #20
 8003f12:	693a      	ldr	r2, [r7, #16]
 8003f14:	4313      	orrs	r3, r2
 8003f16:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	4a13      	ldr	r2, [pc, #76]	; (8003f68 <TIM_OC6_SetConfig+0xa0>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d003      	beq.n	8003f28 <TIM_OC6_SetConfig+0x60>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	4a12      	ldr	r2, [pc, #72]	; (8003f6c <TIM_OC6_SetConfig+0xa4>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d109      	bne.n	8003f3c <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003f28:	697b      	ldr	r3, [r7, #20]
 8003f2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f2e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	695b      	ldr	r3, [r3, #20]
 8003f34:	029b      	lsls	r3, r3, #10
 8003f36:	697a      	ldr	r2, [r7, #20]
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	697a      	ldr	r2, [r7, #20]
 8003f40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	68fa      	ldr	r2, [r7, #12]
 8003f46:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	685a      	ldr	r2, [r3, #4]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	693a      	ldr	r2, [r7, #16]
 8003f54:	621a      	str	r2, [r3, #32]
}
 8003f56:	bf00      	nop
 8003f58:	371c      	adds	r7, #28
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f60:	4770      	bx	lr
 8003f62:	bf00      	nop
 8003f64:	feff8fff 	.word	0xfeff8fff
 8003f68:	40010000 	.word	0x40010000
 8003f6c:	40010400 	.word	0x40010400

08003f70 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f70:	b480      	push	{r7}
 8003f72:	b087      	sub	sp, #28
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	60f8      	str	r0, [r7, #12]
 8003f78:	60b9      	str	r1, [r7, #8]
 8003f7a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	6a1b      	ldr	r3, [r3, #32]
 8003f80:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	6a1b      	ldr	r3, [r3, #32]
 8003f86:	f023 0201 	bic.w	r2, r3, #1
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	699b      	ldr	r3, [r3, #24]
 8003f92:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003f94:	693b      	ldr	r3, [r7, #16]
 8003f96:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f9a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	011b      	lsls	r3, r3, #4
 8003fa0:	693a      	ldr	r2, [r7, #16]
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003fa6:	697b      	ldr	r3, [r7, #20]
 8003fa8:	f023 030a 	bic.w	r3, r3, #10
 8003fac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003fae:	697a      	ldr	r2, [r7, #20]
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	693a      	ldr	r2, [r7, #16]
 8003fba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	697a      	ldr	r2, [r7, #20]
 8003fc0:	621a      	str	r2, [r3, #32]
}
 8003fc2:	bf00      	nop
 8003fc4:	371c      	adds	r7, #28
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fcc:	4770      	bx	lr

08003fce <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003fce:	b480      	push	{r7}
 8003fd0:	b087      	sub	sp, #28
 8003fd2:	af00      	add	r7, sp, #0
 8003fd4:	60f8      	str	r0, [r7, #12]
 8003fd6:	60b9      	str	r1, [r7, #8]
 8003fd8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	6a1b      	ldr	r3, [r3, #32]
 8003fde:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	6a1b      	ldr	r3, [r3, #32]
 8003fe4:	f023 0210 	bic.w	r2, r3, #16
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	699b      	ldr	r3, [r3, #24]
 8003ff0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003ff2:	693b      	ldr	r3, [r7, #16]
 8003ff4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003ff8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	031b      	lsls	r3, r3, #12
 8003ffe:	693a      	ldr	r2, [r7, #16]
 8004000:	4313      	orrs	r3, r2
 8004002:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004004:	697b      	ldr	r3, [r7, #20]
 8004006:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800400a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	011b      	lsls	r3, r3, #4
 8004010:	697a      	ldr	r2, [r7, #20]
 8004012:	4313      	orrs	r3, r2
 8004014:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	693a      	ldr	r2, [r7, #16]
 800401a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	697a      	ldr	r2, [r7, #20]
 8004020:	621a      	str	r2, [r3, #32]
}
 8004022:	bf00      	nop
 8004024:	371c      	adds	r7, #28
 8004026:	46bd      	mov	sp, r7
 8004028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402c:	4770      	bx	lr

0800402e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800402e:	b480      	push	{r7}
 8004030:	b085      	sub	sp, #20
 8004032:	af00      	add	r7, sp, #0
 8004034:	6078      	str	r0, [r7, #4]
 8004036:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	689b      	ldr	r3, [r3, #8]
 800403c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004044:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004046:	683a      	ldr	r2, [r7, #0]
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	4313      	orrs	r3, r2
 800404c:	f043 0307 	orr.w	r3, r3, #7
 8004050:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	68fa      	ldr	r2, [r7, #12]
 8004056:	609a      	str	r2, [r3, #8]
}
 8004058:	bf00      	nop
 800405a:	3714      	adds	r7, #20
 800405c:	46bd      	mov	sp, r7
 800405e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004062:	4770      	bx	lr

08004064 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004064:	b480      	push	{r7}
 8004066:	b087      	sub	sp, #28
 8004068:	af00      	add	r7, sp, #0
 800406a:	60f8      	str	r0, [r7, #12]
 800406c:	60b9      	str	r1, [r7, #8]
 800406e:	607a      	str	r2, [r7, #4]
 8004070:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	689b      	ldr	r3, [r3, #8]
 8004076:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004078:	697b      	ldr	r3, [r7, #20]
 800407a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800407e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	021a      	lsls	r2, r3, #8
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	431a      	orrs	r2, r3
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	4313      	orrs	r3, r2
 800408c:	697a      	ldr	r2, [r7, #20]
 800408e:	4313      	orrs	r3, r2
 8004090:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	697a      	ldr	r2, [r7, #20]
 8004096:	609a      	str	r2, [r3, #8]
}
 8004098:	bf00      	nop
 800409a:	371c      	adds	r7, #28
 800409c:	46bd      	mov	sp, r7
 800409e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a2:	4770      	bx	lr

080040a4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80040a4:	b480      	push	{r7}
 80040a6:	b087      	sub	sp, #28
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	60f8      	str	r0, [r7, #12]
 80040ac:	60b9      	str	r1, [r7, #8]
 80040ae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	f003 031f 	and.w	r3, r3, #31
 80040b6:	2201      	movs	r2, #1
 80040b8:	fa02 f303 	lsl.w	r3, r2, r3
 80040bc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	6a1a      	ldr	r2, [r3, #32]
 80040c2:	697b      	ldr	r3, [r7, #20]
 80040c4:	43db      	mvns	r3, r3
 80040c6:	401a      	ands	r2, r3
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	6a1a      	ldr	r2, [r3, #32]
 80040d0:	68bb      	ldr	r3, [r7, #8]
 80040d2:	f003 031f 	and.w	r3, r3, #31
 80040d6:	6879      	ldr	r1, [r7, #4]
 80040d8:	fa01 f303 	lsl.w	r3, r1, r3
 80040dc:	431a      	orrs	r2, r3
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	621a      	str	r2, [r3, #32]
}
 80040e2:	bf00      	nop
 80040e4:	371c      	adds	r7, #28
 80040e6:	46bd      	mov	sp, r7
 80040e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ec:	4770      	bx	lr
	...

080040f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80040f0:	b480      	push	{r7}
 80040f2:	b085      	sub	sp, #20
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
 80040f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004100:	2b01      	cmp	r3, #1
 8004102:	d101      	bne.n	8004108 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004104:	2302      	movs	r3, #2
 8004106:	e06d      	b.n	80041e4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2201      	movs	r2, #1
 800410c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2202      	movs	r2, #2
 8004114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	689b      	ldr	r3, [r3, #8]
 8004126:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a30      	ldr	r2, [pc, #192]	; (80041f0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d004      	beq.n	800413c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a2f      	ldr	r2, [pc, #188]	; (80041f4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d108      	bne.n	800414e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004142:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	68fa      	ldr	r2, [r7, #12]
 800414a:	4313      	orrs	r3, r2
 800414c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004154:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	68fa      	ldr	r2, [r7, #12]
 800415c:	4313      	orrs	r3, r2
 800415e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	68fa      	ldr	r2, [r7, #12]
 8004166:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a20      	ldr	r2, [pc, #128]	; (80041f0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d022      	beq.n	80041b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800417a:	d01d      	beq.n	80041b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4a1d      	ldr	r2, [pc, #116]	; (80041f8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d018      	beq.n	80041b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4a1c      	ldr	r2, [pc, #112]	; (80041fc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d013      	beq.n	80041b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a1a      	ldr	r2, [pc, #104]	; (8004200 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d00e      	beq.n	80041b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a15      	ldr	r2, [pc, #84]	; (80041f4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d009      	beq.n	80041b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a16      	ldr	r2, [pc, #88]	; (8004204 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d004      	beq.n	80041b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4a15      	ldr	r2, [pc, #84]	; (8004208 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d10c      	bne.n	80041d2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80041b8:	68bb      	ldr	r3, [r7, #8]
 80041ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80041be:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	689b      	ldr	r3, [r3, #8]
 80041c4:	68ba      	ldr	r2, [r7, #8]
 80041c6:	4313      	orrs	r3, r2
 80041c8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	68ba      	ldr	r2, [r7, #8]
 80041d0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2201      	movs	r2, #1
 80041d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2200      	movs	r2, #0
 80041de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80041e2:	2300      	movs	r3, #0
}
 80041e4:	4618      	mov	r0, r3
 80041e6:	3714      	adds	r7, #20
 80041e8:	46bd      	mov	sp, r7
 80041ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ee:	4770      	bx	lr
 80041f0:	40010000 	.word	0x40010000
 80041f4:	40010400 	.word	0x40010400
 80041f8:	40000400 	.word	0x40000400
 80041fc:	40000800 	.word	0x40000800
 8004200:	40000c00 	.word	0x40000c00
 8004204:	40014000 	.word	0x40014000
 8004208:	40001800 	.word	0x40001800

0800420c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800420c:	b480      	push	{r7}
 800420e:	b085      	sub	sp, #20
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
 8004214:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004216:	2300      	movs	r3, #0
 8004218:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004220:	2b01      	cmp	r3, #1
 8004222:	d101      	bne.n	8004228 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004224:	2302      	movs	r3, #2
 8004226:	e065      	b.n	80042f4 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2201      	movs	r2, #1
 800422c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	68db      	ldr	r3, [r3, #12]
 800423a:	4313      	orrs	r3, r2
 800423c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	689b      	ldr	r3, [r3, #8]
 8004248:	4313      	orrs	r3, r2
 800424a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	4313      	orrs	r3, r2
 8004258:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4313      	orrs	r3, r2
 8004266:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	691b      	ldr	r3, [r3, #16]
 8004272:	4313      	orrs	r3, r2
 8004274:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	695b      	ldr	r3, [r3, #20]
 8004280:	4313      	orrs	r3, r2
 8004282:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800428e:	4313      	orrs	r3, r2
 8004290:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	699b      	ldr	r3, [r3, #24]
 800429c:	041b      	lsls	r3, r3, #16
 800429e:	4313      	orrs	r3, r2
 80042a0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4a16      	ldr	r2, [pc, #88]	; (8004300 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d004      	beq.n	80042b6 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4a14      	ldr	r2, [pc, #80]	; (8004304 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d115      	bne.n	80042e2 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c0:	051b      	lsls	r3, r3, #20
 80042c2:	4313      	orrs	r3, r2
 80042c4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	69db      	ldr	r3, [r3, #28]
 80042d0:	4313      	orrs	r3, r2
 80042d2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	6a1b      	ldr	r3, [r3, #32]
 80042de:	4313      	orrs	r3, r2
 80042e0:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	68fa      	ldr	r2, [r7, #12]
 80042e8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2200      	movs	r2, #0
 80042ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80042f2:	2300      	movs	r3, #0
}
 80042f4:	4618      	mov	r0, r3
 80042f6:	3714      	adds	r7, #20
 80042f8:	46bd      	mov	sp, r7
 80042fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fe:	4770      	bx	lr
 8004300:	40010000 	.word	0x40010000
 8004304:	40010400 	.word	0x40010400

08004308 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b082      	sub	sp, #8
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d101      	bne.n	800431a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004316:	2301      	movs	r3, #1
 8004318:	e040      	b.n	800439c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800431e:	2b00      	cmp	r3, #0
 8004320:	d106      	bne.n	8004330 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2200      	movs	r2, #0
 8004326:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800432a:	6878      	ldr	r0, [r7, #4]
 800432c:	f7fc fda8 	bl	8000e80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2224      	movs	r2, #36	; 0x24
 8004334:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	681a      	ldr	r2, [r3, #0]
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f022 0201 	bic.w	r2, r2, #1
 8004344:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800434a:	2b00      	cmp	r3, #0
 800434c:	d002      	beq.n	8004354 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800434e:	6878      	ldr	r0, [r7, #4]
 8004350:	f000 fb16 	bl	8004980 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004354:	6878      	ldr	r0, [r7, #4]
 8004356:	f000 f8af 	bl	80044b8 <UART_SetConfig>
 800435a:	4603      	mov	r3, r0
 800435c:	2b01      	cmp	r3, #1
 800435e:	d101      	bne.n	8004364 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004360:	2301      	movs	r3, #1
 8004362:	e01b      	b.n	800439c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	685a      	ldr	r2, [r3, #4]
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004372:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	689a      	ldr	r2, [r3, #8]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004382:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	681a      	ldr	r2, [r3, #0]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f042 0201 	orr.w	r2, r2, #1
 8004392:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004394:	6878      	ldr	r0, [r7, #4]
 8004396:	f000 fb95 	bl	8004ac4 <UART_CheckIdleState>
 800439a:	4603      	mov	r3, r0
}
 800439c:	4618      	mov	r0, r3
 800439e:	3708      	adds	r7, #8
 80043a0:	46bd      	mov	sp, r7
 80043a2:	bd80      	pop	{r7, pc}

080043a4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b08a      	sub	sp, #40	; 0x28
 80043a8:	af02      	add	r7, sp, #8
 80043aa:	60f8      	str	r0, [r7, #12]
 80043ac:	60b9      	str	r1, [r7, #8]
 80043ae:	603b      	str	r3, [r7, #0]
 80043b0:	4613      	mov	r3, r2
 80043b2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80043b8:	2b20      	cmp	r3, #32
 80043ba:	d177      	bne.n	80044ac <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80043bc:	68bb      	ldr	r3, [r7, #8]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d002      	beq.n	80043c8 <HAL_UART_Transmit+0x24>
 80043c2:	88fb      	ldrh	r3, [r7, #6]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d101      	bne.n	80043cc <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80043c8:	2301      	movs	r3, #1
 80043ca:	e070      	b.n	80044ae <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	2200      	movs	r2, #0
 80043d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	2221      	movs	r2, #33	; 0x21
 80043d8:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80043da:	f7fc ff2d 	bl	8001238 <HAL_GetTick>
 80043de:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	88fa      	ldrh	r2, [r7, #6]
 80043e4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	88fa      	ldrh	r2, [r7, #6]
 80043ec:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	689b      	ldr	r3, [r3, #8]
 80043f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043f8:	d108      	bne.n	800440c <HAL_UART_Transmit+0x68>
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	691b      	ldr	r3, [r3, #16]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d104      	bne.n	800440c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004402:	2300      	movs	r3, #0
 8004404:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	61bb      	str	r3, [r7, #24]
 800440a:	e003      	b.n	8004414 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800440c:	68bb      	ldr	r3, [r7, #8]
 800440e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004410:	2300      	movs	r3, #0
 8004412:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004414:	e02f      	b.n	8004476 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	9300      	str	r3, [sp, #0]
 800441a:	697b      	ldr	r3, [r7, #20]
 800441c:	2200      	movs	r2, #0
 800441e:	2180      	movs	r1, #128	; 0x80
 8004420:	68f8      	ldr	r0, [r7, #12]
 8004422:	f000 fbf7 	bl	8004c14 <UART_WaitOnFlagUntilTimeout>
 8004426:	4603      	mov	r3, r0
 8004428:	2b00      	cmp	r3, #0
 800442a:	d004      	beq.n	8004436 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	2220      	movs	r2, #32
 8004430:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8004432:	2303      	movs	r3, #3
 8004434:	e03b      	b.n	80044ae <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8004436:	69fb      	ldr	r3, [r7, #28]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d10b      	bne.n	8004454 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800443c:	69bb      	ldr	r3, [r7, #24]
 800443e:	881b      	ldrh	r3, [r3, #0]
 8004440:	461a      	mov	r2, r3
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800444a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800444c:	69bb      	ldr	r3, [r7, #24]
 800444e:	3302      	adds	r3, #2
 8004450:	61bb      	str	r3, [r7, #24]
 8004452:	e007      	b.n	8004464 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004454:	69fb      	ldr	r3, [r7, #28]
 8004456:	781a      	ldrb	r2, [r3, #0]
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800445e:	69fb      	ldr	r3, [r7, #28]
 8004460:	3301      	adds	r3, #1
 8004462:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800446a:	b29b      	uxth	r3, r3
 800446c:	3b01      	subs	r3, #1
 800446e:	b29a      	uxth	r2, r3
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800447c:	b29b      	uxth	r3, r3
 800447e:	2b00      	cmp	r3, #0
 8004480:	d1c9      	bne.n	8004416 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	9300      	str	r3, [sp, #0]
 8004486:	697b      	ldr	r3, [r7, #20]
 8004488:	2200      	movs	r2, #0
 800448a:	2140      	movs	r1, #64	; 0x40
 800448c:	68f8      	ldr	r0, [r7, #12]
 800448e:	f000 fbc1 	bl	8004c14 <UART_WaitOnFlagUntilTimeout>
 8004492:	4603      	mov	r3, r0
 8004494:	2b00      	cmp	r3, #0
 8004496:	d004      	beq.n	80044a2 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	2220      	movs	r2, #32
 800449c:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 800449e:	2303      	movs	r3, #3
 80044a0:	e005      	b.n	80044ae <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	2220      	movs	r2, #32
 80044a6:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80044a8:	2300      	movs	r3, #0
 80044aa:	e000      	b.n	80044ae <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80044ac:	2302      	movs	r3, #2
  }
}
 80044ae:	4618      	mov	r0, r3
 80044b0:	3720      	adds	r7, #32
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bd80      	pop	{r7, pc}
	...

080044b8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b088      	sub	sp, #32
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80044c0:	2300      	movs	r3, #0
 80044c2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	689a      	ldr	r2, [r3, #8]
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	691b      	ldr	r3, [r3, #16]
 80044cc:	431a      	orrs	r2, r3
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	695b      	ldr	r3, [r3, #20]
 80044d2:	431a      	orrs	r2, r3
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	69db      	ldr	r3, [r3, #28]
 80044d8:	4313      	orrs	r3, r2
 80044da:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	681a      	ldr	r2, [r3, #0]
 80044e2:	4ba6      	ldr	r3, [pc, #664]	; (800477c <UART_SetConfig+0x2c4>)
 80044e4:	4013      	ands	r3, r2
 80044e6:	687a      	ldr	r2, [r7, #4]
 80044e8:	6812      	ldr	r2, [r2, #0]
 80044ea:	6979      	ldr	r1, [r7, #20]
 80044ec:	430b      	orrs	r3, r1
 80044ee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	68da      	ldr	r2, [r3, #12]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	430a      	orrs	r2, r1
 8004504:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	699b      	ldr	r3, [r3, #24]
 800450a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6a1b      	ldr	r3, [r3, #32]
 8004510:	697a      	ldr	r2, [r7, #20]
 8004512:	4313      	orrs	r3, r2
 8004514:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	689b      	ldr	r3, [r3, #8]
 800451c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	697a      	ldr	r2, [r7, #20]
 8004526:	430a      	orrs	r2, r1
 8004528:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4a94      	ldr	r2, [pc, #592]	; (8004780 <UART_SetConfig+0x2c8>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d120      	bne.n	8004576 <UART_SetConfig+0xbe>
 8004534:	4b93      	ldr	r3, [pc, #588]	; (8004784 <UART_SetConfig+0x2cc>)
 8004536:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800453a:	f003 0303 	and.w	r3, r3, #3
 800453e:	2b03      	cmp	r3, #3
 8004540:	d816      	bhi.n	8004570 <UART_SetConfig+0xb8>
 8004542:	a201      	add	r2, pc, #4	; (adr r2, 8004548 <UART_SetConfig+0x90>)
 8004544:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004548:	08004559 	.word	0x08004559
 800454c:	08004565 	.word	0x08004565
 8004550:	0800455f 	.word	0x0800455f
 8004554:	0800456b 	.word	0x0800456b
 8004558:	2301      	movs	r3, #1
 800455a:	77fb      	strb	r3, [r7, #31]
 800455c:	e150      	b.n	8004800 <UART_SetConfig+0x348>
 800455e:	2302      	movs	r3, #2
 8004560:	77fb      	strb	r3, [r7, #31]
 8004562:	e14d      	b.n	8004800 <UART_SetConfig+0x348>
 8004564:	2304      	movs	r3, #4
 8004566:	77fb      	strb	r3, [r7, #31]
 8004568:	e14a      	b.n	8004800 <UART_SetConfig+0x348>
 800456a:	2308      	movs	r3, #8
 800456c:	77fb      	strb	r3, [r7, #31]
 800456e:	e147      	b.n	8004800 <UART_SetConfig+0x348>
 8004570:	2310      	movs	r3, #16
 8004572:	77fb      	strb	r3, [r7, #31]
 8004574:	e144      	b.n	8004800 <UART_SetConfig+0x348>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4a83      	ldr	r2, [pc, #524]	; (8004788 <UART_SetConfig+0x2d0>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d132      	bne.n	80045e6 <UART_SetConfig+0x12e>
 8004580:	4b80      	ldr	r3, [pc, #512]	; (8004784 <UART_SetConfig+0x2cc>)
 8004582:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004586:	f003 030c 	and.w	r3, r3, #12
 800458a:	2b0c      	cmp	r3, #12
 800458c:	d828      	bhi.n	80045e0 <UART_SetConfig+0x128>
 800458e:	a201      	add	r2, pc, #4	; (adr r2, 8004594 <UART_SetConfig+0xdc>)
 8004590:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004594:	080045c9 	.word	0x080045c9
 8004598:	080045e1 	.word	0x080045e1
 800459c:	080045e1 	.word	0x080045e1
 80045a0:	080045e1 	.word	0x080045e1
 80045a4:	080045d5 	.word	0x080045d5
 80045a8:	080045e1 	.word	0x080045e1
 80045ac:	080045e1 	.word	0x080045e1
 80045b0:	080045e1 	.word	0x080045e1
 80045b4:	080045cf 	.word	0x080045cf
 80045b8:	080045e1 	.word	0x080045e1
 80045bc:	080045e1 	.word	0x080045e1
 80045c0:	080045e1 	.word	0x080045e1
 80045c4:	080045db 	.word	0x080045db
 80045c8:	2300      	movs	r3, #0
 80045ca:	77fb      	strb	r3, [r7, #31]
 80045cc:	e118      	b.n	8004800 <UART_SetConfig+0x348>
 80045ce:	2302      	movs	r3, #2
 80045d0:	77fb      	strb	r3, [r7, #31]
 80045d2:	e115      	b.n	8004800 <UART_SetConfig+0x348>
 80045d4:	2304      	movs	r3, #4
 80045d6:	77fb      	strb	r3, [r7, #31]
 80045d8:	e112      	b.n	8004800 <UART_SetConfig+0x348>
 80045da:	2308      	movs	r3, #8
 80045dc:	77fb      	strb	r3, [r7, #31]
 80045de:	e10f      	b.n	8004800 <UART_SetConfig+0x348>
 80045e0:	2310      	movs	r3, #16
 80045e2:	77fb      	strb	r3, [r7, #31]
 80045e4:	e10c      	b.n	8004800 <UART_SetConfig+0x348>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4a68      	ldr	r2, [pc, #416]	; (800478c <UART_SetConfig+0x2d4>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d120      	bne.n	8004632 <UART_SetConfig+0x17a>
 80045f0:	4b64      	ldr	r3, [pc, #400]	; (8004784 <UART_SetConfig+0x2cc>)
 80045f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045f6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80045fa:	2b30      	cmp	r3, #48	; 0x30
 80045fc:	d013      	beq.n	8004626 <UART_SetConfig+0x16e>
 80045fe:	2b30      	cmp	r3, #48	; 0x30
 8004600:	d814      	bhi.n	800462c <UART_SetConfig+0x174>
 8004602:	2b20      	cmp	r3, #32
 8004604:	d009      	beq.n	800461a <UART_SetConfig+0x162>
 8004606:	2b20      	cmp	r3, #32
 8004608:	d810      	bhi.n	800462c <UART_SetConfig+0x174>
 800460a:	2b00      	cmp	r3, #0
 800460c:	d002      	beq.n	8004614 <UART_SetConfig+0x15c>
 800460e:	2b10      	cmp	r3, #16
 8004610:	d006      	beq.n	8004620 <UART_SetConfig+0x168>
 8004612:	e00b      	b.n	800462c <UART_SetConfig+0x174>
 8004614:	2300      	movs	r3, #0
 8004616:	77fb      	strb	r3, [r7, #31]
 8004618:	e0f2      	b.n	8004800 <UART_SetConfig+0x348>
 800461a:	2302      	movs	r3, #2
 800461c:	77fb      	strb	r3, [r7, #31]
 800461e:	e0ef      	b.n	8004800 <UART_SetConfig+0x348>
 8004620:	2304      	movs	r3, #4
 8004622:	77fb      	strb	r3, [r7, #31]
 8004624:	e0ec      	b.n	8004800 <UART_SetConfig+0x348>
 8004626:	2308      	movs	r3, #8
 8004628:	77fb      	strb	r3, [r7, #31]
 800462a:	e0e9      	b.n	8004800 <UART_SetConfig+0x348>
 800462c:	2310      	movs	r3, #16
 800462e:	77fb      	strb	r3, [r7, #31]
 8004630:	e0e6      	b.n	8004800 <UART_SetConfig+0x348>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4a56      	ldr	r2, [pc, #344]	; (8004790 <UART_SetConfig+0x2d8>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d120      	bne.n	800467e <UART_SetConfig+0x1c6>
 800463c:	4b51      	ldr	r3, [pc, #324]	; (8004784 <UART_SetConfig+0x2cc>)
 800463e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004642:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004646:	2bc0      	cmp	r3, #192	; 0xc0
 8004648:	d013      	beq.n	8004672 <UART_SetConfig+0x1ba>
 800464a:	2bc0      	cmp	r3, #192	; 0xc0
 800464c:	d814      	bhi.n	8004678 <UART_SetConfig+0x1c0>
 800464e:	2b80      	cmp	r3, #128	; 0x80
 8004650:	d009      	beq.n	8004666 <UART_SetConfig+0x1ae>
 8004652:	2b80      	cmp	r3, #128	; 0x80
 8004654:	d810      	bhi.n	8004678 <UART_SetConfig+0x1c0>
 8004656:	2b00      	cmp	r3, #0
 8004658:	d002      	beq.n	8004660 <UART_SetConfig+0x1a8>
 800465a:	2b40      	cmp	r3, #64	; 0x40
 800465c:	d006      	beq.n	800466c <UART_SetConfig+0x1b4>
 800465e:	e00b      	b.n	8004678 <UART_SetConfig+0x1c0>
 8004660:	2300      	movs	r3, #0
 8004662:	77fb      	strb	r3, [r7, #31]
 8004664:	e0cc      	b.n	8004800 <UART_SetConfig+0x348>
 8004666:	2302      	movs	r3, #2
 8004668:	77fb      	strb	r3, [r7, #31]
 800466a:	e0c9      	b.n	8004800 <UART_SetConfig+0x348>
 800466c:	2304      	movs	r3, #4
 800466e:	77fb      	strb	r3, [r7, #31]
 8004670:	e0c6      	b.n	8004800 <UART_SetConfig+0x348>
 8004672:	2308      	movs	r3, #8
 8004674:	77fb      	strb	r3, [r7, #31]
 8004676:	e0c3      	b.n	8004800 <UART_SetConfig+0x348>
 8004678:	2310      	movs	r3, #16
 800467a:	77fb      	strb	r3, [r7, #31]
 800467c:	e0c0      	b.n	8004800 <UART_SetConfig+0x348>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4a44      	ldr	r2, [pc, #272]	; (8004794 <UART_SetConfig+0x2dc>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d125      	bne.n	80046d4 <UART_SetConfig+0x21c>
 8004688:	4b3e      	ldr	r3, [pc, #248]	; (8004784 <UART_SetConfig+0x2cc>)
 800468a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800468e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004692:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004696:	d017      	beq.n	80046c8 <UART_SetConfig+0x210>
 8004698:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800469c:	d817      	bhi.n	80046ce <UART_SetConfig+0x216>
 800469e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046a2:	d00b      	beq.n	80046bc <UART_SetConfig+0x204>
 80046a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046a8:	d811      	bhi.n	80046ce <UART_SetConfig+0x216>
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d003      	beq.n	80046b6 <UART_SetConfig+0x1fe>
 80046ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046b2:	d006      	beq.n	80046c2 <UART_SetConfig+0x20a>
 80046b4:	e00b      	b.n	80046ce <UART_SetConfig+0x216>
 80046b6:	2300      	movs	r3, #0
 80046b8:	77fb      	strb	r3, [r7, #31]
 80046ba:	e0a1      	b.n	8004800 <UART_SetConfig+0x348>
 80046bc:	2302      	movs	r3, #2
 80046be:	77fb      	strb	r3, [r7, #31]
 80046c0:	e09e      	b.n	8004800 <UART_SetConfig+0x348>
 80046c2:	2304      	movs	r3, #4
 80046c4:	77fb      	strb	r3, [r7, #31]
 80046c6:	e09b      	b.n	8004800 <UART_SetConfig+0x348>
 80046c8:	2308      	movs	r3, #8
 80046ca:	77fb      	strb	r3, [r7, #31]
 80046cc:	e098      	b.n	8004800 <UART_SetConfig+0x348>
 80046ce:	2310      	movs	r3, #16
 80046d0:	77fb      	strb	r3, [r7, #31]
 80046d2:	e095      	b.n	8004800 <UART_SetConfig+0x348>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4a2f      	ldr	r2, [pc, #188]	; (8004798 <UART_SetConfig+0x2e0>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d125      	bne.n	800472a <UART_SetConfig+0x272>
 80046de:	4b29      	ldr	r3, [pc, #164]	; (8004784 <UART_SetConfig+0x2cc>)
 80046e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046e4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80046e8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80046ec:	d017      	beq.n	800471e <UART_SetConfig+0x266>
 80046ee:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80046f2:	d817      	bhi.n	8004724 <UART_SetConfig+0x26c>
 80046f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046f8:	d00b      	beq.n	8004712 <UART_SetConfig+0x25a>
 80046fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046fe:	d811      	bhi.n	8004724 <UART_SetConfig+0x26c>
 8004700:	2b00      	cmp	r3, #0
 8004702:	d003      	beq.n	800470c <UART_SetConfig+0x254>
 8004704:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004708:	d006      	beq.n	8004718 <UART_SetConfig+0x260>
 800470a:	e00b      	b.n	8004724 <UART_SetConfig+0x26c>
 800470c:	2301      	movs	r3, #1
 800470e:	77fb      	strb	r3, [r7, #31]
 8004710:	e076      	b.n	8004800 <UART_SetConfig+0x348>
 8004712:	2302      	movs	r3, #2
 8004714:	77fb      	strb	r3, [r7, #31]
 8004716:	e073      	b.n	8004800 <UART_SetConfig+0x348>
 8004718:	2304      	movs	r3, #4
 800471a:	77fb      	strb	r3, [r7, #31]
 800471c:	e070      	b.n	8004800 <UART_SetConfig+0x348>
 800471e:	2308      	movs	r3, #8
 8004720:	77fb      	strb	r3, [r7, #31]
 8004722:	e06d      	b.n	8004800 <UART_SetConfig+0x348>
 8004724:	2310      	movs	r3, #16
 8004726:	77fb      	strb	r3, [r7, #31]
 8004728:	e06a      	b.n	8004800 <UART_SetConfig+0x348>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4a1b      	ldr	r2, [pc, #108]	; (800479c <UART_SetConfig+0x2e4>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d138      	bne.n	80047a6 <UART_SetConfig+0x2ee>
 8004734:	4b13      	ldr	r3, [pc, #76]	; (8004784 <UART_SetConfig+0x2cc>)
 8004736:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800473a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800473e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004742:	d017      	beq.n	8004774 <UART_SetConfig+0x2bc>
 8004744:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004748:	d82a      	bhi.n	80047a0 <UART_SetConfig+0x2e8>
 800474a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800474e:	d00b      	beq.n	8004768 <UART_SetConfig+0x2b0>
 8004750:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004754:	d824      	bhi.n	80047a0 <UART_SetConfig+0x2e8>
 8004756:	2b00      	cmp	r3, #0
 8004758:	d003      	beq.n	8004762 <UART_SetConfig+0x2aa>
 800475a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800475e:	d006      	beq.n	800476e <UART_SetConfig+0x2b6>
 8004760:	e01e      	b.n	80047a0 <UART_SetConfig+0x2e8>
 8004762:	2300      	movs	r3, #0
 8004764:	77fb      	strb	r3, [r7, #31]
 8004766:	e04b      	b.n	8004800 <UART_SetConfig+0x348>
 8004768:	2302      	movs	r3, #2
 800476a:	77fb      	strb	r3, [r7, #31]
 800476c:	e048      	b.n	8004800 <UART_SetConfig+0x348>
 800476e:	2304      	movs	r3, #4
 8004770:	77fb      	strb	r3, [r7, #31]
 8004772:	e045      	b.n	8004800 <UART_SetConfig+0x348>
 8004774:	2308      	movs	r3, #8
 8004776:	77fb      	strb	r3, [r7, #31]
 8004778:	e042      	b.n	8004800 <UART_SetConfig+0x348>
 800477a:	bf00      	nop
 800477c:	efff69f3 	.word	0xefff69f3
 8004780:	40011000 	.word	0x40011000
 8004784:	40023800 	.word	0x40023800
 8004788:	40004400 	.word	0x40004400
 800478c:	40004800 	.word	0x40004800
 8004790:	40004c00 	.word	0x40004c00
 8004794:	40005000 	.word	0x40005000
 8004798:	40011400 	.word	0x40011400
 800479c:	40007800 	.word	0x40007800
 80047a0:	2310      	movs	r3, #16
 80047a2:	77fb      	strb	r3, [r7, #31]
 80047a4:	e02c      	b.n	8004800 <UART_SetConfig+0x348>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a72      	ldr	r2, [pc, #456]	; (8004974 <UART_SetConfig+0x4bc>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d125      	bne.n	80047fc <UART_SetConfig+0x344>
 80047b0:	4b71      	ldr	r3, [pc, #452]	; (8004978 <UART_SetConfig+0x4c0>)
 80047b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047b6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80047ba:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80047be:	d017      	beq.n	80047f0 <UART_SetConfig+0x338>
 80047c0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80047c4:	d817      	bhi.n	80047f6 <UART_SetConfig+0x33e>
 80047c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047ca:	d00b      	beq.n	80047e4 <UART_SetConfig+0x32c>
 80047cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047d0:	d811      	bhi.n	80047f6 <UART_SetConfig+0x33e>
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d003      	beq.n	80047de <UART_SetConfig+0x326>
 80047d6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80047da:	d006      	beq.n	80047ea <UART_SetConfig+0x332>
 80047dc:	e00b      	b.n	80047f6 <UART_SetConfig+0x33e>
 80047de:	2300      	movs	r3, #0
 80047e0:	77fb      	strb	r3, [r7, #31]
 80047e2:	e00d      	b.n	8004800 <UART_SetConfig+0x348>
 80047e4:	2302      	movs	r3, #2
 80047e6:	77fb      	strb	r3, [r7, #31]
 80047e8:	e00a      	b.n	8004800 <UART_SetConfig+0x348>
 80047ea:	2304      	movs	r3, #4
 80047ec:	77fb      	strb	r3, [r7, #31]
 80047ee:	e007      	b.n	8004800 <UART_SetConfig+0x348>
 80047f0:	2308      	movs	r3, #8
 80047f2:	77fb      	strb	r3, [r7, #31]
 80047f4:	e004      	b.n	8004800 <UART_SetConfig+0x348>
 80047f6:	2310      	movs	r3, #16
 80047f8:	77fb      	strb	r3, [r7, #31]
 80047fa:	e001      	b.n	8004800 <UART_SetConfig+0x348>
 80047fc:	2310      	movs	r3, #16
 80047fe:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	69db      	ldr	r3, [r3, #28]
 8004804:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004808:	d15b      	bne.n	80048c2 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800480a:	7ffb      	ldrb	r3, [r7, #31]
 800480c:	2b08      	cmp	r3, #8
 800480e:	d828      	bhi.n	8004862 <UART_SetConfig+0x3aa>
 8004810:	a201      	add	r2, pc, #4	; (adr r2, 8004818 <UART_SetConfig+0x360>)
 8004812:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004816:	bf00      	nop
 8004818:	0800483d 	.word	0x0800483d
 800481c:	08004845 	.word	0x08004845
 8004820:	0800484d 	.word	0x0800484d
 8004824:	08004863 	.word	0x08004863
 8004828:	08004853 	.word	0x08004853
 800482c:	08004863 	.word	0x08004863
 8004830:	08004863 	.word	0x08004863
 8004834:	08004863 	.word	0x08004863
 8004838:	0800485b 	.word	0x0800485b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800483c:	f7fe f8b4 	bl	80029a8 <HAL_RCC_GetPCLK1Freq>
 8004840:	61b8      	str	r0, [r7, #24]
        break;
 8004842:	e013      	b.n	800486c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004844:	f7fe f8c4 	bl	80029d0 <HAL_RCC_GetPCLK2Freq>
 8004848:	61b8      	str	r0, [r7, #24]
        break;
 800484a:	e00f      	b.n	800486c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800484c:	4b4b      	ldr	r3, [pc, #300]	; (800497c <UART_SetConfig+0x4c4>)
 800484e:	61bb      	str	r3, [r7, #24]
        break;
 8004850:	e00c      	b.n	800486c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004852:	f7fd ff99 	bl	8002788 <HAL_RCC_GetSysClockFreq>
 8004856:	61b8      	str	r0, [r7, #24]
        break;
 8004858:	e008      	b.n	800486c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800485a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800485e:	61bb      	str	r3, [r7, #24]
        break;
 8004860:	e004      	b.n	800486c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8004862:	2300      	movs	r3, #0
 8004864:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004866:	2301      	movs	r3, #1
 8004868:	77bb      	strb	r3, [r7, #30]
        break;
 800486a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800486c:	69bb      	ldr	r3, [r7, #24]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d074      	beq.n	800495c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004872:	69bb      	ldr	r3, [r7, #24]
 8004874:	005a      	lsls	r2, r3, #1
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	085b      	lsrs	r3, r3, #1
 800487c:	441a      	add	r2, r3
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	685b      	ldr	r3, [r3, #4]
 8004882:	fbb2 f3f3 	udiv	r3, r2, r3
 8004886:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004888:	693b      	ldr	r3, [r7, #16]
 800488a:	2b0f      	cmp	r3, #15
 800488c:	d916      	bls.n	80048bc <UART_SetConfig+0x404>
 800488e:	693b      	ldr	r3, [r7, #16]
 8004890:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004894:	d212      	bcs.n	80048bc <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004896:	693b      	ldr	r3, [r7, #16]
 8004898:	b29b      	uxth	r3, r3
 800489a:	f023 030f 	bic.w	r3, r3, #15
 800489e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80048a0:	693b      	ldr	r3, [r7, #16]
 80048a2:	085b      	lsrs	r3, r3, #1
 80048a4:	b29b      	uxth	r3, r3
 80048a6:	f003 0307 	and.w	r3, r3, #7
 80048aa:	b29a      	uxth	r2, r3
 80048ac:	89fb      	ldrh	r3, [r7, #14]
 80048ae:	4313      	orrs	r3, r2
 80048b0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	89fa      	ldrh	r2, [r7, #14]
 80048b8:	60da      	str	r2, [r3, #12]
 80048ba:	e04f      	b.n	800495c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80048bc:	2301      	movs	r3, #1
 80048be:	77bb      	strb	r3, [r7, #30]
 80048c0:	e04c      	b.n	800495c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80048c2:	7ffb      	ldrb	r3, [r7, #31]
 80048c4:	2b08      	cmp	r3, #8
 80048c6:	d828      	bhi.n	800491a <UART_SetConfig+0x462>
 80048c8:	a201      	add	r2, pc, #4	; (adr r2, 80048d0 <UART_SetConfig+0x418>)
 80048ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048ce:	bf00      	nop
 80048d0:	080048f5 	.word	0x080048f5
 80048d4:	080048fd 	.word	0x080048fd
 80048d8:	08004905 	.word	0x08004905
 80048dc:	0800491b 	.word	0x0800491b
 80048e0:	0800490b 	.word	0x0800490b
 80048e4:	0800491b 	.word	0x0800491b
 80048e8:	0800491b 	.word	0x0800491b
 80048ec:	0800491b 	.word	0x0800491b
 80048f0:	08004913 	.word	0x08004913
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80048f4:	f7fe f858 	bl	80029a8 <HAL_RCC_GetPCLK1Freq>
 80048f8:	61b8      	str	r0, [r7, #24]
        break;
 80048fa:	e013      	b.n	8004924 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80048fc:	f7fe f868 	bl	80029d0 <HAL_RCC_GetPCLK2Freq>
 8004900:	61b8      	str	r0, [r7, #24]
        break;
 8004902:	e00f      	b.n	8004924 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004904:	4b1d      	ldr	r3, [pc, #116]	; (800497c <UART_SetConfig+0x4c4>)
 8004906:	61bb      	str	r3, [r7, #24]
        break;
 8004908:	e00c      	b.n	8004924 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800490a:	f7fd ff3d 	bl	8002788 <HAL_RCC_GetSysClockFreq>
 800490e:	61b8      	str	r0, [r7, #24]
        break;
 8004910:	e008      	b.n	8004924 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004912:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004916:	61bb      	str	r3, [r7, #24]
        break;
 8004918:	e004      	b.n	8004924 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800491a:	2300      	movs	r3, #0
 800491c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800491e:	2301      	movs	r3, #1
 8004920:	77bb      	strb	r3, [r7, #30]
        break;
 8004922:	bf00      	nop
    }

    if (pclk != 0U)
 8004924:	69bb      	ldr	r3, [r7, #24]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d018      	beq.n	800495c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	685b      	ldr	r3, [r3, #4]
 800492e:	085a      	lsrs	r2, r3, #1
 8004930:	69bb      	ldr	r3, [r7, #24]
 8004932:	441a      	add	r2, r3
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	685b      	ldr	r3, [r3, #4]
 8004938:	fbb2 f3f3 	udiv	r3, r2, r3
 800493c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800493e:	693b      	ldr	r3, [r7, #16]
 8004940:	2b0f      	cmp	r3, #15
 8004942:	d909      	bls.n	8004958 <UART_SetConfig+0x4a0>
 8004944:	693b      	ldr	r3, [r7, #16]
 8004946:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800494a:	d205      	bcs.n	8004958 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800494c:	693b      	ldr	r3, [r7, #16]
 800494e:	b29a      	uxth	r2, r3
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	60da      	str	r2, [r3, #12]
 8004956:	e001      	b.n	800495c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004958:	2301      	movs	r3, #1
 800495a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2200      	movs	r2, #0
 8004960:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2200      	movs	r2, #0
 8004966:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004968:	7fbb      	ldrb	r3, [r7, #30]
}
 800496a:	4618      	mov	r0, r3
 800496c:	3720      	adds	r7, #32
 800496e:	46bd      	mov	sp, r7
 8004970:	bd80      	pop	{r7, pc}
 8004972:	bf00      	nop
 8004974:	40007c00 	.word	0x40007c00
 8004978:	40023800 	.word	0x40023800
 800497c:	00f42400 	.word	0x00f42400

08004980 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004980:	b480      	push	{r7}
 8004982:	b083      	sub	sp, #12
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800498c:	f003 0308 	and.w	r3, r3, #8
 8004990:	2b00      	cmp	r3, #0
 8004992:	d00a      	beq.n	80049aa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	685b      	ldr	r3, [r3, #4]
 800499a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	430a      	orrs	r2, r1
 80049a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ae:	f003 0301 	and.w	r3, r3, #1
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d00a      	beq.n	80049cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	685b      	ldr	r3, [r3, #4]
 80049bc:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	430a      	orrs	r2, r1
 80049ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d0:	f003 0302 	and.w	r3, r3, #2
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d00a      	beq.n	80049ee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	430a      	orrs	r2, r1
 80049ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049f2:	f003 0304 	and.w	r3, r3, #4
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d00a      	beq.n	8004a10 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	685b      	ldr	r3, [r3, #4]
 8004a00:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	430a      	orrs	r2, r1
 8004a0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a14:	f003 0310 	and.w	r3, r3, #16
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d00a      	beq.n	8004a32 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	689b      	ldr	r3, [r3, #8]
 8004a22:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	430a      	orrs	r2, r1
 8004a30:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a36:	f003 0320 	and.w	r3, r3, #32
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d00a      	beq.n	8004a54 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	689b      	ldr	r3, [r3, #8]
 8004a44:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	430a      	orrs	r2, r1
 8004a52:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d01a      	beq.n	8004a96 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	430a      	orrs	r2, r1
 8004a74:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a7a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a7e:	d10a      	bne.n	8004a96 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	430a      	orrs	r2, r1
 8004a94:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d00a      	beq.n	8004ab8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	430a      	orrs	r2, r1
 8004ab6:	605a      	str	r2, [r3, #4]
  }
}
 8004ab8:	bf00      	nop
 8004aba:	370c      	adds	r7, #12
 8004abc:	46bd      	mov	sp, r7
 8004abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac2:	4770      	bx	lr

08004ac4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b098      	sub	sp, #96	; 0x60
 8004ac8:	af02      	add	r7, sp, #8
 8004aca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2200      	movs	r2, #0
 8004ad0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004ad4:	f7fc fbb0 	bl	8001238 <HAL_GetTick>
 8004ad8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f003 0308 	and.w	r3, r3, #8
 8004ae4:	2b08      	cmp	r3, #8
 8004ae6:	d12e      	bne.n	8004b46 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ae8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004aec:	9300      	str	r3, [sp, #0]
 8004aee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004af0:	2200      	movs	r2, #0
 8004af2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004af6:	6878      	ldr	r0, [r7, #4]
 8004af8:	f000 f88c 	bl	8004c14 <UART_WaitOnFlagUntilTimeout>
 8004afc:	4603      	mov	r3, r0
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d021      	beq.n	8004b46 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b0a:	e853 3f00 	ldrex	r3, [r3]
 8004b0e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004b10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b12:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b16:	653b      	str	r3, [r7, #80]	; 0x50
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	461a      	mov	r2, r3
 8004b1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b20:	647b      	str	r3, [r7, #68]	; 0x44
 8004b22:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b24:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004b26:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004b28:	e841 2300 	strex	r3, r2, [r1]
 8004b2c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004b2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d1e6      	bne.n	8004b02 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2220      	movs	r2, #32
 8004b38:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b42:	2303      	movs	r3, #3
 8004b44:	e062      	b.n	8004c0c <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f003 0304 	and.w	r3, r3, #4
 8004b50:	2b04      	cmp	r3, #4
 8004b52:	d149      	bne.n	8004be8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b54:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004b58:	9300      	str	r3, [sp, #0]
 8004b5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004b62:	6878      	ldr	r0, [r7, #4]
 8004b64:	f000 f856 	bl	8004c14 <UART_WaitOnFlagUntilTimeout>
 8004b68:	4603      	mov	r3, r0
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d03c      	beq.n	8004be8 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b76:	e853 3f00 	ldrex	r3, [r3]
 8004b7a:	623b      	str	r3, [r7, #32]
   return(result);
 8004b7c:	6a3b      	ldr	r3, [r7, #32]
 8004b7e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004b82:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	461a      	mov	r2, r3
 8004b8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b8c:	633b      	str	r3, [r7, #48]	; 0x30
 8004b8e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b90:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004b92:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b94:	e841 2300 	strex	r3, r2, [r1]
 8004b98:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004b9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d1e6      	bne.n	8004b6e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	3308      	adds	r3, #8
 8004ba6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ba8:	693b      	ldr	r3, [r7, #16]
 8004baa:	e853 3f00 	ldrex	r3, [r3]
 8004bae:	60fb      	str	r3, [r7, #12]
   return(result);
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	f023 0301 	bic.w	r3, r3, #1
 8004bb6:	64bb      	str	r3, [r7, #72]	; 0x48
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	3308      	adds	r3, #8
 8004bbe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004bc0:	61fa      	str	r2, [r7, #28]
 8004bc2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bc4:	69b9      	ldr	r1, [r7, #24]
 8004bc6:	69fa      	ldr	r2, [r7, #28]
 8004bc8:	e841 2300 	strex	r3, r2, [r1]
 8004bcc:	617b      	str	r3, [r7, #20]
   return(result);
 8004bce:	697b      	ldr	r3, [r7, #20]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d1e5      	bne.n	8004ba0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2220      	movs	r2, #32
 8004bd8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2200      	movs	r2, #0
 8004be0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004be4:	2303      	movs	r3, #3
 8004be6:	e011      	b.n	8004c0c <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2220      	movs	r2, #32
 8004bec:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2220      	movs	r2, #32
 8004bf2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2200      	movs	r2, #0
 8004c00:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2200      	movs	r2, #0
 8004c06:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004c0a:	2300      	movs	r3, #0
}
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	3758      	adds	r7, #88	; 0x58
 8004c10:	46bd      	mov	sp, r7
 8004c12:	bd80      	pop	{r7, pc}

08004c14 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b084      	sub	sp, #16
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	60f8      	str	r0, [r7, #12]
 8004c1c:	60b9      	str	r1, [r7, #8]
 8004c1e:	603b      	str	r3, [r7, #0]
 8004c20:	4613      	mov	r3, r2
 8004c22:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c24:	e04f      	b.n	8004cc6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c26:	69bb      	ldr	r3, [r7, #24]
 8004c28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c2c:	d04b      	beq.n	8004cc6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c2e:	f7fc fb03 	bl	8001238 <HAL_GetTick>
 8004c32:	4602      	mov	r2, r0
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	1ad3      	subs	r3, r2, r3
 8004c38:	69ba      	ldr	r2, [r7, #24]
 8004c3a:	429a      	cmp	r2, r3
 8004c3c:	d302      	bcc.n	8004c44 <UART_WaitOnFlagUntilTimeout+0x30>
 8004c3e:	69bb      	ldr	r3, [r7, #24]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d101      	bne.n	8004c48 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004c44:	2303      	movs	r3, #3
 8004c46:	e04e      	b.n	8004ce6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f003 0304 	and.w	r3, r3, #4
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d037      	beq.n	8004cc6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	2b80      	cmp	r3, #128	; 0x80
 8004c5a:	d034      	beq.n	8004cc6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	2b40      	cmp	r3, #64	; 0x40
 8004c60:	d031      	beq.n	8004cc6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	69db      	ldr	r3, [r3, #28]
 8004c68:	f003 0308 	and.w	r3, r3, #8
 8004c6c:	2b08      	cmp	r3, #8
 8004c6e:	d110      	bne.n	8004c92 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	2208      	movs	r2, #8
 8004c76:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004c78:	68f8      	ldr	r0, [r7, #12]
 8004c7a:	f000 f838 	bl	8004cee <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	2208      	movs	r2, #8
 8004c82:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	2200      	movs	r2, #0
 8004c8a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8004c8e:	2301      	movs	r3, #1
 8004c90:	e029      	b.n	8004ce6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	69db      	ldr	r3, [r3, #28]
 8004c98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c9c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ca0:	d111      	bne.n	8004cc6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004caa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004cac:	68f8      	ldr	r0, [r7, #12]
 8004cae:	f000 f81e 	bl	8004cee <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	2220      	movs	r2, #32
 8004cb6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004cc2:	2303      	movs	r3, #3
 8004cc4:	e00f      	b.n	8004ce6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	69da      	ldr	r2, [r3, #28]
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	4013      	ands	r3, r2
 8004cd0:	68ba      	ldr	r2, [r7, #8]
 8004cd2:	429a      	cmp	r2, r3
 8004cd4:	bf0c      	ite	eq
 8004cd6:	2301      	moveq	r3, #1
 8004cd8:	2300      	movne	r3, #0
 8004cda:	b2db      	uxtb	r3, r3
 8004cdc:	461a      	mov	r2, r3
 8004cde:	79fb      	ldrb	r3, [r7, #7]
 8004ce0:	429a      	cmp	r2, r3
 8004ce2:	d0a0      	beq.n	8004c26 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004ce4:	2300      	movs	r3, #0
}
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	3710      	adds	r7, #16
 8004cea:	46bd      	mov	sp, r7
 8004cec:	bd80      	pop	{r7, pc}

08004cee <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004cee:	b480      	push	{r7}
 8004cf0:	b095      	sub	sp, #84	; 0x54
 8004cf2:	af00      	add	r7, sp, #0
 8004cf4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cfe:	e853 3f00 	ldrex	r3, [r3]
 8004d02:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004d04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d06:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004d0a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	461a      	mov	r2, r3
 8004d12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d14:	643b      	str	r3, [r7, #64]	; 0x40
 8004d16:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d18:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004d1a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004d1c:	e841 2300 	strex	r3, r2, [r1]
 8004d20:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004d22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d1e6      	bne.n	8004cf6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	3308      	adds	r3, #8
 8004d2e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d30:	6a3b      	ldr	r3, [r7, #32]
 8004d32:	e853 3f00 	ldrex	r3, [r3]
 8004d36:	61fb      	str	r3, [r7, #28]
   return(result);
 8004d38:	69fb      	ldr	r3, [r7, #28]
 8004d3a:	f023 0301 	bic.w	r3, r3, #1
 8004d3e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	3308      	adds	r3, #8
 8004d46:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004d48:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004d4a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d4c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004d4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d50:	e841 2300 	strex	r3, r2, [r1]
 8004d54:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d1e5      	bne.n	8004d28 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d60:	2b01      	cmp	r3, #1
 8004d62:	d118      	bne.n	8004d96 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	e853 3f00 	ldrex	r3, [r3]
 8004d70:	60bb      	str	r3, [r7, #8]
   return(result);
 8004d72:	68bb      	ldr	r3, [r7, #8]
 8004d74:	f023 0310 	bic.w	r3, r3, #16
 8004d78:	647b      	str	r3, [r7, #68]	; 0x44
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	461a      	mov	r2, r3
 8004d80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d82:	61bb      	str	r3, [r7, #24]
 8004d84:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d86:	6979      	ldr	r1, [r7, #20]
 8004d88:	69ba      	ldr	r2, [r7, #24]
 8004d8a:	e841 2300 	strex	r3, r2, [r1]
 8004d8e:	613b      	str	r3, [r7, #16]
   return(result);
 8004d90:	693b      	ldr	r3, [r7, #16]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d1e6      	bne.n	8004d64 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2220      	movs	r2, #32
 8004d9a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2200      	movs	r2, #0
 8004da2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2200      	movs	r2, #0
 8004da8:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004daa:	bf00      	nop
 8004dac:	3754      	adds	r7, #84	; 0x54
 8004dae:	46bd      	mov	sp, r7
 8004db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db4:	4770      	bx	lr

08004db6 <__cvt>:
 8004db6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004db8:	ed2d 8b02 	vpush	{d8}
 8004dbc:	eeb0 8b40 	vmov.f64	d8, d0
 8004dc0:	b085      	sub	sp, #20
 8004dc2:	4617      	mov	r7, r2
 8004dc4:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8004dc6:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8004dc8:	ee18 2a90 	vmov	r2, s17
 8004dcc:	f025 0520 	bic.w	r5, r5, #32
 8004dd0:	2a00      	cmp	r2, #0
 8004dd2:	bfb6      	itet	lt
 8004dd4:	222d      	movlt	r2, #45	; 0x2d
 8004dd6:	2200      	movge	r2, #0
 8004dd8:	eeb1 8b40 	vneglt.f64	d8, d0
 8004ddc:	2d46      	cmp	r5, #70	; 0x46
 8004dde:	460c      	mov	r4, r1
 8004de0:	701a      	strb	r2, [r3, #0]
 8004de2:	d004      	beq.n	8004dee <__cvt+0x38>
 8004de4:	2d45      	cmp	r5, #69	; 0x45
 8004de6:	d100      	bne.n	8004dea <__cvt+0x34>
 8004de8:	3401      	adds	r4, #1
 8004dea:	2102      	movs	r1, #2
 8004dec:	e000      	b.n	8004df0 <__cvt+0x3a>
 8004dee:	2103      	movs	r1, #3
 8004df0:	ab03      	add	r3, sp, #12
 8004df2:	9301      	str	r3, [sp, #4]
 8004df4:	ab02      	add	r3, sp, #8
 8004df6:	9300      	str	r3, [sp, #0]
 8004df8:	4622      	mov	r2, r4
 8004dfa:	4633      	mov	r3, r6
 8004dfc:	eeb0 0b48 	vmov.f64	d0, d8
 8004e00:	f000 fe42 	bl	8005a88 <_dtoa_r>
 8004e04:	2d47      	cmp	r5, #71	; 0x47
 8004e06:	d101      	bne.n	8004e0c <__cvt+0x56>
 8004e08:	07fb      	lsls	r3, r7, #31
 8004e0a:	d51a      	bpl.n	8004e42 <__cvt+0x8c>
 8004e0c:	2d46      	cmp	r5, #70	; 0x46
 8004e0e:	eb00 0204 	add.w	r2, r0, r4
 8004e12:	d10c      	bne.n	8004e2e <__cvt+0x78>
 8004e14:	7803      	ldrb	r3, [r0, #0]
 8004e16:	2b30      	cmp	r3, #48	; 0x30
 8004e18:	d107      	bne.n	8004e2a <__cvt+0x74>
 8004e1a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8004e1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e22:	bf1c      	itt	ne
 8004e24:	f1c4 0401 	rsbne	r4, r4, #1
 8004e28:	6034      	strne	r4, [r6, #0]
 8004e2a:	6833      	ldr	r3, [r6, #0]
 8004e2c:	441a      	add	r2, r3
 8004e2e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8004e32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e36:	bf08      	it	eq
 8004e38:	9203      	streq	r2, [sp, #12]
 8004e3a:	2130      	movs	r1, #48	; 0x30
 8004e3c:	9b03      	ldr	r3, [sp, #12]
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d307      	bcc.n	8004e52 <__cvt+0x9c>
 8004e42:	9b03      	ldr	r3, [sp, #12]
 8004e44:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004e46:	1a1b      	subs	r3, r3, r0
 8004e48:	6013      	str	r3, [r2, #0]
 8004e4a:	b005      	add	sp, #20
 8004e4c:	ecbd 8b02 	vpop	{d8}
 8004e50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e52:	1c5c      	adds	r4, r3, #1
 8004e54:	9403      	str	r4, [sp, #12]
 8004e56:	7019      	strb	r1, [r3, #0]
 8004e58:	e7f0      	b.n	8004e3c <__cvt+0x86>

08004e5a <__exponent>:
 8004e5a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004e5c:	4603      	mov	r3, r0
 8004e5e:	2900      	cmp	r1, #0
 8004e60:	bfb8      	it	lt
 8004e62:	4249      	neglt	r1, r1
 8004e64:	f803 2b02 	strb.w	r2, [r3], #2
 8004e68:	bfb4      	ite	lt
 8004e6a:	222d      	movlt	r2, #45	; 0x2d
 8004e6c:	222b      	movge	r2, #43	; 0x2b
 8004e6e:	2909      	cmp	r1, #9
 8004e70:	7042      	strb	r2, [r0, #1]
 8004e72:	dd2a      	ble.n	8004eca <__exponent+0x70>
 8004e74:	f10d 0207 	add.w	r2, sp, #7
 8004e78:	4617      	mov	r7, r2
 8004e7a:	260a      	movs	r6, #10
 8004e7c:	4694      	mov	ip, r2
 8004e7e:	fb91 f5f6 	sdiv	r5, r1, r6
 8004e82:	fb06 1415 	mls	r4, r6, r5, r1
 8004e86:	3430      	adds	r4, #48	; 0x30
 8004e88:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8004e8c:	460c      	mov	r4, r1
 8004e8e:	2c63      	cmp	r4, #99	; 0x63
 8004e90:	f102 32ff 	add.w	r2, r2, #4294967295
 8004e94:	4629      	mov	r1, r5
 8004e96:	dcf1      	bgt.n	8004e7c <__exponent+0x22>
 8004e98:	3130      	adds	r1, #48	; 0x30
 8004e9a:	f1ac 0402 	sub.w	r4, ip, #2
 8004e9e:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004ea2:	1c41      	adds	r1, r0, #1
 8004ea4:	4622      	mov	r2, r4
 8004ea6:	42ba      	cmp	r2, r7
 8004ea8:	d30a      	bcc.n	8004ec0 <__exponent+0x66>
 8004eaa:	f10d 0209 	add.w	r2, sp, #9
 8004eae:	eba2 020c 	sub.w	r2, r2, ip
 8004eb2:	42bc      	cmp	r4, r7
 8004eb4:	bf88      	it	hi
 8004eb6:	2200      	movhi	r2, #0
 8004eb8:	4413      	add	r3, r2
 8004eba:	1a18      	subs	r0, r3, r0
 8004ebc:	b003      	add	sp, #12
 8004ebe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ec0:	f812 5b01 	ldrb.w	r5, [r2], #1
 8004ec4:	f801 5f01 	strb.w	r5, [r1, #1]!
 8004ec8:	e7ed      	b.n	8004ea6 <__exponent+0x4c>
 8004eca:	2330      	movs	r3, #48	; 0x30
 8004ecc:	3130      	adds	r1, #48	; 0x30
 8004ece:	7083      	strb	r3, [r0, #2]
 8004ed0:	70c1      	strb	r1, [r0, #3]
 8004ed2:	1d03      	adds	r3, r0, #4
 8004ed4:	e7f1      	b.n	8004eba <__exponent+0x60>
	...

08004ed8 <_printf_float>:
 8004ed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004edc:	b08b      	sub	sp, #44	; 0x2c
 8004ede:	460c      	mov	r4, r1
 8004ee0:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8004ee4:	4616      	mov	r6, r2
 8004ee6:	461f      	mov	r7, r3
 8004ee8:	4605      	mov	r5, r0
 8004eea:	f000 fccd 	bl	8005888 <_localeconv_r>
 8004eee:	f8d0 b000 	ldr.w	fp, [r0]
 8004ef2:	4658      	mov	r0, fp
 8004ef4:	f7fb f9f4 	bl	80002e0 <strlen>
 8004ef8:	2300      	movs	r3, #0
 8004efa:	9308      	str	r3, [sp, #32]
 8004efc:	f8d8 3000 	ldr.w	r3, [r8]
 8004f00:	f894 9018 	ldrb.w	r9, [r4, #24]
 8004f04:	6822      	ldr	r2, [r4, #0]
 8004f06:	3307      	adds	r3, #7
 8004f08:	f023 0307 	bic.w	r3, r3, #7
 8004f0c:	f103 0108 	add.w	r1, r3, #8
 8004f10:	f8c8 1000 	str.w	r1, [r8]
 8004f14:	ed93 0b00 	vldr	d0, [r3]
 8004f18:	ed9f 6b97 	vldr	d6, [pc, #604]	; 8005178 <_printf_float+0x2a0>
 8004f1c:	eeb0 7bc0 	vabs.f64	d7, d0
 8004f20:	eeb4 7b46 	vcmp.f64	d7, d6
 8004f24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f28:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 8004f2c:	4682      	mov	sl, r0
 8004f2e:	dd24      	ble.n	8004f7a <_printf_float+0xa2>
 8004f30:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8004f34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f38:	d502      	bpl.n	8004f40 <_printf_float+0x68>
 8004f3a:	232d      	movs	r3, #45	; 0x2d
 8004f3c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f40:	498f      	ldr	r1, [pc, #572]	; (8005180 <_printf_float+0x2a8>)
 8004f42:	4b90      	ldr	r3, [pc, #576]	; (8005184 <_printf_float+0x2ac>)
 8004f44:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8004f48:	bf94      	ite	ls
 8004f4a:	4688      	movls	r8, r1
 8004f4c:	4698      	movhi	r8, r3
 8004f4e:	2303      	movs	r3, #3
 8004f50:	6123      	str	r3, [r4, #16]
 8004f52:	f022 0204 	bic.w	r2, r2, #4
 8004f56:	2300      	movs	r3, #0
 8004f58:	6022      	str	r2, [r4, #0]
 8004f5a:	9304      	str	r3, [sp, #16]
 8004f5c:	9700      	str	r7, [sp, #0]
 8004f5e:	4633      	mov	r3, r6
 8004f60:	aa09      	add	r2, sp, #36	; 0x24
 8004f62:	4621      	mov	r1, r4
 8004f64:	4628      	mov	r0, r5
 8004f66:	f000 f9d1 	bl	800530c <_printf_common>
 8004f6a:	3001      	adds	r0, #1
 8004f6c:	f040 808a 	bne.w	8005084 <_printf_float+0x1ac>
 8004f70:	f04f 30ff 	mov.w	r0, #4294967295
 8004f74:	b00b      	add	sp, #44	; 0x2c
 8004f76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f7a:	eeb4 0b40 	vcmp.f64	d0, d0
 8004f7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f82:	d709      	bvc.n	8004f98 <_printf_float+0xc0>
 8004f84:	ee10 3a90 	vmov	r3, s1
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	bfbc      	itt	lt
 8004f8c:	232d      	movlt	r3, #45	; 0x2d
 8004f8e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004f92:	497d      	ldr	r1, [pc, #500]	; (8005188 <_printf_float+0x2b0>)
 8004f94:	4b7d      	ldr	r3, [pc, #500]	; (800518c <_printf_float+0x2b4>)
 8004f96:	e7d5      	b.n	8004f44 <_printf_float+0x6c>
 8004f98:	6863      	ldr	r3, [r4, #4]
 8004f9a:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8004f9e:	9104      	str	r1, [sp, #16]
 8004fa0:	1c59      	adds	r1, r3, #1
 8004fa2:	d13c      	bne.n	800501e <_printf_float+0x146>
 8004fa4:	2306      	movs	r3, #6
 8004fa6:	6063      	str	r3, [r4, #4]
 8004fa8:	2300      	movs	r3, #0
 8004faa:	9303      	str	r3, [sp, #12]
 8004fac:	ab08      	add	r3, sp, #32
 8004fae:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8004fb2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004fb6:	ab07      	add	r3, sp, #28
 8004fb8:	6861      	ldr	r1, [r4, #4]
 8004fba:	9300      	str	r3, [sp, #0]
 8004fbc:	6022      	str	r2, [r4, #0]
 8004fbe:	f10d 031b 	add.w	r3, sp, #27
 8004fc2:	4628      	mov	r0, r5
 8004fc4:	f7ff fef7 	bl	8004db6 <__cvt>
 8004fc8:	9b04      	ldr	r3, [sp, #16]
 8004fca:	9907      	ldr	r1, [sp, #28]
 8004fcc:	2b47      	cmp	r3, #71	; 0x47
 8004fce:	4680      	mov	r8, r0
 8004fd0:	d108      	bne.n	8004fe4 <_printf_float+0x10c>
 8004fd2:	1cc8      	adds	r0, r1, #3
 8004fd4:	db02      	blt.n	8004fdc <_printf_float+0x104>
 8004fd6:	6863      	ldr	r3, [r4, #4]
 8004fd8:	4299      	cmp	r1, r3
 8004fda:	dd41      	ble.n	8005060 <_printf_float+0x188>
 8004fdc:	f1a9 0902 	sub.w	r9, r9, #2
 8004fe0:	fa5f f989 	uxtb.w	r9, r9
 8004fe4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004fe8:	d820      	bhi.n	800502c <_printf_float+0x154>
 8004fea:	3901      	subs	r1, #1
 8004fec:	464a      	mov	r2, r9
 8004fee:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004ff2:	9107      	str	r1, [sp, #28]
 8004ff4:	f7ff ff31 	bl	8004e5a <__exponent>
 8004ff8:	9a08      	ldr	r2, [sp, #32]
 8004ffa:	9004      	str	r0, [sp, #16]
 8004ffc:	1813      	adds	r3, r2, r0
 8004ffe:	2a01      	cmp	r2, #1
 8005000:	6123      	str	r3, [r4, #16]
 8005002:	dc02      	bgt.n	800500a <_printf_float+0x132>
 8005004:	6822      	ldr	r2, [r4, #0]
 8005006:	07d2      	lsls	r2, r2, #31
 8005008:	d501      	bpl.n	800500e <_printf_float+0x136>
 800500a:	3301      	adds	r3, #1
 800500c:	6123      	str	r3, [r4, #16]
 800500e:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d0a2      	beq.n	8004f5c <_printf_float+0x84>
 8005016:	232d      	movs	r3, #45	; 0x2d
 8005018:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800501c:	e79e      	b.n	8004f5c <_printf_float+0x84>
 800501e:	9904      	ldr	r1, [sp, #16]
 8005020:	2947      	cmp	r1, #71	; 0x47
 8005022:	d1c1      	bne.n	8004fa8 <_printf_float+0xd0>
 8005024:	2b00      	cmp	r3, #0
 8005026:	d1bf      	bne.n	8004fa8 <_printf_float+0xd0>
 8005028:	2301      	movs	r3, #1
 800502a:	e7bc      	b.n	8004fa6 <_printf_float+0xce>
 800502c:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8005030:	d118      	bne.n	8005064 <_printf_float+0x18c>
 8005032:	2900      	cmp	r1, #0
 8005034:	6863      	ldr	r3, [r4, #4]
 8005036:	dd0b      	ble.n	8005050 <_printf_float+0x178>
 8005038:	6121      	str	r1, [r4, #16]
 800503a:	b913      	cbnz	r3, 8005042 <_printf_float+0x16a>
 800503c:	6822      	ldr	r2, [r4, #0]
 800503e:	07d0      	lsls	r0, r2, #31
 8005040:	d502      	bpl.n	8005048 <_printf_float+0x170>
 8005042:	3301      	adds	r3, #1
 8005044:	440b      	add	r3, r1
 8005046:	6123      	str	r3, [r4, #16]
 8005048:	2300      	movs	r3, #0
 800504a:	65a1      	str	r1, [r4, #88]	; 0x58
 800504c:	9304      	str	r3, [sp, #16]
 800504e:	e7de      	b.n	800500e <_printf_float+0x136>
 8005050:	b913      	cbnz	r3, 8005058 <_printf_float+0x180>
 8005052:	6822      	ldr	r2, [r4, #0]
 8005054:	07d2      	lsls	r2, r2, #31
 8005056:	d501      	bpl.n	800505c <_printf_float+0x184>
 8005058:	3302      	adds	r3, #2
 800505a:	e7f4      	b.n	8005046 <_printf_float+0x16e>
 800505c:	2301      	movs	r3, #1
 800505e:	e7f2      	b.n	8005046 <_printf_float+0x16e>
 8005060:	f04f 0967 	mov.w	r9, #103	; 0x67
 8005064:	9b08      	ldr	r3, [sp, #32]
 8005066:	4299      	cmp	r1, r3
 8005068:	db05      	blt.n	8005076 <_printf_float+0x19e>
 800506a:	6823      	ldr	r3, [r4, #0]
 800506c:	6121      	str	r1, [r4, #16]
 800506e:	07d8      	lsls	r0, r3, #31
 8005070:	d5ea      	bpl.n	8005048 <_printf_float+0x170>
 8005072:	1c4b      	adds	r3, r1, #1
 8005074:	e7e7      	b.n	8005046 <_printf_float+0x16e>
 8005076:	2900      	cmp	r1, #0
 8005078:	bfd4      	ite	le
 800507a:	f1c1 0202 	rsble	r2, r1, #2
 800507e:	2201      	movgt	r2, #1
 8005080:	4413      	add	r3, r2
 8005082:	e7e0      	b.n	8005046 <_printf_float+0x16e>
 8005084:	6823      	ldr	r3, [r4, #0]
 8005086:	055a      	lsls	r2, r3, #21
 8005088:	d407      	bmi.n	800509a <_printf_float+0x1c2>
 800508a:	6923      	ldr	r3, [r4, #16]
 800508c:	4642      	mov	r2, r8
 800508e:	4631      	mov	r1, r6
 8005090:	4628      	mov	r0, r5
 8005092:	47b8      	blx	r7
 8005094:	3001      	adds	r0, #1
 8005096:	d12a      	bne.n	80050ee <_printf_float+0x216>
 8005098:	e76a      	b.n	8004f70 <_printf_float+0x98>
 800509a:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800509e:	f240 80e0 	bls.w	8005262 <_printf_float+0x38a>
 80050a2:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80050a6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80050aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050ae:	d133      	bne.n	8005118 <_printf_float+0x240>
 80050b0:	4a37      	ldr	r2, [pc, #220]	; (8005190 <_printf_float+0x2b8>)
 80050b2:	2301      	movs	r3, #1
 80050b4:	4631      	mov	r1, r6
 80050b6:	4628      	mov	r0, r5
 80050b8:	47b8      	blx	r7
 80050ba:	3001      	adds	r0, #1
 80050bc:	f43f af58 	beq.w	8004f70 <_printf_float+0x98>
 80050c0:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80050c4:	429a      	cmp	r2, r3
 80050c6:	db02      	blt.n	80050ce <_printf_float+0x1f6>
 80050c8:	6823      	ldr	r3, [r4, #0]
 80050ca:	07d8      	lsls	r0, r3, #31
 80050cc:	d50f      	bpl.n	80050ee <_printf_float+0x216>
 80050ce:	4653      	mov	r3, sl
 80050d0:	465a      	mov	r2, fp
 80050d2:	4631      	mov	r1, r6
 80050d4:	4628      	mov	r0, r5
 80050d6:	47b8      	blx	r7
 80050d8:	3001      	adds	r0, #1
 80050da:	f43f af49 	beq.w	8004f70 <_printf_float+0x98>
 80050de:	f04f 0800 	mov.w	r8, #0
 80050e2:	f104 091a 	add.w	r9, r4, #26
 80050e6:	9b08      	ldr	r3, [sp, #32]
 80050e8:	3b01      	subs	r3, #1
 80050ea:	4543      	cmp	r3, r8
 80050ec:	dc09      	bgt.n	8005102 <_printf_float+0x22a>
 80050ee:	6823      	ldr	r3, [r4, #0]
 80050f0:	079b      	lsls	r3, r3, #30
 80050f2:	f100 8106 	bmi.w	8005302 <_printf_float+0x42a>
 80050f6:	68e0      	ldr	r0, [r4, #12]
 80050f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80050fa:	4298      	cmp	r0, r3
 80050fc:	bfb8      	it	lt
 80050fe:	4618      	movlt	r0, r3
 8005100:	e738      	b.n	8004f74 <_printf_float+0x9c>
 8005102:	2301      	movs	r3, #1
 8005104:	464a      	mov	r2, r9
 8005106:	4631      	mov	r1, r6
 8005108:	4628      	mov	r0, r5
 800510a:	47b8      	blx	r7
 800510c:	3001      	adds	r0, #1
 800510e:	f43f af2f 	beq.w	8004f70 <_printf_float+0x98>
 8005112:	f108 0801 	add.w	r8, r8, #1
 8005116:	e7e6      	b.n	80050e6 <_printf_float+0x20e>
 8005118:	9b07      	ldr	r3, [sp, #28]
 800511a:	2b00      	cmp	r3, #0
 800511c:	dc3a      	bgt.n	8005194 <_printf_float+0x2bc>
 800511e:	4a1c      	ldr	r2, [pc, #112]	; (8005190 <_printf_float+0x2b8>)
 8005120:	2301      	movs	r3, #1
 8005122:	4631      	mov	r1, r6
 8005124:	4628      	mov	r0, r5
 8005126:	47b8      	blx	r7
 8005128:	3001      	adds	r0, #1
 800512a:	f43f af21 	beq.w	8004f70 <_printf_float+0x98>
 800512e:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8005132:	4313      	orrs	r3, r2
 8005134:	d102      	bne.n	800513c <_printf_float+0x264>
 8005136:	6823      	ldr	r3, [r4, #0]
 8005138:	07d9      	lsls	r1, r3, #31
 800513a:	d5d8      	bpl.n	80050ee <_printf_float+0x216>
 800513c:	4653      	mov	r3, sl
 800513e:	465a      	mov	r2, fp
 8005140:	4631      	mov	r1, r6
 8005142:	4628      	mov	r0, r5
 8005144:	47b8      	blx	r7
 8005146:	3001      	adds	r0, #1
 8005148:	f43f af12 	beq.w	8004f70 <_printf_float+0x98>
 800514c:	f04f 0900 	mov.w	r9, #0
 8005150:	f104 0a1a 	add.w	sl, r4, #26
 8005154:	9b07      	ldr	r3, [sp, #28]
 8005156:	425b      	negs	r3, r3
 8005158:	454b      	cmp	r3, r9
 800515a:	dc01      	bgt.n	8005160 <_printf_float+0x288>
 800515c:	9b08      	ldr	r3, [sp, #32]
 800515e:	e795      	b.n	800508c <_printf_float+0x1b4>
 8005160:	2301      	movs	r3, #1
 8005162:	4652      	mov	r2, sl
 8005164:	4631      	mov	r1, r6
 8005166:	4628      	mov	r0, r5
 8005168:	47b8      	blx	r7
 800516a:	3001      	adds	r0, #1
 800516c:	f43f af00 	beq.w	8004f70 <_printf_float+0x98>
 8005170:	f109 0901 	add.w	r9, r9, #1
 8005174:	e7ee      	b.n	8005154 <_printf_float+0x27c>
 8005176:	bf00      	nop
 8005178:	ffffffff 	.word	0xffffffff
 800517c:	7fefffff 	.word	0x7fefffff
 8005180:	080079ac 	.word	0x080079ac
 8005184:	080079b0 	.word	0x080079b0
 8005188:	080079b4 	.word	0x080079b4
 800518c:	080079b8 	.word	0x080079b8
 8005190:	080079bc 	.word	0x080079bc
 8005194:	9a08      	ldr	r2, [sp, #32]
 8005196:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005198:	429a      	cmp	r2, r3
 800519a:	bfa8      	it	ge
 800519c:	461a      	movge	r2, r3
 800519e:	2a00      	cmp	r2, #0
 80051a0:	4691      	mov	r9, r2
 80051a2:	dc38      	bgt.n	8005216 <_printf_float+0x33e>
 80051a4:	2300      	movs	r3, #0
 80051a6:	9305      	str	r3, [sp, #20]
 80051a8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80051ac:	f104 021a 	add.w	r2, r4, #26
 80051b0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80051b2:	9905      	ldr	r1, [sp, #20]
 80051b4:	9304      	str	r3, [sp, #16]
 80051b6:	eba3 0309 	sub.w	r3, r3, r9
 80051ba:	428b      	cmp	r3, r1
 80051bc:	dc33      	bgt.n	8005226 <_printf_float+0x34e>
 80051be:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80051c2:	429a      	cmp	r2, r3
 80051c4:	db3c      	blt.n	8005240 <_printf_float+0x368>
 80051c6:	6823      	ldr	r3, [r4, #0]
 80051c8:	07da      	lsls	r2, r3, #31
 80051ca:	d439      	bmi.n	8005240 <_printf_float+0x368>
 80051cc:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 80051d0:	eba2 0903 	sub.w	r9, r2, r3
 80051d4:	9b04      	ldr	r3, [sp, #16]
 80051d6:	1ad2      	subs	r2, r2, r3
 80051d8:	4591      	cmp	r9, r2
 80051da:	bfa8      	it	ge
 80051dc:	4691      	movge	r9, r2
 80051de:	f1b9 0f00 	cmp.w	r9, #0
 80051e2:	dc35      	bgt.n	8005250 <_printf_float+0x378>
 80051e4:	f04f 0800 	mov.w	r8, #0
 80051e8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80051ec:	f104 0a1a 	add.w	sl, r4, #26
 80051f0:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80051f4:	1a9b      	subs	r3, r3, r2
 80051f6:	eba3 0309 	sub.w	r3, r3, r9
 80051fa:	4543      	cmp	r3, r8
 80051fc:	f77f af77 	ble.w	80050ee <_printf_float+0x216>
 8005200:	2301      	movs	r3, #1
 8005202:	4652      	mov	r2, sl
 8005204:	4631      	mov	r1, r6
 8005206:	4628      	mov	r0, r5
 8005208:	47b8      	blx	r7
 800520a:	3001      	adds	r0, #1
 800520c:	f43f aeb0 	beq.w	8004f70 <_printf_float+0x98>
 8005210:	f108 0801 	add.w	r8, r8, #1
 8005214:	e7ec      	b.n	80051f0 <_printf_float+0x318>
 8005216:	4613      	mov	r3, r2
 8005218:	4631      	mov	r1, r6
 800521a:	4642      	mov	r2, r8
 800521c:	4628      	mov	r0, r5
 800521e:	47b8      	blx	r7
 8005220:	3001      	adds	r0, #1
 8005222:	d1bf      	bne.n	80051a4 <_printf_float+0x2cc>
 8005224:	e6a4      	b.n	8004f70 <_printf_float+0x98>
 8005226:	2301      	movs	r3, #1
 8005228:	4631      	mov	r1, r6
 800522a:	4628      	mov	r0, r5
 800522c:	9204      	str	r2, [sp, #16]
 800522e:	47b8      	blx	r7
 8005230:	3001      	adds	r0, #1
 8005232:	f43f ae9d 	beq.w	8004f70 <_printf_float+0x98>
 8005236:	9b05      	ldr	r3, [sp, #20]
 8005238:	9a04      	ldr	r2, [sp, #16]
 800523a:	3301      	adds	r3, #1
 800523c:	9305      	str	r3, [sp, #20]
 800523e:	e7b7      	b.n	80051b0 <_printf_float+0x2d8>
 8005240:	4653      	mov	r3, sl
 8005242:	465a      	mov	r2, fp
 8005244:	4631      	mov	r1, r6
 8005246:	4628      	mov	r0, r5
 8005248:	47b8      	blx	r7
 800524a:	3001      	adds	r0, #1
 800524c:	d1be      	bne.n	80051cc <_printf_float+0x2f4>
 800524e:	e68f      	b.n	8004f70 <_printf_float+0x98>
 8005250:	9a04      	ldr	r2, [sp, #16]
 8005252:	464b      	mov	r3, r9
 8005254:	4442      	add	r2, r8
 8005256:	4631      	mov	r1, r6
 8005258:	4628      	mov	r0, r5
 800525a:	47b8      	blx	r7
 800525c:	3001      	adds	r0, #1
 800525e:	d1c1      	bne.n	80051e4 <_printf_float+0x30c>
 8005260:	e686      	b.n	8004f70 <_printf_float+0x98>
 8005262:	9a08      	ldr	r2, [sp, #32]
 8005264:	2a01      	cmp	r2, #1
 8005266:	dc01      	bgt.n	800526c <_printf_float+0x394>
 8005268:	07db      	lsls	r3, r3, #31
 800526a:	d537      	bpl.n	80052dc <_printf_float+0x404>
 800526c:	2301      	movs	r3, #1
 800526e:	4642      	mov	r2, r8
 8005270:	4631      	mov	r1, r6
 8005272:	4628      	mov	r0, r5
 8005274:	47b8      	blx	r7
 8005276:	3001      	adds	r0, #1
 8005278:	f43f ae7a 	beq.w	8004f70 <_printf_float+0x98>
 800527c:	4653      	mov	r3, sl
 800527e:	465a      	mov	r2, fp
 8005280:	4631      	mov	r1, r6
 8005282:	4628      	mov	r0, r5
 8005284:	47b8      	blx	r7
 8005286:	3001      	adds	r0, #1
 8005288:	f43f ae72 	beq.w	8004f70 <_printf_float+0x98>
 800528c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8005290:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8005294:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005298:	9b08      	ldr	r3, [sp, #32]
 800529a:	d01a      	beq.n	80052d2 <_printf_float+0x3fa>
 800529c:	3b01      	subs	r3, #1
 800529e:	f108 0201 	add.w	r2, r8, #1
 80052a2:	4631      	mov	r1, r6
 80052a4:	4628      	mov	r0, r5
 80052a6:	47b8      	blx	r7
 80052a8:	3001      	adds	r0, #1
 80052aa:	d10e      	bne.n	80052ca <_printf_float+0x3f2>
 80052ac:	e660      	b.n	8004f70 <_printf_float+0x98>
 80052ae:	2301      	movs	r3, #1
 80052b0:	464a      	mov	r2, r9
 80052b2:	4631      	mov	r1, r6
 80052b4:	4628      	mov	r0, r5
 80052b6:	47b8      	blx	r7
 80052b8:	3001      	adds	r0, #1
 80052ba:	f43f ae59 	beq.w	8004f70 <_printf_float+0x98>
 80052be:	f108 0801 	add.w	r8, r8, #1
 80052c2:	9b08      	ldr	r3, [sp, #32]
 80052c4:	3b01      	subs	r3, #1
 80052c6:	4543      	cmp	r3, r8
 80052c8:	dcf1      	bgt.n	80052ae <_printf_float+0x3d6>
 80052ca:	9b04      	ldr	r3, [sp, #16]
 80052cc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80052d0:	e6dd      	b.n	800508e <_printf_float+0x1b6>
 80052d2:	f04f 0800 	mov.w	r8, #0
 80052d6:	f104 091a 	add.w	r9, r4, #26
 80052da:	e7f2      	b.n	80052c2 <_printf_float+0x3ea>
 80052dc:	2301      	movs	r3, #1
 80052de:	4642      	mov	r2, r8
 80052e0:	e7df      	b.n	80052a2 <_printf_float+0x3ca>
 80052e2:	2301      	movs	r3, #1
 80052e4:	464a      	mov	r2, r9
 80052e6:	4631      	mov	r1, r6
 80052e8:	4628      	mov	r0, r5
 80052ea:	47b8      	blx	r7
 80052ec:	3001      	adds	r0, #1
 80052ee:	f43f ae3f 	beq.w	8004f70 <_printf_float+0x98>
 80052f2:	f108 0801 	add.w	r8, r8, #1
 80052f6:	68e3      	ldr	r3, [r4, #12]
 80052f8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80052fa:	1a5b      	subs	r3, r3, r1
 80052fc:	4543      	cmp	r3, r8
 80052fe:	dcf0      	bgt.n	80052e2 <_printf_float+0x40a>
 8005300:	e6f9      	b.n	80050f6 <_printf_float+0x21e>
 8005302:	f04f 0800 	mov.w	r8, #0
 8005306:	f104 0919 	add.w	r9, r4, #25
 800530a:	e7f4      	b.n	80052f6 <_printf_float+0x41e>

0800530c <_printf_common>:
 800530c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005310:	4616      	mov	r6, r2
 8005312:	4699      	mov	r9, r3
 8005314:	688a      	ldr	r2, [r1, #8]
 8005316:	690b      	ldr	r3, [r1, #16]
 8005318:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800531c:	4293      	cmp	r3, r2
 800531e:	bfb8      	it	lt
 8005320:	4613      	movlt	r3, r2
 8005322:	6033      	str	r3, [r6, #0]
 8005324:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005328:	4607      	mov	r7, r0
 800532a:	460c      	mov	r4, r1
 800532c:	b10a      	cbz	r2, 8005332 <_printf_common+0x26>
 800532e:	3301      	adds	r3, #1
 8005330:	6033      	str	r3, [r6, #0]
 8005332:	6823      	ldr	r3, [r4, #0]
 8005334:	0699      	lsls	r1, r3, #26
 8005336:	bf42      	ittt	mi
 8005338:	6833      	ldrmi	r3, [r6, #0]
 800533a:	3302      	addmi	r3, #2
 800533c:	6033      	strmi	r3, [r6, #0]
 800533e:	6825      	ldr	r5, [r4, #0]
 8005340:	f015 0506 	ands.w	r5, r5, #6
 8005344:	d106      	bne.n	8005354 <_printf_common+0x48>
 8005346:	f104 0a19 	add.w	sl, r4, #25
 800534a:	68e3      	ldr	r3, [r4, #12]
 800534c:	6832      	ldr	r2, [r6, #0]
 800534e:	1a9b      	subs	r3, r3, r2
 8005350:	42ab      	cmp	r3, r5
 8005352:	dc26      	bgt.n	80053a2 <_printf_common+0x96>
 8005354:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005358:	1e13      	subs	r3, r2, #0
 800535a:	6822      	ldr	r2, [r4, #0]
 800535c:	bf18      	it	ne
 800535e:	2301      	movne	r3, #1
 8005360:	0692      	lsls	r2, r2, #26
 8005362:	d42b      	bmi.n	80053bc <_printf_common+0xb0>
 8005364:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005368:	4649      	mov	r1, r9
 800536a:	4638      	mov	r0, r7
 800536c:	47c0      	blx	r8
 800536e:	3001      	adds	r0, #1
 8005370:	d01e      	beq.n	80053b0 <_printf_common+0xa4>
 8005372:	6823      	ldr	r3, [r4, #0]
 8005374:	6922      	ldr	r2, [r4, #16]
 8005376:	f003 0306 	and.w	r3, r3, #6
 800537a:	2b04      	cmp	r3, #4
 800537c:	bf02      	ittt	eq
 800537e:	68e5      	ldreq	r5, [r4, #12]
 8005380:	6833      	ldreq	r3, [r6, #0]
 8005382:	1aed      	subeq	r5, r5, r3
 8005384:	68a3      	ldr	r3, [r4, #8]
 8005386:	bf0c      	ite	eq
 8005388:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800538c:	2500      	movne	r5, #0
 800538e:	4293      	cmp	r3, r2
 8005390:	bfc4      	itt	gt
 8005392:	1a9b      	subgt	r3, r3, r2
 8005394:	18ed      	addgt	r5, r5, r3
 8005396:	2600      	movs	r6, #0
 8005398:	341a      	adds	r4, #26
 800539a:	42b5      	cmp	r5, r6
 800539c:	d11a      	bne.n	80053d4 <_printf_common+0xc8>
 800539e:	2000      	movs	r0, #0
 80053a0:	e008      	b.n	80053b4 <_printf_common+0xa8>
 80053a2:	2301      	movs	r3, #1
 80053a4:	4652      	mov	r2, sl
 80053a6:	4649      	mov	r1, r9
 80053a8:	4638      	mov	r0, r7
 80053aa:	47c0      	blx	r8
 80053ac:	3001      	adds	r0, #1
 80053ae:	d103      	bne.n	80053b8 <_printf_common+0xac>
 80053b0:	f04f 30ff 	mov.w	r0, #4294967295
 80053b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053b8:	3501      	adds	r5, #1
 80053ba:	e7c6      	b.n	800534a <_printf_common+0x3e>
 80053bc:	18e1      	adds	r1, r4, r3
 80053be:	1c5a      	adds	r2, r3, #1
 80053c0:	2030      	movs	r0, #48	; 0x30
 80053c2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80053c6:	4422      	add	r2, r4
 80053c8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80053cc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80053d0:	3302      	adds	r3, #2
 80053d2:	e7c7      	b.n	8005364 <_printf_common+0x58>
 80053d4:	2301      	movs	r3, #1
 80053d6:	4622      	mov	r2, r4
 80053d8:	4649      	mov	r1, r9
 80053da:	4638      	mov	r0, r7
 80053dc:	47c0      	blx	r8
 80053de:	3001      	adds	r0, #1
 80053e0:	d0e6      	beq.n	80053b0 <_printf_common+0xa4>
 80053e2:	3601      	adds	r6, #1
 80053e4:	e7d9      	b.n	800539a <_printf_common+0x8e>
	...

080053e8 <_printf_i>:
 80053e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80053ec:	7e0f      	ldrb	r7, [r1, #24]
 80053ee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80053f0:	2f78      	cmp	r7, #120	; 0x78
 80053f2:	4691      	mov	r9, r2
 80053f4:	4680      	mov	r8, r0
 80053f6:	460c      	mov	r4, r1
 80053f8:	469a      	mov	sl, r3
 80053fa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80053fe:	d807      	bhi.n	8005410 <_printf_i+0x28>
 8005400:	2f62      	cmp	r7, #98	; 0x62
 8005402:	d80a      	bhi.n	800541a <_printf_i+0x32>
 8005404:	2f00      	cmp	r7, #0
 8005406:	f000 80d4 	beq.w	80055b2 <_printf_i+0x1ca>
 800540a:	2f58      	cmp	r7, #88	; 0x58
 800540c:	f000 80c0 	beq.w	8005590 <_printf_i+0x1a8>
 8005410:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005414:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005418:	e03a      	b.n	8005490 <_printf_i+0xa8>
 800541a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800541e:	2b15      	cmp	r3, #21
 8005420:	d8f6      	bhi.n	8005410 <_printf_i+0x28>
 8005422:	a101      	add	r1, pc, #4	; (adr r1, 8005428 <_printf_i+0x40>)
 8005424:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005428:	08005481 	.word	0x08005481
 800542c:	08005495 	.word	0x08005495
 8005430:	08005411 	.word	0x08005411
 8005434:	08005411 	.word	0x08005411
 8005438:	08005411 	.word	0x08005411
 800543c:	08005411 	.word	0x08005411
 8005440:	08005495 	.word	0x08005495
 8005444:	08005411 	.word	0x08005411
 8005448:	08005411 	.word	0x08005411
 800544c:	08005411 	.word	0x08005411
 8005450:	08005411 	.word	0x08005411
 8005454:	08005599 	.word	0x08005599
 8005458:	080054c1 	.word	0x080054c1
 800545c:	08005553 	.word	0x08005553
 8005460:	08005411 	.word	0x08005411
 8005464:	08005411 	.word	0x08005411
 8005468:	080055bb 	.word	0x080055bb
 800546c:	08005411 	.word	0x08005411
 8005470:	080054c1 	.word	0x080054c1
 8005474:	08005411 	.word	0x08005411
 8005478:	08005411 	.word	0x08005411
 800547c:	0800555b 	.word	0x0800555b
 8005480:	682b      	ldr	r3, [r5, #0]
 8005482:	1d1a      	adds	r2, r3, #4
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	602a      	str	r2, [r5, #0]
 8005488:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800548c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005490:	2301      	movs	r3, #1
 8005492:	e09f      	b.n	80055d4 <_printf_i+0x1ec>
 8005494:	6820      	ldr	r0, [r4, #0]
 8005496:	682b      	ldr	r3, [r5, #0]
 8005498:	0607      	lsls	r7, r0, #24
 800549a:	f103 0104 	add.w	r1, r3, #4
 800549e:	6029      	str	r1, [r5, #0]
 80054a0:	d501      	bpl.n	80054a6 <_printf_i+0xbe>
 80054a2:	681e      	ldr	r6, [r3, #0]
 80054a4:	e003      	b.n	80054ae <_printf_i+0xc6>
 80054a6:	0646      	lsls	r6, r0, #25
 80054a8:	d5fb      	bpl.n	80054a2 <_printf_i+0xba>
 80054aa:	f9b3 6000 	ldrsh.w	r6, [r3]
 80054ae:	2e00      	cmp	r6, #0
 80054b0:	da03      	bge.n	80054ba <_printf_i+0xd2>
 80054b2:	232d      	movs	r3, #45	; 0x2d
 80054b4:	4276      	negs	r6, r6
 80054b6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80054ba:	485a      	ldr	r0, [pc, #360]	; (8005624 <_printf_i+0x23c>)
 80054bc:	230a      	movs	r3, #10
 80054be:	e012      	b.n	80054e6 <_printf_i+0xfe>
 80054c0:	682b      	ldr	r3, [r5, #0]
 80054c2:	6820      	ldr	r0, [r4, #0]
 80054c4:	1d19      	adds	r1, r3, #4
 80054c6:	6029      	str	r1, [r5, #0]
 80054c8:	0605      	lsls	r5, r0, #24
 80054ca:	d501      	bpl.n	80054d0 <_printf_i+0xe8>
 80054cc:	681e      	ldr	r6, [r3, #0]
 80054ce:	e002      	b.n	80054d6 <_printf_i+0xee>
 80054d0:	0641      	lsls	r1, r0, #25
 80054d2:	d5fb      	bpl.n	80054cc <_printf_i+0xe4>
 80054d4:	881e      	ldrh	r6, [r3, #0]
 80054d6:	4853      	ldr	r0, [pc, #332]	; (8005624 <_printf_i+0x23c>)
 80054d8:	2f6f      	cmp	r7, #111	; 0x6f
 80054da:	bf0c      	ite	eq
 80054dc:	2308      	moveq	r3, #8
 80054de:	230a      	movne	r3, #10
 80054e0:	2100      	movs	r1, #0
 80054e2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80054e6:	6865      	ldr	r5, [r4, #4]
 80054e8:	60a5      	str	r5, [r4, #8]
 80054ea:	2d00      	cmp	r5, #0
 80054ec:	bfa2      	ittt	ge
 80054ee:	6821      	ldrge	r1, [r4, #0]
 80054f0:	f021 0104 	bicge.w	r1, r1, #4
 80054f4:	6021      	strge	r1, [r4, #0]
 80054f6:	b90e      	cbnz	r6, 80054fc <_printf_i+0x114>
 80054f8:	2d00      	cmp	r5, #0
 80054fa:	d04b      	beq.n	8005594 <_printf_i+0x1ac>
 80054fc:	4615      	mov	r5, r2
 80054fe:	fbb6 f1f3 	udiv	r1, r6, r3
 8005502:	fb03 6711 	mls	r7, r3, r1, r6
 8005506:	5dc7      	ldrb	r7, [r0, r7]
 8005508:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800550c:	4637      	mov	r7, r6
 800550e:	42bb      	cmp	r3, r7
 8005510:	460e      	mov	r6, r1
 8005512:	d9f4      	bls.n	80054fe <_printf_i+0x116>
 8005514:	2b08      	cmp	r3, #8
 8005516:	d10b      	bne.n	8005530 <_printf_i+0x148>
 8005518:	6823      	ldr	r3, [r4, #0]
 800551a:	07de      	lsls	r6, r3, #31
 800551c:	d508      	bpl.n	8005530 <_printf_i+0x148>
 800551e:	6923      	ldr	r3, [r4, #16]
 8005520:	6861      	ldr	r1, [r4, #4]
 8005522:	4299      	cmp	r1, r3
 8005524:	bfde      	ittt	le
 8005526:	2330      	movle	r3, #48	; 0x30
 8005528:	f805 3c01 	strble.w	r3, [r5, #-1]
 800552c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005530:	1b52      	subs	r2, r2, r5
 8005532:	6122      	str	r2, [r4, #16]
 8005534:	f8cd a000 	str.w	sl, [sp]
 8005538:	464b      	mov	r3, r9
 800553a:	aa03      	add	r2, sp, #12
 800553c:	4621      	mov	r1, r4
 800553e:	4640      	mov	r0, r8
 8005540:	f7ff fee4 	bl	800530c <_printf_common>
 8005544:	3001      	adds	r0, #1
 8005546:	d14a      	bne.n	80055de <_printf_i+0x1f6>
 8005548:	f04f 30ff 	mov.w	r0, #4294967295
 800554c:	b004      	add	sp, #16
 800554e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005552:	6823      	ldr	r3, [r4, #0]
 8005554:	f043 0320 	orr.w	r3, r3, #32
 8005558:	6023      	str	r3, [r4, #0]
 800555a:	4833      	ldr	r0, [pc, #204]	; (8005628 <_printf_i+0x240>)
 800555c:	2778      	movs	r7, #120	; 0x78
 800555e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005562:	6823      	ldr	r3, [r4, #0]
 8005564:	6829      	ldr	r1, [r5, #0]
 8005566:	061f      	lsls	r7, r3, #24
 8005568:	f851 6b04 	ldr.w	r6, [r1], #4
 800556c:	d402      	bmi.n	8005574 <_printf_i+0x18c>
 800556e:	065f      	lsls	r7, r3, #25
 8005570:	bf48      	it	mi
 8005572:	b2b6      	uxthmi	r6, r6
 8005574:	07df      	lsls	r7, r3, #31
 8005576:	bf48      	it	mi
 8005578:	f043 0320 	orrmi.w	r3, r3, #32
 800557c:	6029      	str	r1, [r5, #0]
 800557e:	bf48      	it	mi
 8005580:	6023      	strmi	r3, [r4, #0]
 8005582:	b91e      	cbnz	r6, 800558c <_printf_i+0x1a4>
 8005584:	6823      	ldr	r3, [r4, #0]
 8005586:	f023 0320 	bic.w	r3, r3, #32
 800558a:	6023      	str	r3, [r4, #0]
 800558c:	2310      	movs	r3, #16
 800558e:	e7a7      	b.n	80054e0 <_printf_i+0xf8>
 8005590:	4824      	ldr	r0, [pc, #144]	; (8005624 <_printf_i+0x23c>)
 8005592:	e7e4      	b.n	800555e <_printf_i+0x176>
 8005594:	4615      	mov	r5, r2
 8005596:	e7bd      	b.n	8005514 <_printf_i+0x12c>
 8005598:	682b      	ldr	r3, [r5, #0]
 800559a:	6826      	ldr	r6, [r4, #0]
 800559c:	6961      	ldr	r1, [r4, #20]
 800559e:	1d18      	adds	r0, r3, #4
 80055a0:	6028      	str	r0, [r5, #0]
 80055a2:	0635      	lsls	r5, r6, #24
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	d501      	bpl.n	80055ac <_printf_i+0x1c4>
 80055a8:	6019      	str	r1, [r3, #0]
 80055aa:	e002      	b.n	80055b2 <_printf_i+0x1ca>
 80055ac:	0670      	lsls	r0, r6, #25
 80055ae:	d5fb      	bpl.n	80055a8 <_printf_i+0x1c0>
 80055b0:	8019      	strh	r1, [r3, #0]
 80055b2:	2300      	movs	r3, #0
 80055b4:	6123      	str	r3, [r4, #16]
 80055b6:	4615      	mov	r5, r2
 80055b8:	e7bc      	b.n	8005534 <_printf_i+0x14c>
 80055ba:	682b      	ldr	r3, [r5, #0]
 80055bc:	1d1a      	adds	r2, r3, #4
 80055be:	602a      	str	r2, [r5, #0]
 80055c0:	681d      	ldr	r5, [r3, #0]
 80055c2:	6862      	ldr	r2, [r4, #4]
 80055c4:	2100      	movs	r1, #0
 80055c6:	4628      	mov	r0, r5
 80055c8:	f7fa fe3a 	bl	8000240 <memchr>
 80055cc:	b108      	cbz	r0, 80055d2 <_printf_i+0x1ea>
 80055ce:	1b40      	subs	r0, r0, r5
 80055d0:	6060      	str	r0, [r4, #4]
 80055d2:	6863      	ldr	r3, [r4, #4]
 80055d4:	6123      	str	r3, [r4, #16]
 80055d6:	2300      	movs	r3, #0
 80055d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80055dc:	e7aa      	b.n	8005534 <_printf_i+0x14c>
 80055de:	6923      	ldr	r3, [r4, #16]
 80055e0:	462a      	mov	r2, r5
 80055e2:	4649      	mov	r1, r9
 80055e4:	4640      	mov	r0, r8
 80055e6:	47d0      	blx	sl
 80055e8:	3001      	adds	r0, #1
 80055ea:	d0ad      	beq.n	8005548 <_printf_i+0x160>
 80055ec:	6823      	ldr	r3, [r4, #0]
 80055ee:	079b      	lsls	r3, r3, #30
 80055f0:	d413      	bmi.n	800561a <_printf_i+0x232>
 80055f2:	68e0      	ldr	r0, [r4, #12]
 80055f4:	9b03      	ldr	r3, [sp, #12]
 80055f6:	4298      	cmp	r0, r3
 80055f8:	bfb8      	it	lt
 80055fa:	4618      	movlt	r0, r3
 80055fc:	e7a6      	b.n	800554c <_printf_i+0x164>
 80055fe:	2301      	movs	r3, #1
 8005600:	4632      	mov	r2, r6
 8005602:	4649      	mov	r1, r9
 8005604:	4640      	mov	r0, r8
 8005606:	47d0      	blx	sl
 8005608:	3001      	adds	r0, #1
 800560a:	d09d      	beq.n	8005548 <_printf_i+0x160>
 800560c:	3501      	adds	r5, #1
 800560e:	68e3      	ldr	r3, [r4, #12]
 8005610:	9903      	ldr	r1, [sp, #12]
 8005612:	1a5b      	subs	r3, r3, r1
 8005614:	42ab      	cmp	r3, r5
 8005616:	dcf2      	bgt.n	80055fe <_printf_i+0x216>
 8005618:	e7eb      	b.n	80055f2 <_printf_i+0x20a>
 800561a:	2500      	movs	r5, #0
 800561c:	f104 0619 	add.w	r6, r4, #25
 8005620:	e7f5      	b.n	800560e <_printf_i+0x226>
 8005622:	bf00      	nop
 8005624:	080079be 	.word	0x080079be
 8005628:	080079cf 	.word	0x080079cf

0800562c <std>:
 800562c:	2300      	movs	r3, #0
 800562e:	b510      	push	{r4, lr}
 8005630:	4604      	mov	r4, r0
 8005632:	e9c0 3300 	strd	r3, r3, [r0]
 8005636:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800563a:	6083      	str	r3, [r0, #8]
 800563c:	8181      	strh	r1, [r0, #12]
 800563e:	6643      	str	r3, [r0, #100]	; 0x64
 8005640:	81c2      	strh	r2, [r0, #14]
 8005642:	6183      	str	r3, [r0, #24]
 8005644:	4619      	mov	r1, r3
 8005646:	2208      	movs	r2, #8
 8005648:	305c      	adds	r0, #92	; 0x5c
 800564a:	f000 f914 	bl	8005876 <memset>
 800564e:	4b0d      	ldr	r3, [pc, #52]	; (8005684 <std+0x58>)
 8005650:	6263      	str	r3, [r4, #36]	; 0x24
 8005652:	4b0d      	ldr	r3, [pc, #52]	; (8005688 <std+0x5c>)
 8005654:	62a3      	str	r3, [r4, #40]	; 0x28
 8005656:	4b0d      	ldr	r3, [pc, #52]	; (800568c <std+0x60>)
 8005658:	62e3      	str	r3, [r4, #44]	; 0x2c
 800565a:	4b0d      	ldr	r3, [pc, #52]	; (8005690 <std+0x64>)
 800565c:	6323      	str	r3, [r4, #48]	; 0x30
 800565e:	4b0d      	ldr	r3, [pc, #52]	; (8005694 <std+0x68>)
 8005660:	6224      	str	r4, [r4, #32]
 8005662:	429c      	cmp	r4, r3
 8005664:	d006      	beq.n	8005674 <std+0x48>
 8005666:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800566a:	4294      	cmp	r4, r2
 800566c:	d002      	beq.n	8005674 <std+0x48>
 800566e:	33d0      	adds	r3, #208	; 0xd0
 8005670:	429c      	cmp	r4, r3
 8005672:	d105      	bne.n	8005680 <std+0x54>
 8005674:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005678:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800567c:	f000 b978 	b.w	8005970 <__retarget_lock_init_recursive>
 8005680:	bd10      	pop	{r4, pc}
 8005682:	bf00      	nop
 8005684:	080057f1 	.word	0x080057f1
 8005688:	08005813 	.word	0x08005813
 800568c:	0800584b 	.word	0x0800584b
 8005690:	0800586f 	.word	0x0800586f
 8005694:	20000354 	.word	0x20000354

08005698 <stdio_exit_handler>:
 8005698:	4a02      	ldr	r2, [pc, #8]	; (80056a4 <stdio_exit_handler+0xc>)
 800569a:	4903      	ldr	r1, [pc, #12]	; (80056a8 <stdio_exit_handler+0x10>)
 800569c:	4803      	ldr	r0, [pc, #12]	; (80056ac <stdio_exit_handler+0x14>)
 800569e:	f000 b869 	b.w	8005774 <_fwalk_sglue>
 80056a2:	bf00      	nop
 80056a4:	2000000c 	.word	0x2000000c
 80056a8:	08007215 	.word	0x08007215
 80056ac:	20000018 	.word	0x20000018

080056b0 <cleanup_stdio>:
 80056b0:	6841      	ldr	r1, [r0, #4]
 80056b2:	4b0c      	ldr	r3, [pc, #48]	; (80056e4 <cleanup_stdio+0x34>)
 80056b4:	4299      	cmp	r1, r3
 80056b6:	b510      	push	{r4, lr}
 80056b8:	4604      	mov	r4, r0
 80056ba:	d001      	beq.n	80056c0 <cleanup_stdio+0x10>
 80056bc:	f001 fdaa 	bl	8007214 <_fflush_r>
 80056c0:	68a1      	ldr	r1, [r4, #8]
 80056c2:	4b09      	ldr	r3, [pc, #36]	; (80056e8 <cleanup_stdio+0x38>)
 80056c4:	4299      	cmp	r1, r3
 80056c6:	d002      	beq.n	80056ce <cleanup_stdio+0x1e>
 80056c8:	4620      	mov	r0, r4
 80056ca:	f001 fda3 	bl	8007214 <_fflush_r>
 80056ce:	68e1      	ldr	r1, [r4, #12]
 80056d0:	4b06      	ldr	r3, [pc, #24]	; (80056ec <cleanup_stdio+0x3c>)
 80056d2:	4299      	cmp	r1, r3
 80056d4:	d004      	beq.n	80056e0 <cleanup_stdio+0x30>
 80056d6:	4620      	mov	r0, r4
 80056d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80056dc:	f001 bd9a 	b.w	8007214 <_fflush_r>
 80056e0:	bd10      	pop	{r4, pc}
 80056e2:	bf00      	nop
 80056e4:	20000354 	.word	0x20000354
 80056e8:	200003bc 	.word	0x200003bc
 80056ec:	20000424 	.word	0x20000424

080056f0 <global_stdio_init.part.0>:
 80056f0:	b510      	push	{r4, lr}
 80056f2:	4b0b      	ldr	r3, [pc, #44]	; (8005720 <global_stdio_init.part.0+0x30>)
 80056f4:	4c0b      	ldr	r4, [pc, #44]	; (8005724 <global_stdio_init.part.0+0x34>)
 80056f6:	4a0c      	ldr	r2, [pc, #48]	; (8005728 <global_stdio_init.part.0+0x38>)
 80056f8:	601a      	str	r2, [r3, #0]
 80056fa:	4620      	mov	r0, r4
 80056fc:	2200      	movs	r2, #0
 80056fe:	2104      	movs	r1, #4
 8005700:	f7ff ff94 	bl	800562c <std>
 8005704:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005708:	2201      	movs	r2, #1
 800570a:	2109      	movs	r1, #9
 800570c:	f7ff ff8e 	bl	800562c <std>
 8005710:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005714:	2202      	movs	r2, #2
 8005716:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800571a:	2112      	movs	r1, #18
 800571c:	f7ff bf86 	b.w	800562c <std>
 8005720:	2000048c 	.word	0x2000048c
 8005724:	20000354 	.word	0x20000354
 8005728:	08005699 	.word	0x08005699

0800572c <__sfp_lock_acquire>:
 800572c:	4801      	ldr	r0, [pc, #4]	; (8005734 <__sfp_lock_acquire+0x8>)
 800572e:	f000 b920 	b.w	8005972 <__retarget_lock_acquire_recursive>
 8005732:	bf00      	nop
 8005734:	20000495 	.word	0x20000495

08005738 <__sfp_lock_release>:
 8005738:	4801      	ldr	r0, [pc, #4]	; (8005740 <__sfp_lock_release+0x8>)
 800573a:	f000 b91b 	b.w	8005974 <__retarget_lock_release_recursive>
 800573e:	bf00      	nop
 8005740:	20000495 	.word	0x20000495

08005744 <__sinit>:
 8005744:	b510      	push	{r4, lr}
 8005746:	4604      	mov	r4, r0
 8005748:	f7ff fff0 	bl	800572c <__sfp_lock_acquire>
 800574c:	6a23      	ldr	r3, [r4, #32]
 800574e:	b11b      	cbz	r3, 8005758 <__sinit+0x14>
 8005750:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005754:	f7ff bff0 	b.w	8005738 <__sfp_lock_release>
 8005758:	4b04      	ldr	r3, [pc, #16]	; (800576c <__sinit+0x28>)
 800575a:	6223      	str	r3, [r4, #32]
 800575c:	4b04      	ldr	r3, [pc, #16]	; (8005770 <__sinit+0x2c>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d1f5      	bne.n	8005750 <__sinit+0xc>
 8005764:	f7ff ffc4 	bl	80056f0 <global_stdio_init.part.0>
 8005768:	e7f2      	b.n	8005750 <__sinit+0xc>
 800576a:	bf00      	nop
 800576c:	080056b1 	.word	0x080056b1
 8005770:	2000048c 	.word	0x2000048c

08005774 <_fwalk_sglue>:
 8005774:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005778:	4607      	mov	r7, r0
 800577a:	4688      	mov	r8, r1
 800577c:	4614      	mov	r4, r2
 800577e:	2600      	movs	r6, #0
 8005780:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005784:	f1b9 0901 	subs.w	r9, r9, #1
 8005788:	d505      	bpl.n	8005796 <_fwalk_sglue+0x22>
 800578a:	6824      	ldr	r4, [r4, #0]
 800578c:	2c00      	cmp	r4, #0
 800578e:	d1f7      	bne.n	8005780 <_fwalk_sglue+0xc>
 8005790:	4630      	mov	r0, r6
 8005792:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005796:	89ab      	ldrh	r3, [r5, #12]
 8005798:	2b01      	cmp	r3, #1
 800579a:	d907      	bls.n	80057ac <_fwalk_sglue+0x38>
 800579c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80057a0:	3301      	adds	r3, #1
 80057a2:	d003      	beq.n	80057ac <_fwalk_sglue+0x38>
 80057a4:	4629      	mov	r1, r5
 80057a6:	4638      	mov	r0, r7
 80057a8:	47c0      	blx	r8
 80057aa:	4306      	orrs	r6, r0
 80057ac:	3568      	adds	r5, #104	; 0x68
 80057ae:	e7e9      	b.n	8005784 <_fwalk_sglue+0x10>

080057b0 <siprintf>:
 80057b0:	b40e      	push	{r1, r2, r3}
 80057b2:	b500      	push	{lr}
 80057b4:	b09c      	sub	sp, #112	; 0x70
 80057b6:	ab1d      	add	r3, sp, #116	; 0x74
 80057b8:	9002      	str	r0, [sp, #8]
 80057ba:	9006      	str	r0, [sp, #24]
 80057bc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80057c0:	4809      	ldr	r0, [pc, #36]	; (80057e8 <siprintf+0x38>)
 80057c2:	9107      	str	r1, [sp, #28]
 80057c4:	9104      	str	r1, [sp, #16]
 80057c6:	4909      	ldr	r1, [pc, #36]	; (80057ec <siprintf+0x3c>)
 80057c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80057cc:	9105      	str	r1, [sp, #20]
 80057ce:	6800      	ldr	r0, [r0, #0]
 80057d0:	9301      	str	r3, [sp, #4]
 80057d2:	a902      	add	r1, sp, #8
 80057d4:	f001 fb9a 	bl	8006f0c <_svfiprintf_r>
 80057d8:	9b02      	ldr	r3, [sp, #8]
 80057da:	2200      	movs	r2, #0
 80057dc:	701a      	strb	r2, [r3, #0]
 80057de:	b01c      	add	sp, #112	; 0x70
 80057e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80057e4:	b003      	add	sp, #12
 80057e6:	4770      	bx	lr
 80057e8:	20000064 	.word	0x20000064
 80057ec:	ffff0208 	.word	0xffff0208

080057f0 <__sread>:
 80057f0:	b510      	push	{r4, lr}
 80057f2:	460c      	mov	r4, r1
 80057f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057f8:	f000 f86c 	bl	80058d4 <_read_r>
 80057fc:	2800      	cmp	r0, #0
 80057fe:	bfab      	itete	ge
 8005800:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005802:	89a3      	ldrhlt	r3, [r4, #12]
 8005804:	181b      	addge	r3, r3, r0
 8005806:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800580a:	bfac      	ite	ge
 800580c:	6563      	strge	r3, [r4, #84]	; 0x54
 800580e:	81a3      	strhlt	r3, [r4, #12]
 8005810:	bd10      	pop	{r4, pc}

08005812 <__swrite>:
 8005812:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005816:	461f      	mov	r7, r3
 8005818:	898b      	ldrh	r3, [r1, #12]
 800581a:	05db      	lsls	r3, r3, #23
 800581c:	4605      	mov	r5, r0
 800581e:	460c      	mov	r4, r1
 8005820:	4616      	mov	r6, r2
 8005822:	d505      	bpl.n	8005830 <__swrite+0x1e>
 8005824:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005828:	2302      	movs	r3, #2
 800582a:	2200      	movs	r2, #0
 800582c:	f000 f840 	bl	80058b0 <_lseek_r>
 8005830:	89a3      	ldrh	r3, [r4, #12]
 8005832:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005836:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800583a:	81a3      	strh	r3, [r4, #12]
 800583c:	4632      	mov	r2, r6
 800583e:	463b      	mov	r3, r7
 8005840:	4628      	mov	r0, r5
 8005842:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005846:	f000 b857 	b.w	80058f8 <_write_r>

0800584a <__sseek>:
 800584a:	b510      	push	{r4, lr}
 800584c:	460c      	mov	r4, r1
 800584e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005852:	f000 f82d 	bl	80058b0 <_lseek_r>
 8005856:	1c43      	adds	r3, r0, #1
 8005858:	89a3      	ldrh	r3, [r4, #12]
 800585a:	bf15      	itete	ne
 800585c:	6560      	strne	r0, [r4, #84]	; 0x54
 800585e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005862:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005866:	81a3      	strheq	r3, [r4, #12]
 8005868:	bf18      	it	ne
 800586a:	81a3      	strhne	r3, [r4, #12]
 800586c:	bd10      	pop	{r4, pc}

0800586e <__sclose>:
 800586e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005872:	f000 b80d 	b.w	8005890 <_close_r>

08005876 <memset>:
 8005876:	4402      	add	r2, r0
 8005878:	4603      	mov	r3, r0
 800587a:	4293      	cmp	r3, r2
 800587c:	d100      	bne.n	8005880 <memset+0xa>
 800587e:	4770      	bx	lr
 8005880:	f803 1b01 	strb.w	r1, [r3], #1
 8005884:	e7f9      	b.n	800587a <memset+0x4>
	...

08005888 <_localeconv_r>:
 8005888:	4800      	ldr	r0, [pc, #0]	; (800588c <_localeconv_r+0x4>)
 800588a:	4770      	bx	lr
 800588c:	20000158 	.word	0x20000158

08005890 <_close_r>:
 8005890:	b538      	push	{r3, r4, r5, lr}
 8005892:	4d06      	ldr	r5, [pc, #24]	; (80058ac <_close_r+0x1c>)
 8005894:	2300      	movs	r3, #0
 8005896:	4604      	mov	r4, r0
 8005898:	4608      	mov	r0, r1
 800589a:	602b      	str	r3, [r5, #0]
 800589c:	f7fb fbd5 	bl	800104a <_close>
 80058a0:	1c43      	adds	r3, r0, #1
 80058a2:	d102      	bne.n	80058aa <_close_r+0x1a>
 80058a4:	682b      	ldr	r3, [r5, #0]
 80058a6:	b103      	cbz	r3, 80058aa <_close_r+0x1a>
 80058a8:	6023      	str	r3, [r4, #0]
 80058aa:	bd38      	pop	{r3, r4, r5, pc}
 80058ac:	20000490 	.word	0x20000490

080058b0 <_lseek_r>:
 80058b0:	b538      	push	{r3, r4, r5, lr}
 80058b2:	4d07      	ldr	r5, [pc, #28]	; (80058d0 <_lseek_r+0x20>)
 80058b4:	4604      	mov	r4, r0
 80058b6:	4608      	mov	r0, r1
 80058b8:	4611      	mov	r1, r2
 80058ba:	2200      	movs	r2, #0
 80058bc:	602a      	str	r2, [r5, #0]
 80058be:	461a      	mov	r2, r3
 80058c0:	f7fb fbea 	bl	8001098 <_lseek>
 80058c4:	1c43      	adds	r3, r0, #1
 80058c6:	d102      	bne.n	80058ce <_lseek_r+0x1e>
 80058c8:	682b      	ldr	r3, [r5, #0]
 80058ca:	b103      	cbz	r3, 80058ce <_lseek_r+0x1e>
 80058cc:	6023      	str	r3, [r4, #0]
 80058ce:	bd38      	pop	{r3, r4, r5, pc}
 80058d0:	20000490 	.word	0x20000490

080058d4 <_read_r>:
 80058d4:	b538      	push	{r3, r4, r5, lr}
 80058d6:	4d07      	ldr	r5, [pc, #28]	; (80058f4 <_read_r+0x20>)
 80058d8:	4604      	mov	r4, r0
 80058da:	4608      	mov	r0, r1
 80058dc:	4611      	mov	r1, r2
 80058de:	2200      	movs	r2, #0
 80058e0:	602a      	str	r2, [r5, #0]
 80058e2:	461a      	mov	r2, r3
 80058e4:	f7fb fb78 	bl	8000fd8 <_read>
 80058e8:	1c43      	adds	r3, r0, #1
 80058ea:	d102      	bne.n	80058f2 <_read_r+0x1e>
 80058ec:	682b      	ldr	r3, [r5, #0]
 80058ee:	b103      	cbz	r3, 80058f2 <_read_r+0x1e>
 80058f0:	6023      	str	r3, [r4, #0]
 80058f2:	bd38      	pop	{r3, r4, r5, pc}
 80058f4:	20000490 	.word	0x20000490

080058f8 <_write_r>:
 80058f8:	b538      	push	{r3, r4, r5, lr}
 80058fa:	4d07      	ldr	r5, [pc, #28]	; (8005918 <_write_r+0x20>)
 80058fc:	4604      	mov	r4, r0
 80058fe:	4608      	mov	r0, r1
 8005900:	4611      	mov	r1, r2
 8005902:	2200      	movs	r2, #0
 8005904:	602a      	str	r2, [r5, #0]
 8005906:	461a      	mov	r2, r3
 8005908:	f7fb fb83 	bl	8001012 <_write>
 800590c:	1c43      	adds	r3, r0, #1
 800590e:	d102      	bne.n	8005916 <_write_r+0x1e>
 8005910:	682b      	ldr	r3, [r5, #0]
 8005912:	b103      	cbz	r3, 8005916 <_write_r+0x1e>
 8005914:	6023      	str	r3, [r4, #0]
 8005916:	bd38      	pop	{r3, r4, r5, pc}
 8005918:	20000490 	.word	0x20000490

0800591c <__errno>:
 800591c:	4b01      	ldr	r3, [pc, #4]	; (8005924 <__errno+0x8>)
 800591e:	6818      	ldr	r0, [r3, #0]
 8005920:	4770      	bx	lr
 8005922:	bf00      	nop
 8005924:	20000064 	.word	0x20000064

08005928 <__libc_init_array>:
 8005928:	b570      	push	{r4, r5, r6, lr}
 800592a:	4d0d      	ldr	r5, [pc, #52]	; (8005960 <__libc_init_array+0x38>)
 800592c:	4c0d      	ldr	r4, [pc, #52]	; (8005964 <__libc_init_array+0x3c>)
 800592e:	1b64      	subs	r4, r4, r5
 8005930:	10a4      	asrs	r4, r4, #2
 8005932:	2600      	movs	r6, #0
 8005934:	42a6      	cmp	r6, r4
 8005936:	d109      	bne.n	800594c <__libc_init_array+0x24>
 8005938:	4d0b      	ldr	r5, [pc, #44]	; (8005968 <__libc_init_array+0x40>)
 800593a:	4c0c      	ldr	r4, [pc, #48]	; (800596c <__libc_init_array+0x44>)
 800593c:	f002 f80e 	bl	800795c <_init>
 8005940:	1b64      	subs	r4, r4, r5
 8005942:	10a4      	asrs	r4, r4, #2
 8005944:	2600      	movs	r6, #0
 8005946:	42a6      	cmp	r6, r4
 8005948:	d105      	bne.n	8005956 <__libc_init_array+0x2e>
 800594a:	bd70      	pop	{r4, r5, r6, pc}
 800594c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005950:	4798      	blx	r3
 8005952:	3601      	adds	r6, #1
 8005954:	e7ee      	b.n	8005934 <__libc_init_array+0xc>
 8005956:	f855 3b04 	ldr.w	r3, [r5], #4
 800595a:	4798      	blx	r3
 800595c:	3601      	adds	r6, #1
 800595e:	e7f2      	b.n	8005946 <__libc_init_array+0x1e>
 8005960:	08007d24 	.word	0x08007d24
 8005964:	08007d24 	.word	0x08007d24
 8005968:	08007d24 	.word	0x08007d24
 800596c:	08007d28 	.word	0x08007d28

08005970 <__retarget_lock_init_recursive>:
 8005970:	4770      	bx	lr

08005972 <__retarget_lock_acquire_recursive>:
 8005972:	4770      	bx	lr

08005974 <__retarget_lock_release_recursive>:
 8005974:	4770      	bx	lr

08005976 <quorem>:
 8005976:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800597a:	6903      	ldr	r3, [r0, #16]
 800597c:	690c      	ldr	r4, [r1, #16]
 800597e:	42a3      	cmp	r3, r4
 8005980:	4607      	mov	r7, r0
 8005982:	db7e      	blt.n	8005a82 <quorem+0x10c>
 8005984:	3c01      	subs	r4, #1
 8005986:	f101 0814 	add.w	r8, r1, #20
 800598a:	f100 0514 	add.w	r5, r0, #20
 800598e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005992:	9301      	str	r3, [sp, #4]
 8005994:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005998:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800599c:	3301      	adds	r3, #1
 800599e:	429a      	cmp	r2, r3
 80059a0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80059a4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80059a8:	fbb2 f6f3 	udiv	r6, r2, r3
 80059ac:	d331      	bcc.n	8005a12 <quorem+0x9c>
 80059ae:	f04f 0e00 	mov.w	lr, #0
 80059b2:	4640      	mov	r0, r8
 80059b4:	46ac      	mov	ip, r5
 80059b6:	46f2      	mov	sl, lr
 80059b8:	f850 2b04 	ldr.w	r2, [r0], #4
 80059bc:	b293      	uxth	r3, r2
 80059be:	fb06 e303 	mla	r3, r6, r3, lr
 80059c2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80059c6:	0c1a      	lsrs	r2, r3, #16
 80059c8:	b29b      	uxth	r3, r3
 80059ca:	ebaa 0303 	sub.w	r3, sl, r3
 80059ce:	f8dc a000 	ldr.w	sl, [ip]
 80059d2:	fa13 f38a 	uxtah	r3, r3, sl
 80059d6:	fb06 220e 	mla	r2, r6, lr, r2
 80059da:	9300      	str	r3, [sp, #0]
 80059dc:	9b00      	ldr	r3, [sp, #0]
 80059de:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80059e2:	b292      	uxth	r2, r2
 80059e4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80059e8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80059ec:	f8bd 3000 	ldrh.w	r3, [sp]
 80059f0:	4581      	cmp	r9, r0
 80059f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80059f6:	f84c 3b04 	str.w	r3, [ip], #4
 80059fa:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80059fe:	d2db      	bcs.n	80059b8 <quorem+0x42>
 8005a00:	f855 300b 	ldr.w	r3, [r5, fp]
 8005a04:	b92b      	cbnz	r3, 8005a12 <quorem+0x9c>
 8005a06:	9b01      	ldr	r3, [sp, #4]
 8005a08:	3b04      	subs	r3, #4
 8005a0a:	429d      	cmp	r5, r3
 8005a0c:	461a      	mov	r2, r3
 8005a0e:	d32c      	bcc.n	8005a6a <quorem+0xf4>
 8005a10:	613c      	str	r4, [r7, #16]
 8005a12:	4638      	mov	r0, r7
 8005a14:	f001 f920 	bl	8006c58 <__mcmp>
 8005a18:	2800      	cmp	r0, #0
 8005a1a:	db22      	blt.n	8005a62 <quorem+0xec>
 8005a1c:	3601      	adds	r6, #1
 8005a1e:	4629      	mov	r1, r5
 8005a20:	2000      	movs	r0, #0
 8005a22:	f858 2b04 	ldr.w	r2, [r8], #4
 8005a26:	f8d1 c000 	ldr.w	ip, [r1]
 8005a2a:	b293      	uxth	r3, r2
 8005a2c:	1ac3      	subs	r3, r0, r3
 8005a2e:	0c12      	lsrs	r2, r2, #16
 8005a30:	fa13 f38c 	uxtah	r3, r3, ip
 8005a34:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8005a38:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005a3c:	b29b      	uxth	r3, r3
 8005a3e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005a42:	45c1      	cmp	r9, r8
 8005a44:	f841 3b04 	str.w	r3, [r1], #4
 8005a48:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005a4c:	d2e9      	bcs.n	8005a22 <quorem+0xac>
 8005a4e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005a52:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005a56:	b922      	cbnz	r2, 8005a62 <quorem+0xec>
 8005a58:	3b04      	subs	r3, #4
 8005a5a:	429d      	cmp	r5, r3
 8005a5c:	461a      	mov	r2, r3
 8005a5e:	d30a      	bcc.n	8005a76 <quorem+0x100>
 8005a60:	613c      	str	r4, [r7, #16]
 8005a62:	4630      	mov	r0, r6
 8005a64:	b003      	add	sp, #12
 8005a66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a6a:	6812      	ldr	r2, [r2, #0]
 8005a6c:	3b04      	subs	r3, #4
 8005a6e:	2a00      	cmp	r2, #0
 8005a70:	d1ce      	bne.n	8005a10 <quorem+0x9a>
 8005a72:	3c01      	subs	r4, #1
 8005a74:	e7c9      	b.n	8005a0a <quorem+0x94>
 8005a76:	6812      	ldr	r2, [r2, #0]
 8005a78:	3b04      	subs	r3, #4
 8005a7a:	2a00      	cmp	r2, #0
 8005a7c:	d1f0      	bne.n	8005a60 <quorem+0xea>
 8005a7e:	3c01      	subs	r4, #1
 8005a80:	e7eb      	b.n	8005a5a <quorem+0xe4>
 8005a82:	2000      	movs	r0, #0
 8005a84:	e7ee      	b.n	8005a64 <quorem+0xee>
	...

08005a88 <_dtoa_r>:
 8005a88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a8c:	ed2d 8b02 	vpush	{d8}
 8005a90:	69c5      	ldr	r5, [r0, #28]
 8005a92:	b091      	sub	sp, #68	; 0x44
 8005a94:	ed8d 0b02 	vstr	d0, [sp, #8]
 8005a98:	ec59 8b10 	vmov	r8, r9, d0
 8005a9c:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8005a9e:	9106      	str	r1, [sp, #24]
 8005aa0:	4606      	mov	r6, r0
 8005aa2:	9208      	str	r2, [sp, #32]
 8005aa4:	930c      	str	r3, [sp, #48]	; 0x30
 8005aa6:	b975      	cbnz	r5, 8005ac6 <_dtoa_r+0x3e>
 8005aa8:	2010      	movs	r0, #16
 8005aaa:	f000 fda5 	bl	80065f8 <malloc>
 8005aae:	4602      	mov	r2, r0
 8005ab0:	61f0      	str	r0, [r6, #28]
 8005ab2:	b920      	cbnz	r0, 8005abe <_dtoa_r+0x36>
 8005ab4:	4ba6      	ldr	r3, [pc, #664]	; (8005d50 <_dtoa_r+0x2c8>)
 8005ab6:	21ef      	movs	r1, #239	; 0xef
 8005ab8:	48a6      	ldr	r0, [pc, #664]	; (8005d54 <_dtoa_r+0x2cc>)
 8005aba:	f001 fc0b 	bl	80072d4 <__assert_func>
 8005abe:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005ac2:	6005      	str	r5, [r0, #0]
 8005ac4:	60c5      	str	r5, [r0, #12]
 8005ac6:	69f3      	ldr	r3, [r6, #28]
 8005ac8:	6819      	ldr	r1, [r3, #0]
 8005aca:	b151      	cbz	r1, 8005ae2 <_dtoa_r+0x5a>
 8005acc:	685a      	ldr	r2, [r3, #4]
 8005ace:	604a      	str	r2, [r1, #4]
 8005ad0:	2301      	movs	r3, #1
 8005ad2:	4093      	lsls	r3, r2
 8005ad4:	608b      	str	r3, [r1, #8]
 8005ad6:	4630      	mov	r0, r6
 8005ad8:	f000 fe82 	bl	80067e0 <_Bfree>
 8005adc:	69f3      	ldr	r3, [r6, #28]
 8005ade:	2200      	movs	r2, #0
 8005ae0:	601a      	str	r2, [r3, #0]
 8005ae2:	f1b9 0300 	subs.w	r3, r9, #0
 8005ae6:	bfbb      	ittet	lt
 8005ae8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005aec:	9303      	strlt	r3, [sp, #12]
 8005aee:	2300      	movge	r3, #0
 8005af0:	2201      	movlt	r2, #1
 8005af2:	bfac      	ite	ge
 8005af4:	6023      	strge	r3, [r4, #0]
 8005af6:	6022      	strlt	r2, [r4, #0]
 8005af8:	4b97      	ldr	r3, [pc, #604]	; (8005d58 <_dtoa_r+0x2d0>)
 8005afa:	9c03      	ldr	r4, [sp, #12]
 8005afc:	43a3      	bics	r3, r4
 8005afe:	d11c      	bne.n	8005b3a <_dtoa_r+0xb2>
 8005b00:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005b02:	f242 730f 	movw	r3, #9999	; 0x270f
 8005b06:	6013      	str	r3, [r2, #0]
 8005b08:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8005b0c:	ea53 0308 	orrs.w	r3, r3, r8
 8005b10:	f000 84fb 	beq.w	800650a <_dtoa_r+0xa82>
 8005b14:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005b16:	b963      	cbnz	r3, 8005b32 <_dtoa_r+0xaa>
 8005b18:	4b90      	ldr	r3, [pc, #576]	; (8005d5c <_dtoa_r+0x2d4>)
 8005b1a:	e020      	b.n	8005b5e <_dtoa_r+0xd6>
 8005b1c:	4b90      	ldr	r3, [pc, #576]	; (8005d60 <_dtoa_r+0x2d8>)
 8005b1e:	9301      	str	r3, [sp, #4]
 8005b20:	3308      	adds	r3, #8
 8005b22:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8005b24:	6013      	str	r3, [r2, #0]
 8005b26:	9801      	ldr	r0, [sp, #4]
 8005b28:	b011      	add	sp, #68	; 0x44
 8005b2a:	ecbd 8b02 	vpop	{d8}
 8005b2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b32:	4b8a      	ldr	r3, [pc, #552]	; (8005d5c <_dtoa_r+0x2d4>)
 8005b34:	9301      	str	r3, [sp, #4]
 8005b36:	3303      	adds	r3, #3
 8005b38:	e7f3      	b.n	8005b22 <_dtoa_r+0x9a>
 8005b3a:	ed9d 8b02 	vldr	d8, [sp, #8]
 8005b3e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8005b42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b46:	d10c      	bne.n	8005b62 <_dtoa_r+0xda>
 8005b48:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005b4a:	2301      	movs	r3, #1
 8005b4c:	6013      	str	r3, [r2, #0]
 8005b4e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	f000 84d7 	beq.w	8006504 <_dtoa_r+0xa7c>
 8005b56:	4b83      	ldr	r3, [pc, #524]	; (8005d64 <_dtoa_r+0x2dc>)
 8005b58:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8005b5a:	6013      	str	r3, [r2, #0]
 8005b5c:	3b01      	subs	r3, #1
 8005b5e:	9301      	str	r3, [sp, #4]
 8005b60:	e7e1      	b.n	8005b26 <_dtoa_r+0x9e>
 8005b62:	aa0e      	add	r2, sp, #56	; 0x38
 8005b64:	a90f      	add	r1, sp, #60	; 0x3c
 8005b66:	4630      	mov	r0, r6
 8005b68:	eeb0 0b48 	vmov.f64	d0, d8
 8005b6c:	f001 f91a 	bl	8006da4 <__d2b>
 8005b70:	f3c4 530a 	ubfx	r3, r4, #20, #11
 8005b74:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005b76:	4605      	mov	r5, r0
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d046      	beq.n	8005c0a <_dtoa_r+0x182>
 8005b7c:	eeb0 7b48 	vmov.f64	d7, d8
 8005b80:	ee18 1a90 	vmov	r1, s17
 8005b84:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8005b88:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 8005b8c:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8005b90:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8005b94:	2000      	movs	r0, #0
 8005b96:	ee07 1a90 	vmov	s15, r1
 8005b9a:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 8005b9e:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8005d38 <_dtoa_r+0x2b0>
 8005ba2:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005ba6:	ed9f 6b66 	vldr	d6, [pc, #408]	; 8005d40 <_dtoa_r+0x2b8>
 8005baa:	eea7 6b05 	vfma.f64	d6, d7, d5
 8005bae:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8005d48 <_dtoa_r+0x2c0>
 8005bb2:	ee07 3a90 	vmov	s15, r3
 8005bb6:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8005bba:	eeb0 7b46 	vmov.f64	d7, d6
 8005bbe:	eea4 7b05 	vfma.f64	d7, d4, d5
 8005bc2:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8005bc6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8005bca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005bce:	ee16 ba90 	vmov	fp, s13
 8005bd2:	9009      	str	r0, [sp, #36]	; 0x24
 8005bd4:	d508      	bpl.n	8005be8 <_dtoa_r+0x160>
 8005bd6:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8005bda:	eeb4 6b47 	vcmp.f64	d6, d7
 8005bde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005be2:	bf18      	it	ne
 8005be4:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8005be8:	f1bb 0f16 	cmp.w	fp, #22
 8005bec:	d82b      	bhi.n	8005c46 <_dtoa_r+0x1be>
 8005bee:	495e      	ldr	r1, [pc, #376]	; (8005d68 <_dtoa_r+0x2e0>)
 8005bf0:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8005bf4:	ed91 7b00 	vldr	d7, [r1]
 8005bf8:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8005bfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c00:	d501      	bpl.n	8005c06 <_dtoa_r+0x17e>
 8005c02:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005c06:	2100      	movs	r1, #0
 8005c08:	e01e      	b.n	8005c48 <_dtoa_r+0x1c0>
 8005c0a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005c0c:	4413      	add	r3, r2
 8005c0e:	f203 4132 	addw	r1, r3, #1074	; 0x432
 8005c12:	2920      	cmp	r1, #32
 8005c14:	bfc1      	itttt	gt
 8005c16:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 8005c1a:	408c      	lslgt	r4, r1
 8005c1c:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 8005c20:	fa28 f101 	lsrgt.w	r1, r8, r1
 8005c24:	bfd6      	itet	le
 8005c26:	f1c1 0120 	rsble	r1, r1, #32
 8005c2a:	4321      	orrgt	r1, r4
 8005c2c:	fa08 f101 	lslle.w	r1, r8, r1
 8005c30:	ee07 1a90 	vmov	s15, r1
 8005c34:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8005c38:	3b01      	subs	r3, #1
 8005c3a:	ee17 1a90 	vmov	r1, s15
 8005c3e:	2001      	movs	r0, #1
 8005c40:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8005c44:	e7a7      	b.n	8005b96 <_dtoa_r+0x10e>
 8005c46:	2101      	movs	r1, #1
 8005c48:	1ad2      	subs	r2, r2, r3
 8005c4a:	1e53      	subs	r3, r2, #1
 8005c4c:	9305      	str	r3, [sp, #20]
 8005c4e:	bf45      	ittet	mi
 8005c50:	f1c2 0301 	rsbmi	r3, r2, #1
 8005c54:	9304      	strmi	r3, [sp, #16]
 8005c56:	2300      	movpl	r3, #0
 8005c58:	2300      	movmi	r3, #0
 8005c5a:	bf4c      	ite	mi
 8005c5c:	9305      	strmi	r3, [sp, #20]
 8005c5e:	9304      	strpl	r3, [sp, #16]
 8005c60:	f1bb 0f00 	cmp.w	fp, #0
 8005c64:	910b      	str	r1, [sp, #44]	; 0x2c
 8005c66:	db18      	blt.n	8005c9a <_dtoa_r+0x212>
 8005c68:	9b05      	ldr	r3, [sp, #20]
 8005c6a:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8005c6e:	445b      	add	r3, fp
 8005c70:	9305      	str	r3, [sp, #20]
 8005c72:	2300      	movs	r3, #0
 8005c74:	9a06      	ldr	r2, [sp, #24]
 8005c76:	2a09      	cmp	r2, #9
 8005c78:	d848      	bhi.n	8005d0c <_dtoa_r+0x284>
 8005c7a:	2a05      	cmp	r2, #5
 8005c7c:	bfc4      	itt	gt
 8005c7e:	3a04      	subgt	r2, #4
 8005c80:	9206      	strgt	r2, [sp, #24]
 8005c82:	9a06      	ldr	r2, [sp, #24]
 8005c84:	f1a2 0202 	sub.w	r2, r2, #2
 8005c88:	bfcc      	ite	gt
 8005c8a:	2400      	movgt	r4, #0
 8005c8c:	2401      	movle	r4, #1
 8005c8e:	2a03      	cmp	r2, #3
 8005c90:	d847      	bhi.n	8005d22 <_dtoa_r+0x29a>
 8005c92:	e8df f002 	tbb	[pc, r2]
 8005c96:	2d0b      	.short	0x2d0b
 8005c98:	392b      	.short	0x392b
 8005c9a:	9b04      	ldr	r3, [sp, #16]
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	eba3 030b 	sub.w	r3, r3, fp
 8005ca2:	9304      	str	r3, [sp, #16]
 8005ca4:	920a      	str	r2, [sp, #40]	; 0x28
 8005ca6:	f1cb 0300 	rsb	r3, fp, #0
 8005caa:	e7e3      	b.n	8005c74 <_dtoa_r+0x1ec>
 8005cac:	2200      	movs	r2, #0
 8005cae:	9207      	str	r2, [sp, #28]
 8005cb0:	9a08      	ldr	r2, [sp, #32]
 8005cb2:	2a00      	cmp	r2, #0
 8005cb4:	dc38      	bgt.n	8005d28 <_dtoa_r+0x2a0>
 8005cb6:	f04f 0a01 	mov.w	sl, #1
 8005cba:	46d1      	mov	r9, sl
 8005cbc:	4652      	mov	r2, sl
 8005cbe:	f8cd a020 	str.w	sl, [sp, #32]
 8005cc2:	69f7      	ldr	r7, [r6, #28]
 8005cc4:	2100      	movs	r1, #0
 8005cc6:	2004      	movs	r0, #4
 8005cc8:	f100 0c14 	add.w	ip, r0, #20
 8005ccc:	4594      	cmp	ip, r2
 8005cce:	d930      	bls.n	8005d32 <_dtoa_r+0x2aa>
 8005cd0:	6079      	str	r1, [r7, #4]
 8005cd2:	4630      	mov	r0, r6
 8005cd4:	930d      	str	r3, [sp, #52]	; 0x34
 8005cd6:	f000 fd43 	bl	8006760 <_Balloc>
 8005cda:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005cdc:	9001      	str	r0, [sp, #4]
 8005cde:	4602      	mov	r2, r0
 8005ce0:	2800      	cmp	r0, #0
 8005ce2:	d145      	bne.n	8005d70 <_dtoa_r+0x2e8>
 8005ce4:	4b21      	ldr	r3, [pc, #132]	; (8005d6c <_dtoa_r+0x2e4>)
 8005ce6:	f240 11af 	movw	r1, #431	; 0x1af
 8005cea:	e6e5      	b.n	8005ab8 <_dtoa_r+0x30>
 8005cec:	2201      	movs	r2, #1
 8005cee:	e7de      	b.n	8005cae <_dtoa_r+0x226>
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	9207      	str	r2, [sp, #28]
 8005cf4:	9a08      	ldr	r2, [sp, #32]
 8005cf6:	eb0b 0a02 	add.w	sl, fp, r2
 8005cfa:	f10a 0901 	add.w	r9, sl, #1
 8005cfe:	464a      	mov	r2, r9
 8005d00:	2a01      	cmp	r2, #1
 8005d02:	bfb8      	it	lt
 8005d04:	2201      	movlt	r2, #1
 8005d06:	e7dc      	b.n	8005cc2 <_dtoa_r+0x23a>
 8005d08:	2201      	movs	r2, #1
 8005d0a:	e7f2      	b.n	8005cf2 <_dtoa_r+0x26a>
 8005d0c:	2401      	movs	r4, #1
 8005d0e:	2200      	movs	r2, #0
 8005d10:	e9cd 2406 	strd	r2, r4, [sp, #24]
 8005d14:	f04f 3aff 	mov.w	sl, #4294967295
 8005d18:	2100      	movs	r1, #0
 8005d1a:	46d1      	mov	r9, sl
 8005d1c:	2212      	movs	r2, #18
 8005d1e:	9108      	str	r1, [sp, #32]
 8005d20:	e7cf      	b.n	8005cc2 <_dtoa_r+0x23a>
 8005d22:	2201      	movs	r2, #1
 8005d24:	9207      	str	r2, [sp, #28]
 8005d26:	e7f5      	b.n	8005d14 <_dtoa_r+0x28c>
 8005d28:	f8dd a020 	ldr.w	sl, [sp, #32]
 8005d2c:	46d1      	mov	r9, sl
 8005d2e:	4652      	mov	r2, sl
 8005d30:	e7c7      	b.n	8005cc2 <_dtoa_r+0x23a>
 8005d32:	3101      	adds	r1, #1
 8005d34:	0040      	lsls	r0, r0, #1
 8005d36:	e7c7      	b.n	8005cc8 <_dtoa_r+0x240>
 8005d38:	636f4361 	.word	0x636f4361
 8005d3c:	3fd287a7 	.word	0x3fd287a7
 8005d40:	8b60c8b3 	.word	0x8b60c8b3
 8005d44:	3fc68a28 	.word	0x3fc68a28
 8005d48:	509f79fb 	.word	0x509f79fb
 8005d4c:	3fd34413 	.word	0x3fd34413
 8005d50:	080079ed 	.word	0x080079ed
 8005d54:	08007a04 	.word	0x08007a04
 8005d58:	7ff00000 	.word	0x7ff00000
 8005d5c:	080079e9 	.word	0x080079e9
 8005d60:	080079e0 	.word	0x080079e0
 8005d64:	080079bd 	.word	0x080079bd
 8005d68:	08007af0 	.word	0x08007af0
 8005d6c:	08007a5c 	.word	0x08007a5c
 8005d70:	69f2      	ldr	r2, [r6, #28]
 8005d72:	9901      	ldr	r1, [sp, #4]
 8005d74:	6011      	str	r1, [r2, #0]
 8005d76:	f1b9 0f0e 	cmp.w	r9, #14
 8005d7a:	d86c      	bhi.n	8005e56 <_dtoa_r+0x3ce>
 8005d7c:	2c00      	cmp	r4, #0
 8005d7e:	d06a      	beq.n	8005e56 <_dtoa_r+0x3ce>
 8005d80:	f1bb 0f00 	cmp.w	fp, #0
 8005d84:	f340 80a0 	ble.w	8005ec8 <_dtoa_r+0x440>
 8005d88:	4ac1      	ldr	r2, [pc, #772]	; (8006090 <_dtoa_r+0x608>)
 8005d8a:	f00b 010f 	and.w	r1, fp, #15
 8005d8e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8005d92:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8005d96:	ed92 7b00 	vldr	d7, [r2]
 8005d9a:	ea4f 122b 	mov.w	r2, fp, asr #4
 8005d9e:	f000 8087 	beq.w	8005eb0 <_dtoa_r+0x428>
 8005da2:	49bc      	ldr	r1, [pc, #752]	; (8006094 <_dtoa_r+0x60c>)
 8005da4:	ed91 6b08 	vldr	d6, [r1, #32]
 8005da8:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8005dac:	ed8d 6b02 	vstr	d6, [sp, #8]
 8005db0:	f002 020f 	and.w	r2, r2, #15
 8005db4:	2103      	movs	r1, #3
 8005db6:	48b7      	ldr	r0, [pc, #732]	; (8006094 <_dtoa_r+0x60c>)
 8005db8:	2a00      	cmp	r2, #0
 8005dba:	d17b      	bne.n	8005eb4 <_dtoa_r+0x42c>
 8005dbc:	ed9d 6b02 	vldr	d6, [sp, #8]
 8005dc0:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8005dc4:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005dc8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005dca:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005dce:	2a00      	cmp	r2, #0
 8005dd0:	f000 80a0 	beq.w	8005f14 <_dtoa_r+0x48c>
 8005dd4:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8005dd8:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8005ddc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005de0:	f140 8098 	bpl.w	8005f14 <_dtoa_r+0x48c>
 8005de4:	f1b9 0f00 	cmp.w	r9, #0
 8005de8:	f000 8094 	beq.w	8005f14 <_dtoa_r+0x48c>
 8005dec:	f1ba 0f00 	cmp.w	sl, #0
 8005df0:	dd2f      	ble.n	8005e52 <_dtoa_r+0x3ca>
 8005df2:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8005df6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005dfa:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005dfe:	f10b 32ff 	add.w	r2, fp, #4294967295
 8005e02:	3101      	adds	r1, #1
 8005e04:	4654      	mov	r4, sl
 8005e06:	ed9d 6b02 	vldr	d6, [sp, #8]
 8005e0a:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8005e0e:	ee07 1a90 	vmov	s15, r1
 8005e12:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8005e16:	eea7 5b06 	vfma.f64	d5, d7, d6
 8005e1a:	ee15 7a90 	vmov	r7, s11
 8005e1e:	ec51 0b15 	vmov	r0, r1, d5
 8005e22:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 8005e26:	2c00      	cmp	r4, #0
 8005e28:	d177      	bne.n	8005f1a <_dtoa_r+0x492>
 8005e2a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8005e2e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8005e32:	ec41 0b17 	vmov	d7, r0, r1
 8005e36:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005e3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e3e:	f300 826a 	bgt.w	8006316 <_dtoa_r+0x88e>
 8005e42:	eeb1 7b47 	vneg.f64	d7, d7
 8005e46:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005e4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e4e:	f100 8260 	bmi.w	8006312 <_dtoa_r+0x88a>
 8005e52:	ed8d 8b02 	vstr	d8, [sp, #8]
 8005e56:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005e58:	2a00      	cmp	r2, #0
 8005e5a:	f2c0 811d 	blt.w	8006098 <_dtoa_r+0x610>
 8005e5e:	f1bb 0f0e 	cmp.w	fp, #14
 8005e62:	f300 8119 	bgt.w	8006098 <_dtoa_r+0x610>
 8005e66:	4b8a      	ldr	r3, [pc, #552]	; (8006090 <_dtoa_r+0x608>)
 8005e68:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005e6c:	ed93 6b00 	vldr	d6, [r3]
 8005e70:	9b08      	ldr	r3, [sp, #32]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	f280 80b7 	bge.w	8005fe6 <_dtoa_r+0x55e>
 8005e78:	f1b9 0f00 	cmp.w	r9, #0
 8005e7c:	f300 80b3 	bgt.w	8005fe6 <_dtoa_r+0x55e>
 8005e80:	f040 8246 	bne.w	8006310 <_dtoa_r+0x888>
 8005e84:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8005e88:	ee26 6b07 	vmul.f64	d6, d6, d7
 8005e8c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005e90:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005e94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e98:	464c      	mov	r4, r9
 8005e9a:	464f      	mov	r7, r9
 8005e9c:	f280 821c 	bge.w	80062d8 <_dtoa_r+0x850>
 8005ea0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8005ea4:	2331      	movs	r3, #49	; 0x31
 8005ea6:	f808 3b01 	strb.w	r3, [r8], #1
 8005eaa:	f10b 0b01 	add.w	fp, fp, #1
 8005eae:	e218      	b.n	80062e2 <_dtoa_r+0x85a>
 8005eb0:	2102      	movs	r1, #2
 8005eb2:	e780      	b.n	8005db6 <_dtoa_r+0x32e>
 8005eb4:	07d4      	lsls	r4, r2, #31
 8005eb6:	d504      	bpl.n	8005ec2 <_dtoa_r+0x43a>
 8005eb8:	ed90 6b00 	vldr	d6, [r0]
 8005ebc:	3101      	adds	r1, #1
 8005ebe:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005ec2:	1052      	asrs	r2, r2, #1
 8005ec4:	3008      	adds	r0, #8
 8005ec6:	e777      	b.n	8005db8 <_dtoa_r+0x330>
 8005ec8:	d022      	beq.n	8005f10 <_dtoa_r+0x488>
 8005eca:	f1cb 0200 	rsb	r2, fp, #0
 8005ece:	4970      	ldr	r1, [pc, #448]	; (8006090 <_dtoa_r+0x608>)
 8005ed0:	f002 000f 	and.w	r0, r2, #15
 8005ed4:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8005ed8:	ed91 7b00 	vldr	d7, [r1]
 8005edc:	ee28 7b07 	vmul.f64	d7, d8, d7
 8005ee0:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005ee4:	486b      	ldr	r0, [pc, #428]	; (8006094 <_dtoa_r+0x60c>)
 8005ee6:	1112      	asrs	r2, r2, #4
 8005ee8:	2400      	movs	r4, #0
 8005eea:	2102      	movs	r1, #2
 8005eec:	b92a      	cbnz	r2, 8005efa <_dtoa_r+0x472>
 8005eee:	2c00      	cmp	r4, #0
 8005ef0:	f43f af6a 	beq.w	8005dc8 <_dtoa_r+0x340>
 8005ef4:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005ef8:	e766      	b.n	8005dc8 <_dtoa_r+0x340>
 8005efa:	07d7      	lsls	r7, r2, #31
 8005efc:	d505      	bpl.n	8005f0a <_dtoa_r+0x482>
 8005efe:	ed90 6b00 	vldr	d6, [r0]
 8005f02:	3101      	adds	r1, #1
 8005f04:	2401      	movs	r4, #1
 8005f06:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005f0a:	1052      	asrs	r2, r2, #1
 8005f0c:	3008      	adds	r0, #8
 8005f0e:	e7ed      	b.n	8005eec <_dtoa_r+0x464>
 8005f10:	2102      	movs	r1, #2
 8005f12:	e759      	b.n	8005dc8 <_dtoa_r+0x340>
 8005f14:	465a      	mov	r2, fp
 8005f16:	464c      	mov	r4, r9
 8005f18:	e775      	b.n	8005e06 <_dtoa_r+0x37e>
 8005f1a:	ec41 0b17 	vmov	d7, r0, r1
 8005f1e:	495c      	ldr	r1, [pc, #368]	; (8006090 <_dtoa_r+0x608>)
 8005f20:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 8005f24:	ed11 4b02 	vldr	d4, [r1, #-8]
 8005f28:	9901      	ldr	r1, [sp, #4]
 8005f2a:	440c      	add	r4, r1
 8005f2c:	9907      	ldr	r1, [sp, #28]
 8005f2e:	b351      	cbz	r1, 8005f86 <_dtoa_r+0x4fe>
 8005f30:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8005f34:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8005f38:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8005f3c:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8005f40:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8005f44:	ee35 7b47 	vsub.f64	d7, d5, d7
 8005f48:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8005f4c:	ee14 1a90 	vmov	r1, s9
 8005f50:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8005f54:	3130      	adds	r1, #48	; 0x30
 8005f56:	ee36 6b45 	vsub.f64	d6, d6, d5
 8005f5a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005f5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f62:	f808 1b01 	strb.w	r1, [r8], #1
 8005f66:	d439      	bmi.n	8005fdc <_dtoa_r+0x554>
 8005f68:	ee32 5b46 	vsub.f64	d5, d2, d6
 8005f6c:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8005f70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f74:	d472      	bmi.n	800605c <_dtoa_r+0x5d4>
 8005f76:	45a0      	cmp	r8, r4
 8005f78:	f43f af6b 	beq.w	8005e52 <_dtoa_r+0x3ca>
 8005f7c:	ee27 7b03 	vmul.f64	d7, d7, d3
 8005f80:	ee26 6b03 	vmul.f64	d6, d6, d3
 8005f84:	e7e0      	b.n	8005f48 <_dtoa_r+0x4c0>
 8005f86:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8005f8a:	ee27 7b04 	vmul.f64	d7, d7, d4
 8005f8e:	4620      	mov	r0, r4
 8005f90:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8005f94:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8005f98:	ee14 1a90 	vmov	r1, s9
 8005f9c:	3130      	adds	r1, #48	; 0x30
 8005f9e:	f808 1b01 	strb.w	r1, [r8], #1
 8005fa2:	45a0      	cmp	r8, r4
 8005fa4:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8005fa8:	ee36 6b45 	vsub.f64	d6, d6, d5
 8005fac:	d118      	bne.n	8005fe0 <_dtoa_r+0x558>
 8005fae:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8005fb2:	ee37 4b05 	vadd.f64	d4, d7, d5
 8005fb6:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8005fba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005fbe:	dc4d      	bgt.n	800605c <_dtoa_r+0x5d4>
 8005fc0:	ee35 5b47 	vsub.f64	d5, d5, d7
 8005fc4:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8005fc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005fcc:	f57f af41 	bpl.w	8005e52 <_dtoa_r+0x3ca>
 8005fd0:	4680      	mov	r8, r0
 8005fd2:	3801      	subs	r0, #1
 8005fd4:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8005fd8:	2b30      	cmp	r3, #48	; 0x30
 8005fda:	d0f9      	beq.n	8005fd0 <_dtoa_r+0x548>
 8005fdc:	4693      	mov	fp, r2
 8005fde:	e02a      	b.n	8006036 <_dtoa_r+0x5ae>
 8005fe0:	ee26 6b03 	vmul.f64	d6, d6, d3
 8005fe4:	e7d6      	b.n	8005f94 <_dtoa_r+0x50c>
 8005fe6:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005fea:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8005fee:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8005ff2:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8005ff6:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8005ffa:	ee15 3a10 	vmov	r3, s10
 8005ffe:	3330      	adds	r3, #48	; 0x30
 8006000:	f808 3b01 	strb.w	r3, [r8], #1
 8006004:	9b01      	ldr	r3, [sp, #4]
 8006006:	eba8 0303 	sub.w	r3, r8, r3
 800600a:	4599      	cmp	r9, r3
 800600c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8006010:	eea3 7b46 	vfms.f64	d7, d3, d6
 8006014:	d133      	bne.n	800607e <_dtoa_r+0x5f6>
 8006016:	ee37 7b07 	vadd.f64	d7, d7, d7
 800601a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800601e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006022:	dc1a      	bgt.n	800605a <_dtoa_r+0x5d2>
 8006024:	eeb4 7b46 	vcmp.f64	d7, d6
 8006028:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800602c:	d103      	bne.n	8006036 <_dtoa_r+0x5ae>
 800602e:	ee15 3a10 	vmov	r3, s10
 8006032:	07d9      	lsls	r1, r3, #31
 8006034:	d411      	bmi.n	800605a <_dtoa_r+0x5d2>
 8006036:	4629      	mov	r1, r5
 8006038:	4630      	mov	r0, r6
 800603a:	f000 fbd1 	bl	80067e0 <_Bfree>
 800603e:	2300      	movs	r3, #0
 8006040:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006042:	f888 3000 	strb.w	r3, [r8]
 8006046:	f10b 0301 	add.w	r3, fp, #1
 800604a:	6013      	str	r3, [r2, #0]
 800604c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800604e:	2b00      	cmp	r3, #0
 8006050:	f43f ad69 	beq.w	8005b26 <_dtoa_r+0x9e>
 8006054:	f8c3 8000 	str.w	r8, [r3]
 8006058:	e565      	b.n	8005b26 <_dtoa_r+0x9e>
 800605a:	465a      	mov	r2, fp
 800605c:	4643      	mov	r3, r8
 800605e:	4698      	mov	r8, r3
 8006060:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 8006064:	2939      	cmp	r1, #57	; 0x39
 8006066:	d106      	bne.n	8006076 <_dtoa_r+0x5ee>
 8006068:	9901      	ldr	r1, [sp, #4]
 800606a:	4299      	cmp	r1, r3
 800606c:	d1f7      	bne.n	800605e <_dtoa_r+0x5d6>
 800606e:	9801      	ldr	r0, [sp, #4]
 8006070:	2130      	movs	r1, #48	; 0x30
 8006072:	3201      	adds	r2, #1
 8006074:	7001      	strb	r1, [r0, #0]
 8006076:	7819      	ldrb	r1, [r3, #0]
 8006078:	3101      	adds	r1, #1
 800607a:	7019      	strb	r1, [r3, #0]
 800607c:	e7ae      	b.n	8005fdc <_dtoa_r+0x554>
 800607e:	ee27 7b04 	vmul.f64	d7, d7, d4
 8006082:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006086:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800608a:	d1b2      	bne.n	8005ff2 <_dtoa_r+0x56a>
 800608c:	e7d3      	b.n	8006036 <_dtoa_r+0x5ae>
 800608e:	bf00      	nop
 8006090:	08007af0 	.word	0x08007af0
 8006094:	08007ac8 	.word	0x08007ac8
 8006098:	9907      	ldr	r1, [sp, #28]
 800609a:	2900      	cmp	r1, #0
 800609c:	f000 80d0 	beq.w	8006240 <_dtoa_r+0x7b8>
 80060a0:	9906      	ldr	r1, [sp, #24]
 80060a2:	2901      	cmp	r1, #1
 80060a4:	f300 80b4 	bgt.w	8006210 <_dtoa_r+0x788>
 80060a8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80060aa:	2900      	cmp	r1, #0
 80060ac:	f000 80ac 	beq.w	8006208 <_dtoa_r+0x780>
 80060b0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80060b4:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80060b8:	461c      	mov	r4, r3
 80060ba:	9309      	str	r3, [sp, #36]	; 0x24
 80060bc:	9b04      	ldr	r3, [sp, #16]
 80060be:	4413      	add	r3, r2
 80060c0:	9304      	str	r3, [sp, #16]
 80060c2:	9b05      	ldr	r3, [sp, #20]
 80060c4:	2101      	movs	r1, #1
 80060c6:	4413      	add	r3, r2
 80060c8:	4630      	mov	r0, r6
 80060ca:	9305      	str	r3, [sp, #20]
 80060cc:	f000 fc3e 	bl	800694c <__i2b>
 80060d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060d2:	4607      	mov	r7, r0
 80060d4:	f1b8 0f00 	cmp.w	r8, #0
 80060d8:	d00d      	beq.n	80060f6 <_dtoa_r+0x66e>
 80060da:	9a05      	ldr	r2, [sp, #20]
 80060dc:	2a00      	cmp	r2, #0
 80060de:	dd0a      	ble.n	80060f6 <_dtoa_r+0x66e>
 80060e0:	4542      	cmp	r2, r8
 80060e2:	9904      	ldr	r1, [sp, #16]
 80060e4:	bfa8      	it	ge
 80060e6:	4642      	movge	r2, r8
 80060e8:	1a89      	subs	r1, r1, r2
 80060ea:	9104      	str	r1, [sp, #16]
 80060ec:	9905      	ldr	r1, [sp, #20]
 80060ee:	eba8 0802 	sub.w	r8, r8, r2
 80060f2:	1a8a      	subs	r2, r1, r2
 80060f4:	9205      	str	r2, [sp, #20]
 80060f6:	b303      	cbz	r3, 800613a <_dtoa_r+0x6b2>
 80060f8:	9a07      	ldr	r2, [sp, #28]
 80060fa:	2a00      	cmp	r2, #0
 80060fc:	f000 80a5 	beq.w	800624a <_dtoa_r+0x7c2>
 8006100:	2c00      	cmp	r4, #0
 8006102:	dd13      	ble.n	800612c <_dtoa_r+0x6a4>
 8006104:	4639      	mov	r1, r7
 8006106:	4622      	mov	r2, r4
 8006108:	4630      	mov	r0, r6
 800610a:	930d      	str	r3, [sp, #52]	; 0x34
 800610c:	f000 fcde 	bl	8006acc <__pow5mult>
 8006110:	462a      	mov	r2, r5
 8006112:	4601      	mov	r1, r0
 8006114:	4607      	mov	r7, r0
 8006116:	4630      	mov	r0, r6
 8006118:	f000 fc2e 	bl	8006978 <__multiply>
 800611c:	4629      	mov	r1, r5
 800611e:	9009      	str	r0, [sp, #36]	; 0x24
 8006120:	4630      	mov	r0, r6
 8006122:	f000 fb5d 	bl	80067e0 <_Bfree>
 8006126:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006128:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800612a:	4615      	mov	r5, r2
 800612c:	1b1a      	subs	r2, r3, r4
 800612e:	d004      	beq.n	800613a <_dtoa_r+0x6b2>
 8006130:	4629      	mov	r1, r5
 8006132:	4630      	mov	r0, r6
 8006134:	f000 fcca 	bl	8006acc <__pow5mult>
 8006138:	4605      	mov	r5, r0
 800613a:	2101      	movs	r1, #1
 800613c:	4630      	mov	r0, r6
 800613e:	f000 fc05 	bl	800694c <__i2b>
 8006142:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006144:	2b00      	cmp	r3, #0
 8006146:	4604      	mov	r4, r0
 8006148:	f340 8081 	ble.w	800624e <_dtoa_r+0x7c6>
 800614c:	461a      	mov	r2, r3
 800614e:	4601      	mov	r1, r0
 8006150:	4630      	mov	r0, r6
 8006152:	f000 fcbb 	bl	8006acc <__pow5mult>
 8006156:	9b06      	ldr	r3, [sp, #24]
 8006158:	2b01      	cmp	r3, #1
 800615a:	4604      	mov	r4, r0
 800615c:	dd7a      	ble.n	8006254 <_dtoa_r+0x7cc>
 800615e:	2300      	movs	r3, #0
 8006160:	9309      	str	r3, [sp, #36]	; 0x24
 8006162:	6922      	ldr	r2, [r4, #16]
 8006164:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8006168:	6910      	ldr	r0, [r2, #16]
 800616a:	f000 fba1 	bl	80068b0 <__hi0bits>
 800616e:	f1c0 0020 	rsb	r0, r0, #32
 8006172:	9b05      	ldr	r3, [sp, #20]
 8006174:	4418      	add	r0, r3
 8006176:	f010 001f 	ands.w	r0, r0, #31
 800617a:	f000 8093 	beq.w	80062a4 <_dtoa_r+0x81c>
 800617e:	f1c0 0220 	rsb	r2, r0, #32
 8006182:	2a04      	cmp	r2, #4
 8006184:	f340 8085 	ble.w	8006292 <_dtoa_r+0x80a>
 8006188:	9b04      	ldr	r3, [sp, #16]
 800618a:	f1c0 001c 	rsb	r0, r0, #28
 800618e:	4403      	add	r3, r0
 8006190:	9304      	str	r3, [sp, #16]
 8006192:	9b05      	ldr	r3, [sp, #20]
 8006194:	4480      	add	r8, r0
 8006196:	4403      	add	r3, r0
 8006198:	9305      	str	r3, [sp, #20]
 800619a:	9b04      	ldr	r3, [sp, #16]
 800619c:	2b00      	cmp	r3, #0
 800619e:	dd05      	ble.n	80061ac <_dtoa_r+0x724>
 80061a0:	4629      	mov	r1, r5
 80061a2:	461a      	mov	r2, r3
 80061a4:	4630      	mov	r0, r6
 80061a6:	f000 fceb 	bl	8006b80 <__lshift>
 80061aa:	4605      	mov	r5, r0
 80061ac:	9b05      	ldr	r3, [sp, #20]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	dd05      	ble.n	80061be <_dtoa_r+0x736>
 80061b2:	4621      	mov	r1, r4
 80061b4:	461a      	mov	r2, r3
 80061b6:	4630      	mov	r0, r6
 80061b8:	f000 fce2 	bl	8006b80 <__lshift>
 80061bc:	4604      	mov	r4, r0
 80061be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d071      	beq.n	80062a8 <_dtoa_r+0x820>
 80061c4:	4621      	mov	r1, r4
 80061c6:	4628      	mov	r0, r5
 80061c8:	f000 fd46 	bl	8006c58 <__mcmp>
 80061cc:	2800      	cmp	r0, #0
 80061ce:	da6b      	bge.n	80062a8 <_dtoa_r+0x820>
 80061d0:	2300      	movs	r3, #0
 80061d2:	4629      	mov	r1, r5
 80061d4:	220a      	movs	r2, #10
 80061d6:	4630      	mov	r0, r6
 80061d8:	f000 fb24 	bl	8006824 <__multadd>
 80061dc:	9b07      	ldr	r3, [sp, #28]
 80061de:	f10b 3bff 	add.w	fp, fp, #4294967295
 80061e2:	4605      	mov	r5, r0
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	f000 8197 	beq.w	8006518 <_dtoa_r+0xa90>
 80061ea:	4639      	mov	r1, r7
 80061ec:	2300      	movs	r3, #0
 80061ee:	220a      	movs	r2, #10
 80061f0:	4630      	mov	r0, r6
 80061f2:	f000 fb17 	bl	8006824 <__multadd>
 80061f6:	f1ba 0f00 	cmp.w	sl, #0
 80061fa:	4607      	mov	r7, r0
 80061fc:	f300 8093 	bgt.w	8006326 <_dtoa_r+0x89e>
 8006200:	9b06      	ldr	r3, [sp, #24]
 8006202:	2b02      	cmp	r3, #2
 8006204:	dc57      	bgt.n	80062b6 <_dtoa_r+0x82e>
 8006206:	e08e      	b.n	8006326 <_dtoa_r+0x89e>
 8006208:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800620a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800620e:	e751      	b.n	80060b4 <_dtoa_r+0x62c>
 8006210:	f109 34ff 	add.w	r4, r9, #4294967295
 8006214:	42a3      	cmp	r3, r4
 8006216:	bfbf      	itttt	lt
 8006218:	1ae2      	sublt	r2, r4, r3
 800621a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800621c:	189b      	addlt	r3, r3, r2
 800621e:	930a      	strlt	r3, [sp, #40]	; 0x28
 8006220:	bfae      	itee	ge
 8006222:	1b1c      	subge	r4, r3, r4
 8006224:	4623      	movlt	r3, r4
 8006226:	2400      	movlt	r4, #0
 8006228:	f1b9 0f00 	cmp.w	r9, #0
 800622c:	bfb5      	itete	lt
 800622e:	9a04      	ldrlt	r2, [sp, #16]
 8006230:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 8006234:	eba2 0809 	sublt.w	r8, r2, r9
 8006238:	464a      	movge	r2, r9
 800623a:	bfb8      	it	lt
 800623c:	2200      	movlt	r2, #0
 800623e:	e73c      	b.n	80060ba <_dtoa_r+0x632>
 8006240:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8006244:	9f07      	ldr	r7, [sp, #28]
 8006246:	461c      	mov	r4, r3
 8006248:	e744      	b.n	80060d4 <_dtoa_r+0x64c>
 800624a:	461a      	mov	r2, r3
 800624c:	e770      	b.n	8006130 <_dtoa_r+0x6a8>
 800624e:	9b06      	ldr	r3, [sp, #24]
 8006250:	2b01      	cmp	r3, #1
 8006252:	dc18      	bgt.n	8006286 <_dtoa_r+0x7fe>
 8006254:	9b02      	ldr	r3, [sp, #8]
 8006256:	b9b3      	cbnz	r3, 8006286 <_dtoa_r+0x7fe>
 8006258:	9b03      	ldr	r3, [sp, #12]
 800625a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800625e:	b9a2      	cbnz	r2, 800628a <_dtoa_r+0x802>
 8006260:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006264:	0d12      	lsrs	r2, r2, #20
 8006266:	0512      	lsls	r2, r2, #20
 8006268:	b18a      	cbz	r2, 800628e <_dtoa_r+0x806>
 800626a:	9b04      	ldr	r3, [sp, #16]
 800626c:	3301      	adds	r3, #1
 800626e:	9304      	str	r3, [sp, #16]
 8006270:	9b05      	ldr	r3, [sp, #20]
 8006272:	3301      	adds	r3, #1
 8006274:	9305      	str	r3, [sp, #20]
 8006276:	2301      	movs	r3, #1
 8006278:	9309      	str	r3, [sp, #36]	; 0x24
 800627a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800627c:	2b00      	cmp	r3, #0
 800627e:	f47f af70 	bne.w	8006162 <_dtoa_r+0x6da>
 8006282:	2001      	movs	r0, #1
 8006284:	e775      	b.n	8006172 <_dtoa_r+0x6ea>
 8006286:	2300      	movs	r3, #0
 8006288:	e7f6      	b.n	8006278 <_dtoa_r+0x7f0>
 800628a:	9b02      	ldr	r3, [sp, #8]
 800628c:	e7f4      	b.n	8006278 <_dtoa_r+0x7f0>
 800628e:	9209      	str	r2, [sp, #36]	; 0x24
 8006290:	e7f3      	b.n	800627a <_dtoa_r+0x7f2>
 8006292:	d082      	beq.n	800619a <_dtoa_r+0x712>
 8006294:	9b04      	ldr	r3, [sp, #16]
 8006296:	321c      	adds	r2, #28
 8006298:	4413      	add	r3, r2
 800629a:	9304      	str	r3, [sp, #16]
 800629c:	9b05      	ldr	r3, [sp, #20]
 800629e:	4490      	add	r8, r2
 80062a0:	4413      	add	r3, r2
 80062a2:	e779      	b.n	8006198 <_dtoa_r+0x710>
 80062a4:	4602      	mov	r2, r0
 80062a6:	e7f5      	b.n	8006294 <_dtoa_r+0x80c>
 80062a8:	f1b9 0f00 	cmp.w	r9, #0
 80062ac:	dc36      	bgt.n	800631c <_dtoa_r+0x894>
 80062ae:	9b06      	ldr	r3, [sp, #24]
 80062b0:	2b02      	cmp	r3, #2
 80062b2:	dd33      	ble.n	800631c <_dtoa_r+0x894>
 80062b4:	46ca      	mov	sl, r9
 80062b6:	f1ba 0f00 	cmp.w	sl, #0
 80062ba:	d10d      	bne.n	80062d8 <_dtoa_r+0x850>
 80062bc:	4621      	mov	r1, r4
 80062be:	4653      	mov	r3, sl
 80062c0:	2205      	movs	r2, #5
 80062c2:	4630      	mov	r0, r6
 80062c4:	f000 faae 	bl	8006824 <__multadd>
 80062c8:	4601      	mov	r1, r0
 80062ca:	4604      	mov	r4, r0
 80062cc:	4628      	mov	r0, r5
 80062ce:	f000 fcc3 	bl	8006c58 <__mcmp>
 80062d2:	2800      	cmp	r0, #0
 80062d4:	f73f ade4 	bgt.w	8005ea0 <_dtoa_r+0x418>
 80062d8:	9b08      	ldr	r3, [sp, #32]
 80062da:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80062de:	ea6f 0b03 	mvn.w	fp, r3
 80062e2:	f04f 0900 	mov.w	r9, #0
 80062e6:	4621      	mov	r1, r4
 80062e8:	4630      	mov	r0, r6
 80062ea:	f000 fa79 	bl	80067e0 <_Bfree>
 80062ee:	2f00      	cmp	r7, #0
 80062f0:	f43f aea1 	beq.w	8006036 <_dtoa_r+0x5ae>
 80062f4:	f1b9 0f00 	cmp.w	r9, #0
 80062f8:	d005      	beq.n	8006306 <_dtoa_r+0x87e>
 80062fa:	45b9      	cmp	r9, r7
 80062fc:	d003      	beq.n	8006306 <_dtoa_r+0x87e>
 80062fe:	4649      	mov	r1, r9
 8006300:	4630      	mov	r0, r6
 8006302:	f000 fa6d 	bl	80067e0 <_Bfree>
 8006306:	4639      	mov	r1, r7
 8006308:	4630      	mov	r0, r6
 800630a:	f000 fa69 	bl	80067e0 <_Bfree>
 800630e:	e692      	b.n	8006036 <_dtoa_r+0x5ae>
 8006310:	2400      	movs	r4, #0
 8006312:	4627      	mov	r7, r4
 8006314:	e7e0      	b.n	80062d8 <_dtoa_r+0x850>
 8006316:	4693      	mov	fp, r2
 8006318:	4627      	mov	r7, r4
 800631a:	e5c1      	b.n	8005ea0 <_dtoa_r+0x418>
 800631c:	9b07      	ldr	r3, [sp, #28]
 800631e:	46ca      	mov	sl, r9
 8006320:	2b00      	cmp	r3, #0
 8006322:	f000 8100 	beq.w	8006526 <_dtoa_r+0xa9e>
 8006326:	f1b8 0f00 	cmp.w	r8, #0
 800632a:	dd05      	ble.n	8006338 <_dtoa_r+0x8b0>
 800632c:	4639      	mov	r1, r7
 800632e:	4642      	mov	r2, r8
 8006330:	4630      	mov	r0, r6
 8006332:	f000 fc25 	bl	8006b80 <__lshift>
 8006336:	4607      	mov	r7, r0
 8006338:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800633a:	2b00      	cmp	r3, #0
 800633c:	d05d      	beq.n	80063fa <_dtoa_r+0x972>
 800633e:	6879      	ldr	r1, [r7, #4]
 8006340:	4630      	mov	r0, r6
 8006342:	f000 fa0d 	bl	8006760 <_Balloc>
 8006346:	4680      	mov	r8, r0
 8006348:	b928      	cbnz	r0, 8006356 <_dtoa_r+0x8ce>
 800634a:	4b82      	ldr	r3, [pc, #520]	; (8006554 <_dtoa_r+0xacc>)
 800634c:	4602      	mov	r2, r0
 800634e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8006352:	f7ff bbb1 	b.w	8005ab8 <_dtoa_r+0x30>
 8006356:	693a      	ldr	r2, [r7, #16]
 8006358:	3202      	adds	r2, #2
 800635a:	0092      	lsls	r2, r2, #2
 800635c:	f107 010c 	add.w	r1, r7, #12
 8006360:	300c      	adds	r0, #12
 8006362:	f000 ffa9 	bl	80072b8 <memcpy>
 8006366:	2201      	movs	r2, #1
 8006368:	4641      	mov	r1, r8
 800636a:	4630      	mov	r0, r6
 800636c:	f000 fc08 	bl	8006b80 <__lshift>
 8006370:	9b01      	ldr	r3, [sp, #4]
 8006372:	3301      	adds	r3, #1
 8006374:	9304      	str	r3, [sp, #16]
 8006376:	9b01      	ldr	r3, [sp, #4]
 8006378:	4453      	add	r3, sl
 800637a:	9308      	str	r3, [sp, #32]
 800637c:	9b02      	ldr	r3, [sp, #8]
 800637e:	f003 0301 	and.w	r3, r3, #1
 8006382:	46b9      	mov	r9, r7
 8006384:	9307      	str	r3, [sp, #28]
 8006386:	4607      	mov	r7, r0
 8006388:	9b04      	ldr	r3, [sp, #16]
 800638a:	4621      	mov	r1, r4
 800638c:	3b01      	subs	r3, #1
 800638e:	4628      	mov	r0, r5
 8006390:	9302      	str	r3, [sp, #8]
 8006392:	f7ff faf0 	bl	8005976 <quorem>
 8006396:	4603      	mov	r3, r0
 8006398:	3330      	adds	r3, #48	; 0x30
 800639a:	9005      	str	r0, [sp, #20]
 800639c:	4649      	mov	r1, r9
 800639e:	4628      	mov	r0, r5
 80063a0:	9309      	str	r3, [sp, #36]	; 0x24
 80063a2:	f000 fc59 	bl	8006c58 <__mcmp>
 80063a6:	463a      	mov	r2, r7
 80063a8:	4682      	mov	sl, r0
 80063aa:	4621      	mov	r1, r4
 80063ac:	4630      	mov	r0, r6
 80063ae:	f000 fc6f 	bl	8006c90 <__mdiff>
 80063b2:	68c2      	ldr	r2, [r0, #12]
 80063b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063b6:	4680      	mov	r8, r0
 80063b8:	bb0a      	cbnz	r2, 80063fe <_dtoa_r+0x976>
 80063ba:	4601      	mov	r1, r0
 80063bc:	4628      	mov	r0, r5
 80063be:	f000 fc4b 	bl	8006c58 <__mcmp>
 80063c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063c4:	4602      	mov	r2, r0
 80063c6:	4641      	mov	r1, r8
 80063c8:	4630      	mov	r0, r6
 80063ca:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 80063ce:	f000 fa07 	bl	80067e0 <_Bfree>
 80063d2:	9b06      	ldr	r3, [sp, #24]
 80063d4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80063d6:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80063da:	ea43 0102 	orr.w	r1, r3, r2
 80063de:	9b07      	ldr	r3, [sp, #28]
 80063e0:	4319      	orrs	r1, r3
 80063e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063e4:	d10d      	bne.n	8006402 <_dtoa_r+0x97a>
 80063e6:	2b39      	cmp	r3, #57	; 0x39
 80063e8:	d029      	beq.n	800643e <_dtoa_r+0x9b6>
 80063ea:	f1ba 0f00 	cmp.w	sl, #0
 80063ee:	dd01      	ble.n	80063f4 <_dtoa_r+0x96c>
 80063f0:	9b05      	ldr	r3, [sp, #20]
 80063f2:	3331      	adds	r3, #49	; 0x31
 80063f4:	9a02      	ldr	r2, [sp, #8]
 80063f6:	7013      	strb	r3, [r2, #0]
 80063f8:	e775      	b.n	80062e6 <_dtoa_r+0x85e>
 80063fa:	4638      	mov	r0, r7
 80063fc:	e7b8      	b.n	8006370 <_dtoa_r+0x8e8>
 80063fe:	2201      	movs	r2, #1
 8006400:	e7e1      	b.n	80063c6 <_dtoa_r+0x93e>
 8006402:	f1ba 0f00 	cmp.w	sl, #0
 8006406:	db06      	blt.n	8006416 <_dtoa_r+0x98e>
 8006408:	9906      	ldr	r1, [sp, #24]
 800640a:	ea41 0a0a 	orr.w	sl, r1, sl
 800640e:	9907      	ldr	r1, [sp, #28]
 8006410:	ea5a 0a01 	orrs.w	sl, sl, r1
 8006414:	d120      	bne.n	8006458 <_dtoa_r+0x9d0>
 8006416:	2a00      	cmp	r2, #0
 8006418:	ddec      	ble.n	80063f4 <_dtoa_r+0x96c>
 800641a:	4629      	mov	r1, r5
 800641c:	2201      	movs	r2, #1
 800641e:	4630      	mov	r0, r6
 8006420:	9304      	str	r3, [sp, #16]
 8006422:	f000 fbad 	bl	8006b80 <__lshift>
 8006426:	4621      	mov	r1, r4
 8006428:	4605      	mov	r5, r0
 800642a:	f000 fc15 	bl	8006c58 <__mcmp>
 800642e:	2800      	cmp	r0, #0
 8006430:	9b04      	ldr	r3, [sp, #16]
 8006432:	dc02      	bgt.n	800643a <_dtoa_r+0x9b2>
 8006434:	d1de      	bne.n	80063f4 <_dtoa_r+0x96c>
 8006436:	07da      	lsls	r2, r3, #31
 8006438:	d5dc      	bpl.n	80063f4 <_dtoa_r+0x96c>
 800643a:	2b39      	cmp	r3, #57	; 0x39
 800643c:	d1d8      	bne.n	80063f0 <_dtoa_r+0x968>
 800643e:	9a02      	ldr	r2, [sp, #8]
 8006440:	2339      	movs	r3, #57	; 0x39
 8006442:	7013      	strb	r3, [r2, #0]
 8006444:	4643      	mov	r3, r8
 8006446:	4698      	mov	r8, r3
 8006448:	3b01      	subs	r3, #1
 800644a:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800644e:	2a39      	cmp	r2, #57	; 0x39
 8006450:	d051      	beq.n	80064f6 <_dtoa_r+0xa6e>
 8006452:	3201      	adds	r2, #1
 8006454:	701a      	strb	r2, [r3, #0]
 8006456:	e746      	b.n	80062e6 <_dtoa_r+0x85e>
 8006458:	2a00      	cmp	r2, #0
 800645a:	dd03      	ble.n	8006464 <_dtoa_r+0x9dc>
 800645c:	2b39      	cmp	r3, #57	; 0x39
 800645e:	d0ee      	beq.n	800643e <_dtoa_r+0x9b6>
 8006460:	3301      	adds	r3, #1
 8006462:	e7c7      	b.n	80063f4 <_dtoa_r+0x96c>
 8006464:	9a04      	ldr	r2, [sp, #16]
 8006466:	9908      	ldr	r1, [sp, #32]
 8006468:	f802 3c01 	strb.w	r3, [r2, #-1]
 800646c:	428a      	cmp	r2, r1
 800646e:	d02b      	beq.n	80064c8 <_dtoa_r+0xa40>
 8006470:	4629      	mov	r1, r5
 8006472:	2300      	movs	r3, #0
 8006474:	220a      	movs	r2, #10
 8006476:	4630      	mov	r0, r6
 8006478:	f000 f9d4 	bl	8006824 <__multadd>
 800647c:	45b9      	cmp	r9, r7
 800647e:	4605      	mov	r5, r0
 8006480:	f04f 0300 	mov.w	r3, #0
 8006484:	f04f 020a 	mov.w	r2, #10
 8006488:	4649      	mov	r1, r9
 800648a:	4630      	mov	r0, r6
 800648c:	d107      	bne.n	800649e <_dtoa_r+0xa16>
 800648e:	f000 f9c9 	bl	8006824 <__multadd>
 8006492:	4681      	mov	r9, r0
 8006494:	4607      	mov	r7, r0
 8006496:	9b04      	ldr	r3, [sp, #16]
 8006498:	3301      	adds	r3, #1
 800649a:	9304      	str	r3, [sp, #16]
 800649c:	e774      	b.n	8006388 <_dtoa_r+0x900>
 800649e:	f000 f9c1 	bl	8006824 <__multadd>
 80064a2:	4639      	mov	r1, r7
 80064a4:	4681      	mov	r9, r0
 80064a6:	2300      	movs	r3, #0
 80064a8:	220a      	movs	r2, #10
 80064aa:	4630      	mov	r0, r6
 80064ac:	f000 f9ba 	bl	8006824 <__multadd>
 80064b0:	4607      	mov	r7, r0
 80064b2:	e7f0      	b.n	8006496 <_dtoa_r+0xa0e>
 80064b4:	f1ba 0f00 	cmp.w	sl, #0
 80064b8:	9a01      	ldr	r2, [sp, #4]
 80064ba:	bfcc      	ite	gt
 80064bc:	46d0      	movgt	r8, sl
 80064be:	f04f 0801 	movle.w	r8, #1
 80064c2:	4490      	add	r8, r2
 80064c4:	f04f 0900 	mov.w	r9, #0
 80064c8:	4629      	mov	r1, r5
 80064ca:	2201      	movs	r2, #1
 80064cc:	4630      	mov	r0, r6
 80064ce:	9302      	str	r3, [sp, #8]
 80064d0:	f000 fb56 	bl	8006b80 <__lshift>
 80064d4:	4621      	mov	r1, r4
 80064d6:	4605      	mov	r5, r0
 80064d8:	f000 fbbe 	bl	8006c58 <__mcmp>
 80064dc:	2800      	cmp	r0, #0
 80064de:	dcb1      	bgt.n	8006444 <_dtoa_r+0x9bc>
 80064e0:	d102      	bne.n	80064e8 <_dtoa_r+0xa60>
 80064e2:	9b02      	ldr	r3, [sp, #8]
 80064e4:	07db      	lsls	r3, r3, #31
 80064e6:	d4ad      	bmi.n	8006444 <_dtoa_r+0x9bc>
 80064e8:	4643      	mov	r3, r8
 80064ea:	4698      	mov	r8, r3
 80064ec:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80064f0:	2a30      	cmp	r2, #48	; 0x30
 80064f2:	d0fa      	beq.n	80064ea <_dtoa_r+0xa62>
 80064f4:	e6f7      	b.n	80062e6 <_dtoa_r+0x85e>
 80064f6:	9a01      	ldr	r2, [sp, #4]
 80064f8:	429a      	cmp	r2, r3
 80064fa:	d1a4      	bne.n	8006446 <_dtoa_r+0x9be>
 80064fc:	f10b 0b01 	add.w	fp, fp, #1
 8006500:	2331      	movs	r3, #49	; 0x31
 8006502:	e778      	b.n	80063f6 <_dtoa_r+0x96e>
 8006504:	4b14      	ldr	r3, [pc, #80]	; (8006558 <_dtoa_r+0xad0>)
 8006506:	f7ff bb2a 	b.w	8005b5e <_dtoa_r+0xd6>
 800650a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800650c:	2b00      	cmp	r3, #0
 800650e:	f47f ab05 	bne.w	8005b1c <_dtoa_r+0x94>
 8006512:	4b12      	ldr	r3, [pc, #72]	; (800655c <_dtoa_r+0xad4>)
 8006514:	f7ff bb23 	b.w	8005b5e <_dtoa_r+0xd6>
 8006518:	f1ba 0f00 	cmp.w	sl, #0
 800651c:	dc03      	bgt.n	8006526 <_dtoa_r+0xa9e>
 800651e:	9b06      	ldr	r3, [sp, #24]
 8006520:	2b02      	cmp	r3, #2
 8006522:	f73f aec8 	bgt.w	80062b6 <_dtoa_r+0x82e>
 8006526:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800652a:	4621      	mov	r1, r4
 800652c:	4628      	mov	r0, r5
 800652e:	f7ff fa22 	bl	8005976 <quorem>
 8006532:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8006536:	f808 3b01 	strb.w	r3, [r8], #1
 800653a:	9a01      	ldr	r2, [sp, #4]
 800653c:	eba8 0202 	sub.w	r2, r8, r2
 8006540:	4592      	cmp	sl, r2
 8006542:	ddb7      	ble.n	80064b4 <_dtoa_r+0xa2c>
 8006544:	4629      	mov	r1, r5
 8006546:	2300      	movs	r3, #0
 8006548:	220a      	movs	r2, #10
 800654a:	4630      	mov	r0, r6
 800654c:	f000 f96a 	bl	8006824 <__multadd>
 8006550:	4605      	mov	r5, r0
 8006552:	e7ea      	b.n	800652a <_dtoa_r+0xaa2>
 8006554:	08007a5c 	.word	0x08007a5c
 8006558:	080079bc 	.word	0x080079bc
 800655c:	080079e0 	.word	0x080079e0

08006560 <_free_r>:
 8006560:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006562:	2900      	cmp	r1, #0
 8006564:	d044      	beq.n	80065f0 <_free_r+0x90>
 8006566:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800656a:	9001      	str	r0, [sp, #4]
 800656c:	2b00      	cmp	r3, #0
 800656e:	f1a1 0404 	sub.w	r4, r1, #4
 8006572:	bfb8      	it	lt
 8006574:	18e4      	addlt	r4, r4, r3
 8006576:	f000 f8e7 	bl	8006748 <__malloc_lock>
 800657a:	4a1e      	ldr	r2, [pc, #120]	; (80065f4 <_free_r+0x94>)
 800657c:	9801      	ldr	r0, [sp, #4]
 800657e:	6813      	ldr	r3, [r2, #0]
 8006580:	b933      	cbnz	r3, 8006590 <_free_r+0x30>
 8006582:	6063      	str	r3, [r4, #4]
 8006584:	6014      	str	r4, [r2, #0]
 8006586:	b003      	add	sp, #12
 8006588:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800658c:	f000 b8e2 	b.w	8006754 <__malloc_unlock>
 8006590:	42a3      	cmp	r3, r4
 8006592:	d908      	bls.n	80065a6 <_free_r+0x46>
 8006594:	6825      	ldr	r5, [r4, #0]
 8006596:	1961      	adds	r1, r4, r5
 8006598:	428b      	cmp	r3, r1
 800659a:	bf01      	itttt	eq
 800659c:	6819      	ldreq	r1, [r3, #0]
 800659e:	685b      	ldreq	r3, [r3, #4]
 80065a0:	1949      	addeq	r1, r1, r5
 80065a2:	6021      	streq	r1, [r4, #0]
 80065a4:	e7ed      	b.n	8006582 <_free_r+0x22>
 80065a6:	461a      	mov	r2, r3
 80065a8:	685b      	ldr	r3, [r3, #4]
 80065aa:	b10b      	cbz	r3, 80065b0 <_free_r+0x50>
 80065ac:	42a3      	cmp	r3, r4
 80065ae:	d9fa      	bls.n	80065a6 <_free_r+0x46>
 80065b0:	6811      	ldr	r1, [r2, #0]
 80065b2:	1855      	adds	r5, r2, r1
 80065b4:	42a5      	cmp	r5, r4
 80065b6:	d10b      	bne.n	80065d0 <_free_r+0x70>
 80065b8:	6824      	ldr	r4, [r4, #0]
 80065ba:	4421      	add	r1, r4
 80065bc:	1854      	adds	r4, r2, r1
 80065be:	42a3      	cmp	r3, r4
 80065c0:	6011      	str	r1, [r2, #0]
 80065c2:	d1e0      	bne.n	8006586 <_free_r+0x26>
 80065c4:	681c      	ldr	r4, [r3, #0]
 80065c6:	685b      	ldr	r3, [r3, #4]
 80065c8:	6053      	str	r3, [r2, #4]
 80065ca:	440c      	add	r4, r1
 80065cc:	6014      	str	r4, [r2, #0]
 80065ce:	e7da      	b.n	8006586 <_free_r+0x26>
 80065d0:	d902      	bls.n	80065d8 <_free_r+0x78>
 80065d2:	230c      	movs	r3, #12
 80065d4:	6003      	str	r3, [r0, #0]
 80065d6:	e7d6      	b.n	8006586 <_free_r+0x26>
 80065d8:	6825      	ldr	r5, [r4, #0]
 80065da:	1961      	adds	r1, r4, r5
 80065dc:	428b      	cmp	r3, r1
 80065de:	bf04      	itt	eq
 80065e0:	6819      	ldreq	r1, [r3, #0]
 80065e2:	685b      	ldreq	r3, [r3, #4]
 80065e4:	6063      	str	r3, [r4, #4]
 80065e6:	bf04      	itt	eq
 80065e8:	1949      	addeq	r1, r1, r5
 80065ea:	6021      	streq	r1, [r4, #0]
 80065ec:	6054      	str	r4, [r2, #4]
 80065ee:	e7ca      	b.n	8006586 <_free_r+0x26>
 80065f0:	b003      	add	sp, #12
 80065f2:	bd30      	pop	{r4, r5, pc}
 80065f4:	20000498 	.word	0x20000498

080065f8 <malloc>:
 80065f8:	4b02      	ldr	r3, [pc, #8]	; (8006604 <malloc+0xc>)
 80065fa:	4601      	mov	r1, r0
 80065fc:	6818      	ldr	r0, [r3, #0]
 80065fe:	f000 b823 	b.w	8006648 <_malloc_r>
 8006602:	bf00      	nop
 8006604:	20000064 	.word	0x20000064

08006608 <sbrk_aligned>:
 8006608:	b570      	push	{r4, r5, r6, lr}
 800660a:	4e0e      	ldr	r6, [pc, #56]	; (8006644 <sbrk_aligned+0x3c>)
 800660c:	460c      	mov	r4, r1
 800660e:	6831      	ldr	r1, [r6, #0]
 8006610:	4605      	mov	r5, r0
 8006612:	b911      	cbnz	r1, 800661a <sbrk_aligned+0x12>
 8006614:	f000 fe40 	bl	8007298 <_sbrk_r>
 8006618:	6030      	str	r0, [r6, #0]
 800661a:	4621      	mov	r1, r4
 800661c:	4628      	mov	r0, r5
 800661e:	f000 fe3b 	bl	8007298 <_sbrk_r>
 8006622:	1c43      	adds	r3, r0, #1
 8006624:	d00a      	beq.n	800663c <sbrk_aligned+0x34>
 8006626:	1cc4      	adds	r4, r0, #3
 8006628:	f024 0403 	bic.w	r4, r4, #3
 800662c:	42a0      	cmp	r0, r4
 800662e:	d007      	beq.n	8006640 <sbrk_aligned+0x38>
 8006630:	1a21      	subs	r1, r4, r0
 8006632:	4628      	mov	r0, r5
 8006634:	f000 fe30 	bl	8007298 <_sbrk_r>
 8006638:	3001      	adds	r0, #1
 800663a:	d101      	bne.n	8006640 <sbrk_aligned+0x38>
 800663c:	f04f 34ff 	mov.w	r4, #4294967295
 8006640:	4620      	mov	r0, r4
 8006642:	bd70      	pop	{r4, r5, r6, pc}
 8006644:	2000049c 	.word	0x2000049c

08006648 <_malloc_r>:
 8006648:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800664c:	1ccd      	adds	r5, r1, #3
 800664e:	f025 0503 	bic.w	r5, r5, #3
 8006652:	3508      	adds	r5, #8
 8006654:	2d0c      	cmp	r5, #12
 8006656:	bf38      	it	cc
 8006658:	250c      	movcc	r5, #12
 800665a:	2d00      	cmp	r5, #0
 800665c:	4607      	mov	r7, r0
 800665e:	db01      	blt.n	8006664 <_malloc_r+0x1c>
 8006660:	42a9      	cmp	r1, r5
 8006662:	d905      	bls.n	8006670 <_malloc_r+0x28>
 8006664:	230c      	movs	r3, #12
 8006666:	603b      	str	r3, [r7, #0]
 8006668:	2600      	movs	r6, #0
 800666a:	4630      	mov	r0, r6
 800666c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006670:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006744 <_malloc_r+0xfc>
 8006674:	f000 f868 	bl	8006748 <__malloc_lock>
 8006678:	f8d8 3000 	ldr.w	r3, [r8]
 800667c:	461c      	mov	r4, r3
 800667e:	bb5c      	cbnz	r4, 80066d8 <_malloc_r+0x90>
 8006680:	4629      	mov	r1, r5
 8006682:	4638      	mov	r0, r7
 8006684:	f7ff ffc0 	bl	8006608 <sbrk_aligned>
 8006688:	1c43      	adds	r3, r0, #1
 800668a:	4604      	mov	r4, r0
 800668c:	d155      	bne.n	800673a <_malloc_r+0xf2>
 800668e:	f8d8 4000 	ldr.w	r4, [r8]
 8006692:	4626      	mov	r6, r4
 8006694:	2e00      	cmp	r6, #0
 8006696:	d145      	bne.n	8006724 <_malloc_r+0xdc>
 8006698:	2c00      	cmp	r4, #0
 800669a:	d048      	beq.n	800672e <_malloc_r+0xe6>
 800669c:	6823      	ldr	r3, [r4, #0]
 800669e:	4631      	mov	r1, r6
 80066a0:	4638      	mov	r0, r7
 80066a2:	eb04 0903 	add.w	r9, r4, r3
 80066a6:	f000 fdf7 	bl	8007298 <_sbrk_r>
 80066aa:	4581      	cmp	r9, r0
 80066ac:	d13f      	bne.n	800672e <_malloc_r+0xe6>
 80066ae:	6821      	ldr	r1, [r4, #0]
 80066b0:	1a6d      	subs	r5, r5, r1
 80066b2:	4629      	mov	r1, r5
 80066b4:	4638      	mov	r0, r7
 80066b6:	f7ff ffa7 	bl	8006608 <sbrk_aligned>
 80066ba:	3001      	adds	r0, #1
 80066bc:	d037      	beq.n	800672e <_malloc_r+0xe6>
 80066be:	6823      	ldr	r3, [r4, #0]
 80066c0:	442b      	add	r3, r5
 80066c2:	6023      	str	r3, [r4, #0]
 80066c4:	f8d8 3000 	ldr.w	r3, [r8]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d038      	beq.n	800673e <_malloc_r+0xf6>
 80066cc:	685a      	ldr	r2, [r3, #4]
 80066ce:	42a2      	cmp	r2, r4
 80066d0:	d12b      	bne.n	800672a <_malloc_r+0xe2>
 80066d2:	2200      	movs	r2, #0
 80066d4:	605a      	str	r2, [r3, #4]
 80066d6:	e00f      	b.n	80066f8 <_malloc_r+0xb0>
 80066d8:	6822      	ldr	r2, [r4, #0]
 80066da:	1b52      	subs	r2, r2, r5
 80066dc:	d41f      	bmi.n	800671e <_malloc_r+0xd6>
 80066de:	2a0b      	cmp	r2, #11
 80066e0:	d917      	bls.n	8006712 <_malloc_r+0xca>
 80066e2:	1961      	adds	r1, r4, r5
 80066e4:	42a3      	cmp	r3, r4
 80066e6:	6025      	str	r5, [r4, #0]
 80066e8:	bf18      	it	ne
 80066ea:	6059      	strne	r1, [r3, #4]
 80066ec:	6863      	ldr	r3, [r4, #4]
 80066ee:	bf08      	it	eq
 80066f0:	f8c8 1000 	streq.w	r1, [r8]
 80066f4:	5162      	str	r2, [r4, r5]
 80066f6:	604b      	str	r3, [r1, #4]
 80066f8:	4638      	mov	r0, r7
 80066fa:	f104 060b 	add.w	r6, r4, #11
 80066fe:	f000 f829 	bl	8006754 <__malloc_unlock>
 8006702:	f026 0607 	bic.w	r6, r6, #7
 8006706:	1d23      	adds	r3, r4, #4
 8006708:	1af2      	subs	r2, r6, r3
 800670a:	d0ae      	beq.n	800666a <_malloc_r+0x22>
 800670c:	1b9b      	subs	r3, r3, r6
 800670e:	50a3      	str	r3, [r4, r2]
 8006710:	e7ab      	b.n	800666a <_malloc_r+0x22>
 8006712:	42a3      	cmp	r3, r4
 8006714:	6862      	ldr	r2, [r4, #4]
 8006716:	d1dd      	bne.n	80066d4 <_malloc_r+0x8c>
 8006718:	f8c8 2000 	str.w	r2, [r8]
 800671c:	e7ec      	b.n	80066f8 <_malloc_r+0xb0>
 800671e:	4623      	mov	r3, r4
 8006720:	6864      	ldr	r4, [r4, #4]
 8006722:	e7ac      	b.n	800667e <_malloc_r+0x36>
 8006724:	4634      	mov	r4, r6
 8006726:	6876      	ldr	r6, [r6, #4]
 8006728:	e7b4      	b.n	8006694 <_malloc_r+0x4c>
 800672a:	4613      	mov	r3, r2
 800672c:	e7cc      	b.n	80066c8 <_malloc_r+0x80>
 800672e:	230c      	movs	r3, #12
 8006730:	603b      	str	r3, [r7, #0]
 8006732:	4638      	mov	r0, r7
 8006734:	f000 f80e 	bl	8006754 <__malloc_unlock>
 8006738:	e797      	b.n	800666a <_malloc_r+0x22>
 800673a:	6025      	str	r5, [r4, #0]
 800673c:	e7dc      	b.n	80066f8 <_malloc_r+0xb0>
 800673e:	605b      	str	r3, [r3, #4]
 8006740:	deff      	udf	#255	; 0xff
 8006742:	bf00      	nop
 8006744:	20000498 	.word	0x20000498

08006748 <__malloc_lock>:
 8006748:	4801      	ldr	r0, [pc, #4]	; (8006750 <__malloc_lock+0x8>)
 800674a:	f7ff b912 	b.w	8005972 <__retarget_lock_acquire_recursive>
 800674e:	bf00      	nop
 8006750:	20000494 	.word	0x20000494

08006754 <__malloc_unlock>:
 8006754:	4801      	ldr	r0, [pc, #4]	; (800675c <__malloc_unlock+0x8>)
 8006756:	f7ff b90d 	b.w	8005974 <__retarget_lock_release_recursive>
 800675a:	bf00      	nop
 800675c:	20000494 	.word	0x20000494

08006760 <_Balloc>:
 8006760:	b570      	push	{r4, r5, r6, lr}
 8006762:	69c6      	ldr	r6, [r0, #28]
 8006764:	4604      	mov	r4, r0
 8006766:	460d      	mov	r5, r1
 8006768:	b976      	cbnz	r6, 8006788 <_Balloc+0x28>
 800676a:	2010      	movs	r0, #16
 800676c:	f7ff ff44 	bl	80065f8 <malloc>
 8006770:	4602      	mov	r2, r0
 8006772:	61e0      	str	r0, [r4, #28]
 8006774:	b920      	cbnz	r0, 8006780 <_Balloc+0x20>
 8006776:	4b18      	ldr	r3, [pc, #96]	; (80067d8 <_Balloc+0x78>)
 8006778:	4818      	ldr	r0, [pc, #96]	; (80067dc <_Balloc+0x7c>)
 800677a:	216b      	movs	r1, #107	; 0x6b
 800677c:	f000 fdaa 	bl	80072d4 <__assert_func>
 8006780:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006784:	6006      	str	r6, [r0, #0]
 8006786:	60c6      	str	r6, [r0, #12]
 8006788:	69e6      	ldr	r6, [r4, #28]
 800678a:	68f3      	ldr	r3, [r6, #12]
 800678c:	b183      	cbz	r3, 80067b0 <_Balloc+0x50>
 800678e:	69e3      	ldr	r3, [r4, #28]
 8006790:	68db      	ldr	r3, [r3, #12]
 8006792:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006796:	b9b8      	cbnz	r0, 80067c8 <_Balloc+0x68>
 8006798:	2101      	movs	r1, #1
 800679a:	fa01 f605 	lsl.w	r6, r1, r5
 800679e:	1d72      	adds	r2, r6, #5
 80067a0:	0092      	lsls	r2, r2, #2
 80067a2:	4620      	mov	r0, r4
 80067a4:	f000 fdb4 	bl	8007310 <_calloc_r>
 80067a8:	b160      	cbz	r0, 80067c4 <_Balloc+0x64>
 80067aa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80067ae:	e00e      	b.n	80067ce <_Balloc+0x6e>
 80067b0:	2221      	movs	r2, #33	; 0x21
 80067b2:	2104      	movs	r1, #4
 80067b4:	4620      	mov	r0, r4
 80067b6:	f000 fdab 	bl	8007310 <_calloc_r>
 80067ba:	69e3      	ldr	r3, [r4, #28]
 80067bc:	60f0      	str	r0, [r6, #12]
 80067be:	68db      	ldr	r3, [r3, #12]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d1e4      	bne.n	800678e <_Balloc+0x2e>
 80067c4:	2000      	movs	r0, #0
 80067c6:	bd70      	pop	{r4, r5, r6, pc}
 80067c8:	6802      	ldr	r2, [r0, #0]
 80067ca:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80067ce:	2300      	movs	r3, #0
 80067d0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80067d4:	e7f7      	b.n	80067c6 <_Balloc+0x66>
 80067d6:	bf00      	nop
 80067d8:	080079ed 	.word	0x080079ed
 80067dc:	08007a6d 	.word	0x08007a6d

080067e0 <_Bfree>:
 80067e0:	b570      	push	{r4, r5, r6, lr}
 80067e2:	69c6      	ldr	r6, [r0, #28]
 80067e4:	4605      	mov	r5, r0
 80067e6:	460c      	mov	r4, r1
 80067e8:	b976      	cbnz	r6, 8006808 <_Bfree+0x28>
 80067ea:	2010      	movs	r0, #16
 80067ec:	f7ff ff04 	bl	80065f8 <malloc>
 80067f0:	4602      	mov	r2, r0
 80067f2:	61e8      	str	r0, [r5, #28]
 80067f4:	b920      	cbnz	r0, 8006800 <_Bfree+0x20>
 80067f6:	4b09      	ldr	r3, [pc, #36]	; (800681c <_Bfree+0x3c>)
 80067f8:	4809      	ldr	r0, [pc, #36]	; (8006820 <_Bfree+0x40>)
 80067fa:	218f      	movs	r1, #143	; 0x8f
 80067fc:	f000 fd6a 	bl	80072d4 <__assert_func>
 8006800:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006804:	6006      	str	r6, [r0, #0]
 8006806:	60c6      	str	r6, [r0, #12]
 8006808:	b13c      	cbz	r4, 800681a <_Bfree+0x3a>
 800680a:	69eb      	ldr	r3, [r5, #28]
 800680c:	6862      	ldr	r2, [r4, #4]
 800680e:	68db      	ldr	r3, [r3, #12]
 8006810:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006814:	6021      	str	r1, [r4, #0]
 8006816:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800681a:	bd70      	pop	{r4, r5, r6, pc}
 800681c:	080079ed 	.word	0x080079ed
 8006820:	08007a6d 	.word	0x08007a6d

08006824 <__multadd>:
 8006824:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006828:	690d      	ldr	r5, [r1, #16]
 800682a:	4607      	mov	r7, r0
 800682c:	460c      	mov	r4, r1
 800682e:	461e      	mov	r6, r3
 8006830:	f101 0c14 	add.w	ip, r1, #20
 8006834:	2000      	movs	r0, #0
 8006836:	f8dc 3000 	ldr.w	r3, [ip]
 800683a:	b299      	uxth	r1, r3
 800683c:	fb02 6101 	mla	r1, r2, r1, r6
 8006840:	0c1e      	lsrs	r6, r3, #16
 8006842:	0c0b      	lsrs	r3, r1, #16
 8006844:	fb02 3306 	mla	r3, r2, r6, r3
 8006848:	b289      	uxth	r1, r1
 800684a:	3001      	adds	r0, #1
 800684c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006850:	4285      	cmp	r5, r0
 8006852:	f84c 1b04 	str.w	r1, [ip], #4
 8006856:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800685a:	dcec      	bgt.n	8006836 <__multadd+0x12>
 800685c:	b30e      	cbz	r6, 80068a2 <__multadd+0x7e>
 800685e:	68a3      	ldr	r3, [r4, #8]
 8006860:	42ab      	cmp	r3, r5
 8006862:	dc19      	bgt.n	8006898 <__multadd+0x74>
 8006864:	6861      	ldr	r1, [r4, #4]
 8006866:	4638      	mov	r0, r7
 8006868:	3101      	adds	r1, #1
 800686a:	f7ff ff79 	bl	8006760 <_Balloc>
 800686e:	4680      	mov	r8, r0
 8006870:	b928      	cbnz	r0, 800687e <__multadd+0x5a>
 8006872:	4602      	mov	r2, r0
 8006874:	4b0c      	ldr	r3, [pc, #48]	; (80068a8 <__multadd+0x84>)
 8006876:	480d      	ldr	r0, [pc, #52]	; (80068ac <__multadd+0x88>)
 8006878:	21ba      	movs	r1, #186	; 0xba
 800687a:	f000 fd2b 	bl	80072d4 <__assert_func>
 800687e:	6922      	ldr	r2, [r4, #16]
 8006880:	3202      	adds	r2, #2
 8006882:	f104 010c 	add.w	r1, r4, #12
 8006886:	0092      	lsls	r2, r2, #2
 8006888:	300c      	adds	r0, #12
 800688a:	f000 fd15 	bl	80072b8 <memcpy>
 800688e:	4621      	mov	r1, r4
 8006890:	4638      	mov	r0, r7
 8006892:	f7ff ffa5 	bl	80067e0 <_Bfree>
 8006896:	4644      	mov	r4, r8
 8006898:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800689c:	3501      	adds	r5, #1
 800689e:	615e      	str	r6, [r3, #20]
 80068a0:	6125      	str	r5, [r4, #16]
 80068a2:	4620      	mov	r0, r4
 80068a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80068a8:	08007a5c 	.word	0x08007a5c
 80068ac:	08007a6d 	.word	0x08007a6d

080068b0 <__hi0bits>:
 80068b0:	0c03      	lsrs	r3, r0, #16
 80068b2:	041b      	lsls	r3, r3, #16
 80068b4:	b9d3      	cbnz	r3, 80068ec <__hi0bits+0x3c>
 80068b6:	0400      	lsls	r0, r0, #16
 80068b8:	2310      	movs	r3, #16
 80068ba:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80068be:	bf04      	itt	eq
 80068c0:	0200      	lsleq	r0, r0, #8
 80068c2:	3308      	addeq	r3, #8
 80068c4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80068c8:	bf04      	itt	eq
 80068ca:	0100      	lsleq	r0, r0, #4
 80068cc:	3304      	addeq	r3, #4
 80068ce:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80068d2:	bf04      	itt	eq
 80068d4:	0080      	lsleq	r0, r0, #2
 80068d6:	3302      	addeq	r3, #2
 80068d8:	2800      	cmp	r0, #0
 80068da:	db05      	blt.n	80068e8 <__hi0bits+0x38>
 80068dc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80068e0:	f103 0301 	add.w	r3, r3, #1
 80068e4:	bf08      	it	eq
 80068e6:	2320      	moveq	r3, #32
 80068e8:	4618      	mov	r0, r3
 80068ea:	4770      	bx	lr
 80068ec:	2300      	movs	r3, #0
 80068ee:	e7e4      	b.n	80068ba <__hi0bits+0xa>

080068f0 <__lo0bits>:
 80068f0:	6803      	ldr	r3, [r0, #0]
 80068f2:	f013 0207 	ands.w	r2, r3, #7
 80068f6:	d00c      	beq.n	8006912 <__lo0bits+0x22>
 80068f8:	07d9      	lsls	r1, r3, #31
 80068fa:	d422      	bmi.n	8006942 <__lo0bits+0x52>
 80068fc:	079a      	lsls	r2, r3, #30
 80068fe:	bf49      	itett	mi
 8006900:	085b      	lsrmi	r3, r3, #1
 8006902:	089b      	lsrpl	r3, r3, #2
 8006904:	6003      	strmi	r3, [r0, #0]
 8006906:	2201      	movmi	r2, #1
 8006908:	bf5c      	itt	pl
 800690a:	6003      	strpl	r3, [r0, #0]
 800690c:	2202      	movpl	r2, #2
 800690e:	4610      	mov	r0, r2
 8006910:	4770      	bx	lr
 8006912:	b299      	uxth	r1, r3
 8006914:	b909      	cbnz	r1, 800691a <__lo0bits+0x2a>
 8006916:	0c1b      	lsrs	r3, r3, #16
 8006918:	2210      	movs	r2, #16
 800691a:	b2d9      	uxtb	r1, r3
 800691c:	b909      	cbnz	r1, 8006922 <__lo0bits+0x32>
 800691e:	3208      	adds	r2, #8
 8006920:	0a1b      	lsrs	r3, r3, #8
 8006922:	0719      	lsls	r1, r3, #28
 8006924:	bf04      	itt	eq
 8006926:	091b      	lsreq	r3, r3, #4
 8006928:	3204      	addeq	r2, #4
 800692a:	0799      	lsls	r1, r3, #30
 800692c:	bf04      	itt	eq
 800692e:	089b      	lsreq	r3, r3, #2
 8006930:	3202      	addeq	r2, #2
 8006932:	07d9      	lsls	r1, r3, #31
 8006934:	d403      	bmi.n	800693e <__lo0bits+0x4e>
 8006936:	085b      	lsrs	r3, r3, #1
 8006938:	f102 0201 	add.w	r2, r2, #1
 800693c:	d003      	beq.n	8006946 <__lo0bits+0x56>
 800693e:	6003      	str	r3, [r0, #0]
 8006940:	e7e5      	b.n	800690e <__lo0bits+0x1e>
 8006942:	2200      	movs	r2, #0
 8006944:	e7e3      	b.n	800690e <__lo0bits+0x1e>
 8006946:	2220      	movs	r2, #32
 8006948:	e7e1      	b.n	800690e <__lo0bits+0x1e>
	...

0800694c <__i2b>:
 800694c:	b510      	push	{r4, lr}
 800694e:	460c      	mov	r4, r1
 8006950:	2101      	movs	r1, #1
 8006952:	f7ff ff05 	bl	8006760 <_Balloc>
 8006956:	4602      	mov	r2, r0
 8006958:	b928      	cbnz	r0, 8006966 <__i2b+0x1a>
 800695a:	4b05      	ldr	r3, [pc, #20]	; (8006970 <__i2b+0x24>)
 800695c:	4805      	ldr	r0, [pc, #20]	; (8006974 <__i2b+0x28>)
 800695e:	f240 1145 	movw	r1, #325	; 0x145
 8006962:	f000 fcb7 	bl	80072d4 <__assert_func>
 8006966:	2301      	movs	r3, #1
 8006968:	6144      	str	r4, [r0, #20]
 800696a:	6103      	str	r3, [r0, #16]
 800696c:	bd10      	pop	{r4, pc}
 800696e:	bf00      	nop
 8006970:	08007a5c 	.word	0x08007a5c
 8006974:	08007a6d 	.word	0x08007a6d

08006978 <__multiply>:
 8006978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800697c:	4691      	mov	r9, r2
 800697e:	690a      	ldr	r2, [r1, #16]
 8006980:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006984:	429a      	cmp	r2, r3
 8006986:	bfb8      	it	lt
 8006988:	460b      	movlt	r3, r1
 800698a:	460c      	mov	r4, r1
 800698c:	bfbc      	itt	lt
 800698e:	464c      	movlt	r4, r9
 8006990:	4699      	movlt	r9, r3
 8006992:	6927      	ldr	r7, [r4, #16]
 8006994:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006998:	68a3      	ldr	r3, [r4, #8]
 800699a:	6861      	ldr	r1, [r4, #4]
 800699c:	eb07 060a 	add.w	r6, r7, sl
 80069a0:	42b3      	cmp	r3, r6
 80069a2:	b085      	sub	sp, #20
 80069a4:	bfb8      	it	lt
 80069a6:	3101      	addlt	r1, #1
 80069a8:	f7ff feda 	bl	8006760 <_Balloc>
 80069ac:	b930      	cbnz	r0, 80069bc <__multiply+0x44>
 80069ae:	4602      	mov	r2, r0
 80069b0:	4b44      	ldr	r3, [pc, #272]	; (8006ac4 <__multiply+0x14c>)
 80069b2:	4845      	ldr	r0, [pc, #276]	; (8006ac8 <__multiply+0x150>)
 80069b4:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80069b8:	f000 fc8c 	bl	80072d4 <__assert_func>
 80069bc:	f100 0514 	add.w	r5, r0, #20
 80069c0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80069c4:	462b      	mov	r3, r5
 80069c6:	2200      	movs	r2, #0
 80069c8:	4543      	cmp	r3, r8
 80069ca:	d321      	bcc.n	8006a10 <__multiply+0x98>
 80069cc:	f104 0314 	add.w	r3, r4, #20
 80069d0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80069d4:	f109 0314 	add.w	r3, r9, #20
 80069d8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80069dc:	9202      	str	r2, [sp, #8]
 80069de:	1b3a      	subs	r2, r7, r4
 80069e0:	3a15      	subs	r2, #21
 80069e2:	f022 0203 	bic.w	r2, r2, #3
 80069e6:	3204      	adds	r2, #4
 80069e8:	f104 0115 	add.w	r1, r4, #21
 80069ec:	428f      	cmp	r7, r1
 80069ee:	bf38      	it	cc
 80069f0:	2204      	movcc	r2, #4
 80069f2:	9201      	str	r2, [sp, #4]
 80069f4:	9a02      	ldr	r2, [sp, #8]
 80069f6:	9303      	str	r3, [sp, #12]
 80069f8:	429a      	cmp	r2, r3
 80069fa:	d80c      	bhi.n	8006a16 <__multiply+0x9e>
 80069fc:	2e00      	cmp	r6, #0
 80069fe:	dd03      	ble.n	8006a08 <__multiply+0x90>
 8006a00:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d05b      	beq.n	8006ac0 <__multiply+0x148>
 8006a08:	6106      	str	r6, [r0, #16]
 8006a0a:	b005      	add	sp, #20
 8006a0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a10:	f843 2b04 	str.w	r2, [r3], #4
 8006a14:	e7d8      	b.n	80069c8 <__multiply+0x50>
 8006a16:	f8b3 a000 	ldrh.w	sl, [r3]
 8006a1a:	f1ba 0f00 	cmp.w	sl, #0
 8006a1e:	d024      	beq.n	8006a6a <__multiply+0xf2>
 8006a20:	f104 0e14 	add.w	lr, r4, #20
 8006a24:	46a9      	mov	r9, r5
 8006a26:	f04f 0c00 	mov.w	ip, #0
 8006a2a:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006a2e:	f8d9 1000 	ldr.w	r1, [r9]
 8006a32:	fa1f fb82 	uxth.w	fp, r2
 8006a36:	b289      	uxth	r1, r1
 8006a38:	fb0a 110b 	mla	r1, sl, fp, r1
 8006a3c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8006a40:	f8d9 2000 	ldr.w	r2, [r9]
 8006a44:	4461      	add	r1, ip
 8006a46:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006a4a:	fb0a c20b 	mla	r2, sl, fp, ip
 8006a4e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006a52:	b289      	uxth	r1, r1
 8006a54:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006a58:	4577      	cmp	r7, lr
 8006a5a:	f849 1b04 	str.w	r1, [r9], #4
 8006a5e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006a62:	d8e2      	bhi.n	8006a2a <__multiply+0xb2>
 8006a64:	9a01      	ldr	r2, [sp, #4]
 8006a66:	f845 c002 	str.w	ip, [r5, r2]
 8006a6a:	9a03      	ldr	r2, [sp, #12]
 8006a6c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006a70:	3304      	adds	r3, #4
 8006a72:	f1b9 0f00 	cmp.w	r9, #0
 8006a76:	d021      	beq.n	8006abc <__multiply+0x144>
 8006a78:	6829      	ldr	r1, [r5, #0]
 8006a7a:	f104 0c14 	add.w	ip, r4, #20
 8006a7e:	46ae      	mov	lr, r5
 8006a80:	f04f 0a00 	mov.w	sl, #0
 8006a84:	f8bc b000 	ldrh.w	fp, [ip]
 8006a88:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006a8c:	fb09 220b 	mla	r2, r9, fp, r2
 8006a90:	4452      	add	r2, sl
 8006a92:	b289      	uxth	r1, r1
 8006a94:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006a98:	f84e 1b04 	str.w	r1, [lr], #4
 8006a9c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8006aa0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006aa4:	f8be 1000 	ldrh.w	r1, [lr]
 8006aa8:	fb09 110a 	mla	r1, r9, sl, r1
 8006aac:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8006ab0:	4567      	cmp	r7, ip
 8006ab2:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006ab6:	d8e5      	bhi.n	8006a84 <__multiply+0x10c>
 8006ab8:	9a01      	ldr	r2, [sp, #4]
 8006aba:	50a9      	str	r1, [r5, r2]
 8006abc:	3504      	adds	r5, #4
 8006abe:	e799      	b.n	80069f4 <__multiply+0x7c>
 8006ac0:	3e01      	subs	r6, #1
 8006ac2:	e79b      	b.n	80069fc <__multiply+0x84>
 8006ac4:	08007a5c 	.word	0x08007a5c
 8006ac8:	08007a6d 	.word	0x08007a6d

08006acc <__pow5mult>:
 8006acc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ad0:	4615      	mov	r5, r2
 8006ad2:	f012 0203 	ands.w	r2, r2, #3
 8006ad6:	4606      	mov	r6, r0
 8006ad8:	460f      	mov	r7, r1
 8006ada:	d007      	beq.n	8006aec <__pow5mult+0x20>
 8006adc:	4c25      	ldr	r4, [pc, #148]	; (8006b74 <__pow5mult+0xa8>)
 8006ade:	3a01      	subs	r2, #1
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006ae6:	f7ff fe9d 	bl	8006824 <__multadd>
 8006aea:	4607      	mov	r7, r0
 8006aec:	10ad      	asrs	r5, r5, #2
 8006aee:	d03d      	beq.n	8006b6c <__pow5mult+0xa0>
 8006af0:	69f4      	ldr	r4, [r6, #28]
 8006af2:	b97c      	cbnz	r4, 8006b14 <__pow5mult+0x48>
 8006af4:	2010      	movs	r0, #16
 8006af6:	f7ff fd7f 	bl	80065f8 <malloc>
 8006afa:	4602      	mov	r2, r0
 8006afc:	61f0      	str	r0, [r6, #28]
 8006afe:	b928      	cbnz	r0, 8006b0c <__pow5mult+0x40>
 8006b00:	4b1d      	ldr	r3, [pc, #116]	; (8006b78 <__pow5mult+0xac>)
 8006b02:	481e      	ldr	r0, [pc, #120]	; (8006b7c <__pow5mult+0xb0>)
 8006b04:	f240 11b3 	movw	r1, #435	; 0x1b3
 8006b08:	f000 fbe4 	bl	80072d4 <__assert_func>
 8006b0c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006b10:	6004      	str	r4, [r0, #0]
 8006b12:	60c4      	str	r4, [r0, #12]
 8006b14:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8006b18:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006b1c:	b94c      	cbnz	r4, 8006b32 <__pow5mult+0x66>
 8006b1e:	f240 2171 	movw	r1, #625	; 0x271
 8006b22:	4630      	mov	r0, r6
 8006b24:	f7ff ff12 	bl	800694c <__i2b>
 8006b28:	2300      	movs	r3, #0
 8006b2a:	f8c8 0008 	str.w	r0, [r8, #8]
 8006b2e:	4604      	mov	r4, r0
 8006b30:	6003      	str	r3, [r0, #0]
 8006b32:	f04f 0900 	mov.w	r9, #0
 8006b36:	07eb      	lsls	r3, r5, #31
 8006b38:	d50a      	bpl.n	8006b50 <__pow5mult+0x84>
 8006b3a:	4639      	mov	r1, r7
 8006b3c:	4622      	mov	r2, r4
 8006b3e:	4630      	mov	r0, r6
 8006b40:	f7ff ff1a 	bl	8006978 <__multiply>
 8006b44:	4639      	mov	r1, r7
 8006b46:	4680      	mov	r8, r0
 8006b48:	4630      	mov	r0, r6
 8006b4a:	f7ff fe49 	bl	80067e0 <_Bfree>
 8006b4e:	4647      	mov	r7, r8
 8006b50:	106d      	asrs	r5, r5, #1
 8006b52:	d00b      	beq.n	8006b6c <__pow5mult+0xa0>
 8006b54:	6820      	ldr	r0, [r4, #0]
 8006b56:	b938      	cbnz	r0, 8006b68 <__pow5mult+0x9c>
 8006b58:	4622      	mov	r2, r4
 8006b5a:	4621      	mov	r1, r4
 8006b5c:	4630      	mov	r0, r6
 8006b5e:	f7ff ff0b 	bl	8006978 <__multiply>
 8006b62:	6020      	str	r0, [r4, #0]
 8006b64:	f8c0 9000 	str.w	r9, [r0]
 8006b68:	4604      	mov	r4, r0
 8006b6a:	e7e4      	b.n	8006b36 <__pow5mult+0x6a>
 8006b6c:	4638      	mov	r0, r7
 8006b6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b72:	bf00      	nop
 8006b74:	08007bb8 	.word	0x08007bb8
 8006b78:	080079ed 	.word	0x080079ed
 8006b7c:	08007a6d 	.word	0x08007a6d

08006b80 <__lshift>:
 8006b80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b84:	460c      	mov	r4, r1
 8006b86:	6849      	ldr	r1, [r1, #4]
 8006b88:	6923      	ldr	r3, [r4, #16]
 8006b8a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006b8e:	68a3      	ldr	r3, [r4, #8]
 8006b90:	4607      	mov	r7, r0
 8006b92:	4691      	mov	r9, r2
 8006b94:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006b98:	f108 0601 	add.w	r6, r8, #1
 8006b9c:	42b3      	cmp	r3, r6
 8006b9e:	db0b      	blt.n	8006bb8 <__lshift+0x38>
 8006ba0:	4638      	mov	r0, r7
 8006ba2:	f7ff fddd 	bl	8006760 <_Balloc>
 8006ba6:	4605      	mov	r5, r0
 8006ba8:	b948      	cbnz	r0, 8006bbe <__lshift+0x3e>
 8006baa:	4602      	mov	r2, r0
 8006bac:	4b28      	ldr	r3, [pc, #160]	; (8006c50 <__lshift+0xd0>)
 8006bae:	4829      	ldr	r0, [pc, #164]	; (8006c54 <__lshift+0xd4>)
 8006bb0:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8006bb4:	f000 fb8e 	bl	80072d4 <__assert_func>
 8006bb8:	3101      	adds	r1, #1
 8006bba:	005b      	lsls	r3, r3, #1
 8006bbc:	e7ee      	b.n	8006b9c <__lshift+0x1c>
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	f100 0114 	add.w	r1, r0, #20
 8006bc4:	f100 0210 	add.w	r2, r0, #16
 8006bc8:	4618      	mov	r0, r3
 8006bca:	4553      	cmp	r3, sl
 8006bcc:	db33      	blt.n	8006c36 <__lshift+0xb6>
 8006bce:	6920      	ldr	r0, [r4, #16]
 8006bd0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006bd4:	f104 0314 	add.w	r3, r4, #20
 8006bd8:	f019 091f 	ands.w	r9, r9, #31
 8006bdc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006be0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006be4:	d02b      	beq.n	8006c3e <__lshift+0xbe>
 8006be6:	f1c9 0e20 	rsb	lr, r9, #32
 8006bea:	468a      	mov	sl, r1
 8006bec:	2200      	movs	r2, #0
 8006bee:	6818      	ldr	r0, [r3, #0]
 8006bf0:	fa00 f009 	lsl.w	r0, r0, r9
 8006bf4:	4310      	orrs	r0, r2
 8006bf6:	f84a 0b04 	str.w	r0, [sl], #4
 8006bfa:	f853 2b04 	ldr.w	r2, [r3], #4
 8006bfe:	459c      	cmp	ip, r3
 8006c00:	fa22 f20e 	lsr.w	r2, r2, lr
 8006c04:	d8f3      	bhi.n	8006bee <__lshift+0x6e>
 8006c06:	ebac 0304 	sub.w	r3, ip, r4
 8006c0a:	3b15      	subs	r3, #21
 8006c0c:	f023 0303 	bic.w	r3, r3, #3
 8006c10:	3304      	adds	r3, #4
 8006c12:	f104 0015 	add.w	r0, r4, #21
 8006c16:	4584      	cmp	ip, r0
 8006c18:	bf38      	it	cc
 8006c1a:	2304      	movcc	r3, #4
 8006c1c:	50ca      	str	r2, [r1, r3]
 8006c1e:	b10a      	cbz	r2, 8006c24 <__lshift+0xa4>
 8006c20:	f108 0602 	add.w	r6, r8, #2
 8006c24:	3e01      	subs	r6, #1
 8006c26:	4638      	mov	r0, r7
 8006c28:	612e      	str	r6, [r5, #16]
 8006c2a:	4621      	mov	r1, r4
 8006c2c:	f7ff fdd8 	bl	80067e0 <_Bfree>
 8006c30:	4628      	mov	r0, r5
 8006c32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c36:	f842 0f04 	str.w	r0, [r2, #4]!
 8006c3a:	3301      	adds	r3, #1
 8006c3c:	e7c5      	b.n	8006bca <__lshift+0x4a>
 8006c3e:	3904      	subs	r1, #4
 8006c40:	f853 2b04 	ldr.w	r2, [r3], #4
 8006c44:	f841 2f04 	str.w	r2, [r1, #4]!
 8006c48:	459c      	cmp	ip, r3
 8006c4a:	d8f9      	bhi.n	8006c40 <__lshift+0xc0>
 8006c4c:	e7ea      	b.n	8006c24 <__lshift+0xa4>
 8006c4e:	bf00      	nop
 8006c50:	08007a5c 	.word	0x08007a5c
 8006c54:	08007a6d 	.word	0x08007a6d

08006c58 <__mcmp>:
 8006c58:	b530      	push	{r4, r5, lr}
 8006c5a:	6902      	ldr	r2, [r0, #16]
 8006c5c:	690c      	ldr	r4, [r1, #16]
 8006c5e:	1b12      	subs	r2, r2, r4
 8006c60:	d10e      	bne.n	8006c80 <__mcmp+0x28>
 8006c62:	f100 0314 	add.w	r3, r0, #20
 8006c66:	3114      	adds	r1, #20
 8006c68:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006c6c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006c70:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006c74:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006c78:	42a5      	cmp	r5, r4
 8006c7a:	d003      	beq.n	8006c84 <__mcmp+0x2c>
 8006c7c:	d305      	bcc.n	8006c8a <__mcmp+0x32>
 8006c7e:	2201      	movs	r2, #1
 8006c80:	4610      	mov	r0, r2
 8006c82:	bd30      	pop	{r4, r5, pc}
 8006c84:	4283      	cmp	r3, r0
 8006c86:	d3f3      	bcc.n	8006c70 <__mcmp+0x18>
 8006c88:	e7fa      	b.n	8006c80 <__mcmp+0x28>
 8006c8a:	f04f 32ff 	mov.w	r2, #4294967295
 8006c8e:	e7f7      	b.n	8006c80 <__mcmp+0x28>

08006c90 <__mdiff>:
 8006c90:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c94:	460c      	mov	r4, r1
 8006c96:	4606      	mov	r6, r0
 8006c98:	4611      	mov	r1, r2
 8006c9a:	4620      	mov	r0, r4
 8006c9c:	4690      	mov	r8, r2
 8006c9e:	f7ff ffdb 	bl	8006c58 <__mcmp>
 8006ca2:	1e05      	subs	r5, r0, #0
 8006ca4:	d110      	bne.n	8006cc8 <__mdiff+0x38>
 8006ca6:	4629      	mov	r1, r5
 8006ca8:	4630      	mov	r0, r6
 8006caa:	f7ff fd59 	bl	8006760 <_Balloc>
 8006cae:	b930      	cbnz	r0, 8006cbe <__mdiff+0x2e>
 8006cb0:	4b3a      	ldr	r3, [pc, #232]	; (8006d9c <__mdiff+0x10c>)
 8006cb2:	4602      	mov	r2, r0
 8006cb4:	f240 2137 	movw	r1, #567	; 0x237
 8006cb8:	4839      	ldr	r0, [pc, #228]	; (8006da0 <__mdiff+0x110>)
 8006cba:	f000 fb0b 	bl	80072d4 <__assert_func>
 8006cbe:	2301      	movs	r3, #1
 8006cc0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006cc4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cc8:	bfa4      	itt	ge
 8006cca:	4643      	movge	r3, r8
 8006ccc:	46a0      	movge	r8, r4
 8006cce:	4630      	mov	r0, r6
 8006cd0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006cd4:	bfa6      	itte	ge
 8006cd6:	461c      	movge	r4, r3
 8006cd8:	2500      	movge	r5, #0
 8006cda:	2501      	movlt	r5, #1
 8006cdc:	f7ff fd40 	bl	8006760 <_Balloc>
 8006ce0:	b920      	cbnz	r0, 8006cec <__mdiff+0x5c>
 8006ce2:	4b2e      	ldr	r3, [pc, #184]	; (8006d9c <__mdiff+0x10c>)
 8006ce4:	4602      	mov	r2, r0
 8006ce6:	f240 2145 	movw	r1, #581	; 0x245
 8006cea:	e7e5      	b.n	8006cb8 <__mdiff+0x28>
 8006cec:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006cf0:	6926      	ldr	r6, [r4, #16]
 8006cf2:	60c5      	str	r5, [r0, #12]
 8006cf4:	f104 0914 	add.w	r9, r4, #20
 8006cf8:	f108 0514 	add.w	r5, r8, #20
 8006cfc:	f100 0e14 	add.w	lr, r0, #20
 8006d00:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8006d04:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006d08:	f108 0210 	add.w	r2, r8, #16
 8006d0c:	46f2      	mov	sl, lr
 8006d0e:	2100      	movs	r1, #0
 8006d10:	f859 3b04 	ldr.w	r3, [r9], #4
 8006d14:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006d18:	fa11 f88b 	uxtah	r8, r1, fp
 8006d1c:	b299      	uxth	r1, r3
 8006d1e:	0c1b      	lsrs	r3, r3, #16
 8006d20:	eba8 0801 	sub.w	r8, r8, r1
 8006d24:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006d28:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006d2c:	fa1f f888 	uxth.w	r8, r8
 8006d30:	1419      	asrs	r1, r3, #16
 8006d32:	454e      	cmp	r6, r9
 8006d34:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006d38:	f84a 3b04 	str.w	r3, [sl], #4
 8006d3c:	d8e8      	bhi.n	8006d10 <__mdiff+0x80>
 8006d3e:	1b33      	subs	r3, r6, r4
 8006d40:	3b15      	subs	r3, #21
 8006d42:	f023 0303 	bic.w	r3, r3, #3
 8006d46:	3304      	adds	r3, #4
 8006d48:	3415      	adds	r4, #21
 8006d4a:	42a6      	cmp	r6, r4
 8006d4c:	bf38      	it	cc
 8006d4e:	2304      	movcc	r3, #4
 8006d50:	441d      	add	r5, r3
 8006d52:	4473      	add	r3, lr
 8006d54:	469e      	mov	lr, r3
 8006d56:	462e      	mov	r6, r5
 8006d58:	4566      	cmp	r6, ip
 8006d5a:	d30e      	bcc.n	8006d7a <__mdiff+0xea>
 8006d5c:	f10c 0203 	add.w	r2, ip, #3
 8006d60:	1b52      	subs	r2, r2, r5
 8006d62:	f022 0203 	bic.w	r2, r2, #3
 8006d66:	3d03      	subs	r5, #3
 8006d68:	45ac      	cmp	ip, r5
 8006d6a:	bf38      	it	cc
 8006d6c:	2200      	movcc	r2, #0
 8006d6e:	4413      	add	r3, r2
 8006d70:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8006d74:	b17a      	cbz	r2, 8006d96 <__mdiff+0x106>
 8006d76:	6107      	str	r7, [r0, #16]
 8006d78:	e7a4      	b.n	8006cc4 <__mdiff+0x34>
 8006d7a:	f856 8b04 	ldr.w	r8, [r6], #4
 8006d7e:	fa11 f288 	uxtah	r2, r1, r8
 8006d82:	1414      	asrs	r4, r2, #16
 8006d84:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006d88:	b292      	uxth	r2, r2
 8006d8a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8006d8e:	f84e 2b04 	str.w	r2, [lr], #4
 8006d92:	1421      	asrs	r1, r4, #16
 8006d94:	e7e0      	b.n	8006d58 <__mdiff+0xc8>
 8006d96:	3f01      	subs	r7, #1
 8006d98:	e7ea      	b.n	8006d70 <__mdiff+0xe0>
 8006d9a:	bf00      	nop
 8006d9c:	08007a5c 	.word	0x08007a5c
 8006da0:	08007a6d 	.word	0x08007a6d

08006da4 <__d2b>:
 8006da4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006da8:	460f      	mov	r7, r1
 8006daa:	2101      	movs	r1, #1
 8006dac:	ec59 8b10 	vmov	r8, r9, d0
 8006db0:	4616      	mov	r6, r2
 8006db2:	f7ff fcd5 	bl	8006760 <_Balloc>
 8006db6:	4604      	mov	r4, r0
 8006db8:	b930      	cbnz	r0, 8006dc8 <__d2b+0x24>
 8006dba:	4602      	mov	r2, r0
 8006dbc:	4b24      	ldr	r3, [pc, #144]	; (8006e50 <__d2b+0xac>)
 8006dbe:	4825      	ldr	r0, [pc, #148]	; (8006e54 <__d2b+0xb0>)
 8006dc0:	f240 310f 	movw	r1, #783	; 0x30f
 8006dc4:	f000 fa86 	bl	80072d4 <__assert_func>
 8006dc8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006dcc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006dd0:	bb2d      	cbnz	r5, 8006e1e <__d2b+0x7a>
 8006dd2:	9301      	str	r3, [sp, #4]
 8006dd4:	f1b8 0300 	subs.w	r3, r8, #0
 8006dd8:	d026      	beq.n	8006e28 <__d2b+0x84>
 8006dda:	4668      	mov	r0, sp
 8006ddc:	9300      	str	r3, [sp, #0]
 8006dde:	f7ff fd87 	bl	80068f0 <__lo0bits>
 8006de2:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006de6:	b1e8      	cbz	r0, 8006e24 <__d2b+0x80>
 8006de8:	f1c0 0320 	rsb	r3, r0, #32
 8006dec:	fa02 f303 	lsl.w	r3, r2, r3
 8006df0:	430b      	orrs	r3, r1
 8006df2:	40c2      	lsrs	r2, r0
 8006df4:	6163      	str	r3, [r4, #20]
 8006df6:	9201      	str	r2, [sp, #4]
 8006df8:	9b01      	ldr	r3, [sp, #4]
 8006dfa:	61a3      	str	r3, [r4, #24]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	bf14      	ite	ne
 8006e00:	2202      	movne	r2, #2
 8006e02:	2201      	moveq	r2, #1
 8006e04:	6122      	str	r2, [r4, #16]
 8006e06:	b1bd      	cbz	r5, 8006e38 <__d2b+0x94>
 8006e08:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006e0c:	4405      	add	r5, r0
 8006e0e:	603d      	str	r5, [r7, #0]
 8006e10:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006e14:	6030      	str	r0, [r6, #0]
 8006e16:	4620      	mov	r0, r4
 8006e18:	b003      	add	sp, #12
 8006e1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006e1e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006e22:	e7d6      	b.n	8006dd2 <__d2b+0x2e>
 8006e24:	6161      	str	r1, [r4, #20]
 8006e26:	e7e7      	b.n	8006df8 <__d2b+0x54>
 8006e28:	a801      	add	r0, sp, #4
 8006e2a:	f7ff fd61 	bl	80068f0 <__lo0bits>
 8006e2e:	9b01      	ldr	r3, [sp, #4]
 8006e30:	6163      	str	r3, [r4, #20]
 8006e32:	3020      	adds	r0, #32
 8006e34:	2201      	movs	r2, #1
 8006e36:	e7e5      	b.n	8006e04 <__d2b+0x60>
 8006e38:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006e3c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006e40:	6038      	str	r0, [r7, #0]
 8006e42:	6918      	ldr	r0, [r3, #16]
 8006e44:	f7ff fd34 	bl	80068b0 <__hi0bits>
 8006e48:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006e4c:	e7e2      	b.n	8006e14 <__d2b+0x70>
 8006e4e:	bf00      	nop
 8006e50:	08007a5c 	.word	0x08007a5c
 8006e54:	08007a6d 	.word	0x08007a6d

08006e58 <__ssputs_r>:
 8006e58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e5c:	688e      	ldr	r6, [r1, #8]
 8006e5e:	461f      	mov	r7, r3
 8006e60:	42be      	cmp	r6, r7
 8006e62:	680b      	ldr	r3, [r1, #0]
 8006e64:	4682      	mov	sl, r0
 8006e66:	460c      	mov	r4, r1
 8006e68:	4690      	mov	r8, r2
 8006e6a:	d82c      	bhi.n	8006ec6 <__ssputs_r+0x6e>
 8006e6c:	898a      	ldrh	r2, [r1, #12]
 8006e6e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006e72:	d026      	beq.n	8006ec2 <__ssputs_r+0x6a>
 8006e74:	6965      	ldr	r5, [r4, #20]
 8006e76:	6909      	ldr	r1, [r1, #16]
 8006e78:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006e7c:	eba3 0901 	sub.w	r9, r3, r1
 8006e80:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006e84:	1c7b      	adds	r3, r7, #1
 8006e86:	444b      	add	r3, r9
 8006e88:	106d      	asrs	r5, r5, #1
 8006e8a:	429d      	cmp	r5, r3
 8006e8c:	bf38      	it	cc
 8006e8e:	461d      	movcc	r5, r3
 8006e90:	0553      	lsls	r3, r2, #21
 8006e92:	d527      	bpl.n	8006ee4 <__ssputs_r+0x8c>
 8006e94:	4629      	mov	r1, r5
 8006e96:	f7ff fbd7 	bl	8006648 <_malloc_r>
 8006e9a:	4606      	mov	r6, r0
 8006e9c:	b360      	cbz	r0, 8006ef8 <__ssputs_r+0xa0>
 8006e9e:	6921      	ldr	r1, [r4, #16]
 8006ea0:	464a      	mov	r2, r9
 8006ea2:	f000 fa09 	bl	80072b8 <memcpy>
 8006ea6:	89a3      	ldrh	r3, [r4, #12]
 8006ea8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006eac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006eb0:	81a3      	strh	r3, [r4, #12]
 8006eb2:	6126      	str	r6, [r4, #16]
 8006eb4:	6165      	str	r5, [r4, #20]
 8006eb6:	444e      	add	r6, r9
 8006eb8:	eba5 0509 	sub.w	r5, r5, r9
 8006ebc:	6026      	str	r6, [r4, #0]
 8006ebe:	60a5      	str	r5, [r4, #8]
 8006ec0:	463e      	mov	r6, r7
 8006ec2:	42be      	cmp	r6, r7
 8006ec4:	d900      	bls.n	8006ec8 <__ssputs_r+0x70>
 8006ec6:	463e      	mov	r6, r7
 8006ec8:	6820      	ldr	r0, [r4, #0]
 8006eca:	4632      	mov	r2, r6
 8006ecc:	4641      	mov	r1, r8
 8006ece:	f000 f9c9 	bl	8007264 <memmove>
 8006ed2:	68a3      	ldr	r3, [r4, #8]
 8006ed4:	1b9b      	subs	r3, r3, r6
 8006ed6:	60a3      	str	r3, [r4, #8]
 8006ed8:	6823      	ldr	r3, [r4, #0]
 8006eda:	4433      	add	r3, r6
 8006edc:	6023      	str	r3, [r4, #0]
 8006ede:	2000      	movs	r0, #0
 8006ee0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ee4:	462a      	mov	r2, r5
 8006ee6:	f000 fa3b 	bl	8007360 <_realloc_r>
 8006eea:	4606      	mov	r6, r0
 8006eec:	2800      	cmp	r0, #0
 8006eee:	d1e0      	bne.n	8006eb2 <__ssputs_r+0x5a>
 8006ef0:	6921      	ldr	r1, [r4, #16]
 8006ef2:	4650      	mov	r0, sl
 8006ef4:	f7ff fb34 	bl	8006560 <_free_r>
 8006ef8:	230c      	movs	r3, #12
 8006efa:	f8ca 3000 	str.w	r3, [sl]
 8006efe:	89a3      	ldrh	r3, [r4, #12]
 8006f00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006f04:	81a3      	strh	r3, [r4, #12]
 8006f06:	f04f 30ff 	mov.w	r0, #4294967295
 8006f0a:	e7e9      	b.n	8006ee0 <__ssputs_r+0x88>

08006f0c <_svfiprintf_r>:
 8006f0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f10:	4698      	mov	r8, r3
 8006f12:	898b      	ldrh	r3, [r1, #12]
 8006f14:	061b      	lsls	r3, r3, #24
 8006f16:	b09d      	sub	sp, #116	; 0x74
 8006f18:	4607      	mov	r7, r0
 8006f1a:	460d      	mov	r5, r1
 8006f1c:	4614      	mov	r4, r2
 8006f1e:	d50e      	bpl.n	8006f3e <_svfiprintf_r+0x32>
 8006f20:	690b      	ldr	r3, [r1, #16]
 8006f22:	b963      	cbnz	r3, 8006f3e <_svfiprintf_r+0x32>
 8006f24:	2140      	movs	r1, #64	; 0x40
 8006f26:	f7ff fb8f 	bl	8006648 <_malloc_r>
 8006f2a:	6028      	str	r0, [r5, #0]
 8006f2c:	6128      	str	r0, [r5, #16]
 8006f2e:	b920      	cbnz	r0, 8006f3a <_svfiprintf_r+0x2e>
 8006f30:	230c      	movs	r3, #12
 8006f32:	603b      	str	r3, [r7, #0]
 8006f34:	f04f 30ff 	mov.w	r0, #4294967295
 8006f38:	e0d0      	b.n	80070dc <_svfiprintf_r+0x1d0>
 8006f3a:	2340      	movs	r3, #64	; 0x40
 8006f3c:	616b      	str	r3, [r5, #20]
 8006f3e:	2300      	movs	r3, #0
 8006f40:	9309      	str	r3, [sp, #36]	; 0x24
 8006f42:	2320      	movs	r3, #32
 8006f44:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006f48:	f8cd 800c 	str.w	r8, [sp, #12]
 8006f4c:	2330      	movs	r3, #48	; 0x30
 8006f4e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80070f4 <_svfiprintf_r+0x1e8>
 8006f52:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006f56:	f04f 0901 	mov.w	r9, #1
 8006f5a:	4623      	mov	r3, r4
 8006f5c:	469a      	mov	sl, r3
 8006f5e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006f62:	b10a      	cbz	r2, 8006f68 <_svfiprintf_r+0x5c>
 8006f64:	2a25      	cmp	r2, #37	; 0x25
 8006f66:	d1f9      	bne.n	8006f5c <_svfiprintf_r+0x50>
 8006f68:	ebba 0b04 	subs.w	fp, sl, r4
 8006f6c:	d00b      	beq.n	8006f86 <_svfiprintf_r+0x7a>
 8006f6e:	465b      	mov	r3, fp
 8006f70:	4622      	mov	r2, r4
 8006f72:	4629      	mov	r1, r5
 8006f74:	4638      	mov	r0, r7
 8006f76:	f7ff ff6f 	bl	8006e58 <__ssputs_r>
 8006f7a:	3001      	adds	r0, #1
 8006f7c:	f000 80a9 	beq.w	80070d2 <_svfiprintf_r+0x1c6>
 8006f80:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006f82:	445a      	add	r2, fp
 8006f84:	9209      	str	r2, [sp, #36]	; 0x24
 8006f86:	f89a 3000 	ldrb.w	r3, [sl]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	f000 80a1 	beq.w	80070d2 <_svfiprintf_r+0x1c6>
 8006f90:	2300      	movs	r3, #0
 8006f92:	f04f 32ff 	mov.w	r2, #4294967295
 8006f96:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006f9a:	f10a 0a01 	add.w	sl, sl, #1
 8006f9e:	9304      	str	r3, [sp, #16]
 8006fa0:	9307      	str	r3, [sp, #28]
 8006fa2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006fa6:	931a      	str	r3, [sp, #104]	; 0x68
 8006fa8:	4654      	mov	r4, sl
 8006faa:	2205      	movs	r2, #5
 8006fac:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006fb0:	4850      	ldr	r0, [pc, #320]	; (80070f4 <_svfiprintf_r+0x1e8>)
 8006fb2:	f7f9 f945 	bl	8000240 <memchr>
 8006fb6:	9a04      	ldr	r2, [sp, #16]
 8006fb8:	b9d8      	cbnz	r0, 8006ff2 <_svfiprintf_r+0xe6>
 8006fba:	06d0      	lsls	r0, r2, #27
 8006fbc:	bf44      	itt	mi
 8006fbe:	2320      	movmi	r3, #32
 8006fc0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006fc4:	0711      	lsls	r1, r2, #28
 8006fc6:	bf44      	itt	mi
 8006fc8:	232b      	movmi	r3, #43	; 0x2b
 8006fca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006fce:	f89a 3000 	ldrb.w	r3, [sl]
 8006fd2:	2b2a      	cmp	r3, #42	; 0x2a
 8006fd4:	d015      	beq.n	8007002 <_svfiprintf_r+0xf6>
 8006fd6:	9a07      	ldr	r2, [sp, #28]
 8006fd8:	4654      	mov	r4, sl
 8006fda:	2000      	movs	r0, #0
 8006fdc:	f04f 0c0a 	mov.w	ip, #10
 8006fe0:	4621      	mov	r1, r4
 8006fe2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006fe6:	3b30      	subs	r3, #48	; 0x30
 8006fe8:	2b09      	cmp	r3, #9
 8006fea:	d94d      	bls.n	8007088 <_svfiprintf_r+0x17c>
 8006fec:	b1b0      	cbz	r0, 800701c <_svfiprintf_r+0x110>
 8006fee:	9207      	str	r2, [sp, #28]
 8006ff0:	e014      	b.n	800701c <_svfiprintf_r+0x110>
 8006ff2:	eba0 0308 	sub.w	r3, r0, r8
 8006ff6:	fa09 f303 	lsl.w	r3, r9, r3
 8006ffa:	4313      	orrs	r3, r2
 8006ffc:	9304      	str	r3, [sp, #16]
 8006ffe:	46a2      	mov	sl, r4
 8007000:	e7d2      	b.n	8006fa8 <_svfiprintf_r+0x9c>
 8007002:	9b03      	ldr	r3, [sp, #12]
 8007004:	1d19      	adds	r1, r3, #4
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	9103      	str	r1, [sp, #12]
 800700a:	2b00      	cmp	r3, #0
 800700c:	bfbb      	ittet	lt
 800700e:	425b      	neglt	r3, r3
 8007010:	f042 0202 	orrlt.w	r2, r2, #2
 8007014:	9307      	strge	r3, [sp, #28]
 8007016:	9307      	strlt	r3, [sp, #28]
 8007018:	bfb8      	it	lt
 800701a:	9204      	strlt	r2, [sp, #16]
 800701c:	7823      	ldrb	r3, [r4, #0]
 800701e:	2b2e      	cmp	r3, #46	; 0x2e
 8007020:	d10c      	bne.n	800703c <_svfiprintf_r+0x130>
 8007022:	7863      	ldrb	r3, [r4, #1]
 8007024:	2b2a      	cmp	r3, #42	; 0x2a
 8007026:	d134      	bne.n	8007092 <_svfiprintf_r+0x186>
 8007028:	9b03      	ldr	r3, [sp, #12]
 800702a:	1d1a      	adds	r2, r3, #4
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	9203      	str	r2, [sp, #12]
 8007030:	2b00      	cmp	r3, #0
 8007032:	bfb8      	it	lt
 8007034:	f04f 33ff 	movlt.w	r3, #4294967295
 8007038:	3402      	adds	r4, #2
 800703a:	9305      	str	r3, [sp, #20]
 800703c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8007104 <_svfiprintf_r+0x1f8>
 8007040:	7821      	ldrb	r1, [r4, #0]
 8007042:	2203      	movs	r2, #3
 8007044:	4650      	mov	r0, sl
 8007046:	f7f9 f8fb 	bl	8000240 <memchr>
 800704a:	b138      	cbz	r0, 800705c <_svfiprintf_r+0x150>
 800704c:	9b04      	ldr	r3, [sp, #16]
 800704e:	eba0 000a 	sub.w	r0, r0, sl
 8007052:	2240      	movs	r2, #64	; 0x40
 8007054:	4082      	lsls	r2, r0
 8007056:	4313      	orrs	r3, r2
 8007058:	3401      	adds	r4, #1
 800705a:	9304      	str	r3, [sp, #16]
 800705c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007060:	4825      	ldr	r0, [pc, #148]	; (80070f8 <_svfiprintf_r+0x1ec>)
 8007062:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007066:	2206      	movs	r2, #6
 8007068:	f7f9 f8ea 	bl	8000240 <memchr>
 800706c:	2800      	cmp	r0, #0
 800706e:	d038      	beq.n	80070e2 <_svfiprintf_r+0x1d6>
 8007070:	4b22      	ldr	r3, [pc, #136]	; (80070fc <_svfiprintf_r+0x1f0>)
 8007072:	bb1b      	cbnz	r3, 80070bc <_svfiprintf_r+0x1b0>
 8007074:	9b03      	ldr	r3, [sp, #12]
 8007076:	3307      	adds	r3, #7
 8007078:	f023 0307 	bic.w	r3, r3, #7
 800707c:	3308      	adds	r3, #8
 800707e:	9303      	str	r3, [sp, #12]
 8007080:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007082:	4433      	add	r3, r6
 8007084:	9309      	str	r3, [sp, #36]	; 0x24
 8007086:	e768      	b.n	8006f5a <_svfiprintf_r+0x4e>
 8007088:	fb0c 3202 	mla	r2, ip, r2, r3
 800708c:	460c      	mov	r4, r1
 800708e:	2001      	movs	r0, #1
 8007090:	e7a6      	b.n	8006fe0 <_svfiprintf_r+0xd4>
 8007092:	2300      	movs	r3, #0
 8007094:	3401      	adds	r4, #1
 8007096:	9305      	str	r3, [sp, #20]
 8007098:	4619      	mov	r1, r3
 800709a:	f04f 0c0a 	mov.w	ip, #10
 800709e:	4620      	mov	r0, r4
 80070a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80070a4:	3a30      	subs	r2, #48	; 0x30
 80070a6:	2a09      	cmp	r2, #9
 80070a8:	d903      	bls.n	80070b2 <_svfiprintf_r+0x1a6>
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d0c6      	beq.n	800703c <_svfiprintf_r+0x130>
 80070ae:	9105      	str	r1, [sp, #20]
 80070b0:	e7c4      	b.n	800703c <_svfiprintf_r+0x130>
 80070b2:	fb0c 2101 	mla	r1, ip, r1, r2
 80070b6:	4604      	mov	r4, r0
 80070b8:	2301      	movs	r3, #1
 80070ba:	e7f0      	b.n	800709e <_svfiprintf_r+0x192>
 80070bc:	ab03      	add	r3, sp, #12
 80070be:	9300      	str	r3, [sp, #0]
 80070c0:	462a      	mov	r2, r5
 80070c2:	4b0f      	ldr	r3, [pc, #60]	; (8007100 <_svfiprintf_r+0x1f4>)
 80070c4:	a904      	add	r1, sp, #16
 80070c6:	4638      	mov	r0, r7
 80070c8:	f7fd ff06 	bl	8004ed8 <_printf_float>
 80070cc:	1c42      	adds	r2, r0, #1
 80070ce:	4606      	mov	r6, r0
 80070d0:	d1d6      	bne.n	8007080 <_svfiprintf_r+0x174>
 80070d2:	89ab      	ldrh	r3, [r5, #12]
 80070d4:	065b      	lsls	r3, r3, #25
 80070d6:	f53f af2d 	bmi.w	8006f34 <_svfiprintf_r+0x28>
 80070da:	9809      	ldr	r0, [sp, #36]	; 0x24
 80070dc:	b01d      	add	sp, #116	; 0x74
 80070de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070e2:	ab03      	add	r3, sp, #12
 80070e4:	9300      	str	r3, [sp, #0]
 80070e6:	462a      	mov	r2, r5
 80070e8:	4b05      	ldr	r3, [pc, #20]	; (8007100 <_svfiprintf_r+0x1f4>)
 80070ea:	a904      	add	r1, sp, #16
 80070ec:	4638      	mov	r0, r7
 80070ee:	f7fe f97b 	bl	80053e8 <_printf_i>
 80070f2:	e7eb      	b.n	80070cc <_svfiprintf_r+0x1c0>
 80070f4:	08007bc4 	.word	0x08007bc4
 80070f8:	08007bce 	.word	0x08007bce
 80070fc:	08004ed9 	.word	0x08004ed9
 8007100:	08006e59 	.word	0x08006e59
 8007104:	08007bca 	.word	0x08007bca

08007108 <__sflush_r>:
 8007108:	898a      	ldrh	r2, [r1, #12]
 800710a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800710e:	4605      	mov	r5, r0
 8007110:	0710      	lsls	r0, r2, #28
 8007112:	460c      	mov	r4, r1
 8007114:	d458      	bmi.n	80071c8 <__sflush_r+0xc0>
 8007116:	684b      	ldr	r3, [r1, #4]
 8007118:	2b00      	cmp	r3, #0
 800711a:	dc05      	bgt.n	8007128 <__sflush_r+0x20>
 800711c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800711e:	2b00      	cmp	r3, #0
 8007120:	dc02      	bgt.n	8007128 <__sflush_r+0x20>
 8007122:	2000      	movs	r0, #0
 8007124:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007128:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800712a:	2e00      	cmp	r6, #0
 800712c:	d0f9      	beq.n	8007122 <__sflush_r+0x1a>
 800712e:	2300      	movs	r3, #0
 8007130:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007134:	682f      	ldr	r7, [r5, #0]
 8007136:	6a21      	ldr	r1, [r4, #32]
 8007138:	602b      	str	r3, [r5, #0]
 800713a:	d032      	beq.n	80071a2 <__sflush_r+0x9a>
 800713c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800713e:	89a3      	ldrh	r3, [r4, #12]
 8007140:	075a      	lsls	r2, r3, #29
 8007142:	d505      	bpl.n	8007150 <__sflush_r+0x48>
 8007144:	6863      	ldr	r3, [r4, #4]
 8007146:	1ac0      	subs	r0, r0, r3
 8007148:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800714a:	b10b      	cbz	r3, 8007150 <__sflush_r+0x48>
 800714c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800714e:	1ac0      	subs	r0, r0, r3
 8007150:	2300      	movs	r3, #0
 8007152:	4602      	mov	r2, r0
 8007154:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007156:	6a21      	ldr	r1, [r4, #32]
 8007158:	4628      	mov	r0, r5
 800715a:	47b0      	blx	r6
 800715c:	1c43      	adds	r3, r0, #1
 800715e:	89a3      	ldrh	r3, [r4, #12]
 8007160:	d106      	bne.n	8007170 <__sflush_r+0x68>
 8007162:	6829      	ldr	r1, [r5, #0]
 8007164:	291d      	cmp	r1, #29
 8007166:	d82b      	bhi.n	80071c0 <__sflush_r+0xb8>
 8007168:	4a29      	ldr	r2, [pc, #164]	; (8007210 <__sflush_r+0x108>)
 800716a:	410a      	asrs	r2, r1
 800716c:	07d6      	lsls	r6, r2, #31
 800716e:	d427      	bmi.n	80071c0 <__sflush_r+0xb8>
 8007170:	2200      	movs	r2, #0
 8007172:	6062      	str	r2, [r4, #4]
 8007174:	04d9      	lsls	r1, r3, #19
 8007176:	6922      	ldr	r2, [r4, #16]
 8007178:	6022      	str	r2, [r4, #0]
 800717a:	d504      	bpl.n	8007186 <__sflush_r+0x7e>
 800717c:	1c42      	adds	r2, r0, #1
 800717e:	d101      	bne.n	8007184 <__sflush_r+0x7c>
 8007180:	682b      	ldr	r3, [r5, #0]
 8007182:	b903      	cbnz	r3, 8007186 <__sflush_r+0x7e>
 8007184:	6560      	str	r0, [r4, #84]	; 0x54
 8007186:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007188:	602f      	str	r7, [r5, #0]
 800718a:	2900      	cmp	r1, #0
 800718c:	d0c9      	beq.n	8007122 <__sflush_r+0x1a>
 800718e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007192:	4299      	cmp	r1, r3
 8007194:	d002      	beq.n	800719c <__sflush_r+0x94>
 8007196:	4628      	mov	r0, r5
 8007198:	f7ff f9e2 	bl	8006560 <_free_r>
 800719c:	2000      	movs	r0, #0
 800719e:	6360      	str	r0, [r4, #52]	; 0x34
 80071a0:	e7c0      	b.n	8007124 <__sflush_r+0x1c>
 80071a2:	2301      	movs	r3, #1
 80071a4:	4628      	mov	r0, r5
 80071a6:	47b0      	blx	r6
 80071a8:	1c41      	adds	r1, r0, #1
 80071aa:	d1c8      	bne.n	800713e <__sflush_r+0x36>
 80071ac:	682b      	ldr	r3, [r5, #0]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d0c5      	beq.n	800713e <__sflush_r+0x36>
 80071b2:	2b1d      	cmp	r3, #29
 80071b4:	d001      	beq.n	80071ba <__sflush_r+0xb2>
 80071b6:	2b16      	cmp	r3, #22
 80071b8:	d101      	bne.n	80071be <__sflush_r+0xb6>
 80071ba:	602f      	str	r7, [r5, #0]
 80071bc:	e7b1      	b.n	8007122 <__sflush_r+0x1a>
 80071be:	89a3      	ldrh	r3, [r4, #12]
 80071c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80071c4:	81a3      	strh	r3, [r4, #12]
 80071c6:	e7ad      	b.n	8007124 <__sflush_r+0x1c>
 80071c8:	690f      	ldr	r7, [r1, #16]
 80071ca:	2f00      	cmp	r7, #0
 80071cc:	d0a9      	beq.n	8007122 <__sflush_r+0x1a>
 80071ce:	0793      	lsls	r3, r2, #30
 80071d0:	680e      	ldr	r6, [r1, #0]
 80071d2:	bf08      	it	eq
 80071d4:	694b      	ldreq	r3, [r1, #20]
 80071d6:	600f      	str	r7, [r1, #0]
 80071d8:	bf18      	it	ne
 80071da:	2300      	movne	r3, #0
 80071dc:	eba6 0807 	sub.w	r8, r6, r7
 80071e0:	608b      	str	r3, [r1, #8]
 80071e2:	f1b8 0f00 	cmp.w	r8, #0
 80071e6:	dd9c      	ble.n	8007122 <__sflush_r+0x1a>
 80071e8:	6a21      	ldr	r1, [r4, #32]
 80071ea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80071ec:	4643      	mov	r3, r8
 80071ee:	463a      	mov	r2, r7
 80071f0:	4628      	mov	r0, r5
 80071f2:	47b0      	blx	r6
 80071f4:	2800      	cmp	r0, #0
 80071f6:	dc06      	bgt.n	8007206 <__sflush_r+0xfe>
 80071f8:	89a3      	ldrh	r3, [r4, #12]
 80071fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80071fe:	81a3      	strh	r3, [r4, #12]
 8007200:	f04f 30ff 	mov.w	r0, #4294967295
 8007204:	e78e      	b.n	8007124 <__sflush_r+0x1c>
 8007206:	4407      	add	r7, r0
 8007208:	eba8 0800 	sub.w	r8, r8, r0
 800720c:	e7e9      	b.n	80071e2 <__sflush_r+0xda>
 800720e:	bf00      	nop
 8007210:	dfbffffe 	.word	0xdfbffffe

08007214 <_fflush_r>:
 8007214:	b538      	push	{r3, r4, r5, lr}
 8007216:	690b      	ldr	r3, [r1, #16]
 8007218:	4605      	mov	r5, r0
 800721a:	460c      	mov	r4, r1
 800721c:	b913      	cbnz	r3, 8007224 <_fflush_r+0x10>
 800721e:	2500      	movs	r5, #0
 8007220:	4628      	mov	r0, r5
 8007222:	bd38      	pop	{r3, r4, r5, pc}
 8007224:	b118      	cbz	r0, 800722e <_fflush_r+0x1a>
 8007226:	6a03      	ldr	r3, [r0, #32]
 8007228:	b90b      	cbnz	r3, 800722e <_fflush_r+0x1a>
 800722a:	f7fe fa8b 	bl	8005744 <__sinit>
 800722e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007232:	2b00      	cmp	r3, #0
 8007234:	d0f3      	beq.n	800721e <_fflush_r+0xa>
 8007236:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007238:	07d0      	lsls	r0, r2, #31
 800723a:	d404      	bmi.n	8007246 <_fflush_r+0x32>
 800723c:	0599      	lsls	r1, r3, #22
 800723e:	d402      	bmi.n	8007246 <_fflush_r+0x32>
 8007240:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007242:	f7fe fb96 	bl	8005972 <__retarget_lock_acquire_recursive>
 8007246:	4628      	mov	r0, r5
 8007248:	4621      	mov	r1, r4
 800724a:	f7ff ff5d 	bl	8007108 <__sflush_r>
 800724e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007250:	07da      	lsls	r2, r3, #31
 8007252:	4605      	mov	r5, r0
 8007254:	d4e4      	bmi.n	8007220 <_fflush_r+0xc>
 8007256:	89a3      	ldrh	r3, [r4, #12]
 8007258:	059b      	lsls	r3, r3, #22
 800725a:	d4e1      	bmi.n	8007220 <_fflush_r+0xc>
 800725c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800725e:	f7fe fb89 	bl	8005974 <__retarget_lock_release_recursive>
 8007262:	e7dd      	b.n	8007220 <_fflush_r+0xc>

08007264 <memmove>:
 8007264:	4288      	cmp	r0, r1
 8007266:	b510      	push	{r4, lr}
 8007268:	eb01 0402 	add.w	r4, r1, r2
 800726c:	d902      	bls.n	8007274 <memmove+0x10>
 800726e:	4284      	cmp	r4, r0
 8007270:	4623      	mov	r3, r4
 8007272:	d807      	bhi.n	8007284 <memmove+0x20>
 8007274:	1e43      	subs	r3, r0, #1
 8007276:	42a1      	cmp	r1, r4
 8007278:	d008      	beq.n	800728c <memmove+0x28>
 800727a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800727e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007282:	e7f8      	b.n	8007276 <memmove+0x12>
 8007284:	4402      	add	r2, r0
 8007286:	4601      	mov	r1, r0
 8007288:	428a      	cmp	r2, r1
 800728a:	d100      	bne.n	800728e <memmove+0x2a>
 800728c:	bd10      	pop	{r4, pc}
 800728e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007292:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007296:	e7f7      	b.n	8007288 <memmove+0x24>

08007298 <_sbrk_r>:
 8007298:	b538      	push	{r3, r4, r5, lr}
 800729a:	4d06      	ldr	r5, [pc, #24]	; (80072b4 <_sbrk_r+0x1c>)
 800729c:	2300      	movs	r3, #0
 800729e:	4604      	mov	r4, r0
 80072a0:	4608      	mov	r0, r1
 80072a2:	602b      	str	r3, [r5, #0]
 80072a4:	f7f9 ff06 	bl	80010b4 <_sbrk>
 80072a8:	1c43      	adds	r3, r0, #1
 80072aa:	d102      	bne.n	80072b2 <_sbrk_r+0x1a>
 80072ac:	682b      	ldr	r3, [r5, #0]
 80072ae:	b103      	cbz	r3, 80072b2 <_sbrk_r+0x1a>
 80072b0:	6023      	str	r3, [r4, #0]
 80072b2:	bd38      	pop	{r3, r4, r5, pc}
 80072b4:	20000490 	.word	0x20000490

080072b8 <memcpy>:
 80072b8:	440a      	add	r2, r1
 80072ba:	4291      	cmp	r1, r2
 80072bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80072c0:	d100      	bne.n	80072c4 <memcpy+0xc>
 80072c2:	4770      	bx	lr
 80072c4:	b510      	push	{r4, lr}
 80072c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80072ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 80072ce:	4291      	cmp	r1, r2
 80072d0:	d1f9      	bne.n	80072c6 <memcpy+0xe>
 80072d2:	bd10      	pop	{r4, pc}

080072d4 <__assert_func>:
 80072d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80072d6:	4614      	mov	r4, r2
 80072d8:	461a      	mov	r2, r3
 80072da:	4b09      	ldr	r3, [pc, #36]	; (8007300 <__assert_func+0x2c>)
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	4605      	mov	r5, r0
 80072e0:	68d8      	ldr	r0, [r3, #12]
 80072e2:	b14c      	cbz	r4, 80072f8 <__assert_func+0x24>
 80072e4:	4b07      	ldr	r3, [pc, #28]	; (8007304 <__assert_func+0x30>)
 80072e6:	9100      	str	r1, [sp, #0]
 80072e8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80072ec:	4906      	ldr	r1, [pc, #24]	; (8007308 <__assert_func+0x34>)
 80072ee:	462b      	mov	r3, r5
 80072f0:	f000 f872 	bl	80073d8 <fiprintf>
 80072f4:	f000 f882 	bl	80073fc <abort>
 80072f8:	4b04      	ldr	r3, [pc, #16]	; (800730c <__assert_func+0x38>)
 80072fa:	461c      	mov	r4, r3
 80072fc:	e7f3      	b.n	80072e6 <__assert_func+0x12>
 80072fe:	bf00      	nop
 8007300:	20000064 	.word	0x20000064
 8007304:	08007bdf 	.word	0x08007bdf
 8007308:	08007bec 	.word	0x08007bec
 800730c:	08007c1a 	.word	0x08007c1a

08007310 <_calloc_r>:
 8007310:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007312:	fba1 2402 	umull	r2, r4, r1, r2
 8007316:	b94c      	cbnz	r4, 800732c <_calloc_r+0x1c>
 8007318:	4611      	mov	r1, r2
 800731a:	9201      	str	r2, [sp, #4]
 800731c:	f7ff f994 	bl	8006648 <_malloc_r>
 8007320:	9a01      	ldr	r2, [sp, #4]
 8007322:	4605      	mov	r5, r0
 8007324:	b930      	cbnz	r0, 8007334 <_calloc_r+0x24>
 8007326:	4628      	mov	r0, r5
 8007328:	b003      	add	sp, #12
 800732a:	bd30      	pop	{r4, r5, pc}
 800732c:	220c      	movs	r2, #12
 800732e:	6002      	str	r2, [r0, #0]
 8007330:	2500      	movs	r5, #0
 8007332:	e7f8      	b.n	8007326 <_calloc_r+0x16>
 8007334:	4621      	mov	r1, r4
 8007336:	f7fe fa9e 	bl	8005876 <memset>
 800733a:	e7f4      	b.n	8007326 <_calloc_r+0x16>

0800733c <__ascii_mbtowc>:
 800733c:	b082      	sub	sp, #8
 800733e:	b901      	cbnz	r1, 8007342 <__ascii_mbtowc+0x6>
 8007340:	a901      	add	r1, sp, #4
 8007342:	b142      	cbz	r2, 8007356 <__ascii_mbtowc+0x1a>
 8007344:	b14b      	cbz	r3, 800735a <__ascii_mbtowc+0x1e>
 8007346:	7813      	ldrb	r3, [r2, #0]
 8007348:	600b      	str	r3, [r1, #0]
 800734a:	7812      	ldrb	r2, [r2, #0]
 800734c:	1e10      	subs	r0, r2, #0
 800734e:	bf18      	it	ne
 8007350:	2001      	movne	r0, #1
 8007352:	b002      	add	sp, #8
 8007354:	4770      	bx	lr
 8007356:	4610      	mov	r0, r2
 8007358:	e7fb      	b.n	8007352 <__ascii_mbtowc+0x16>
 800735a:	f06f 0001 	mvn.w	r0, #1
 800735e:	e7f8      	b.n	8007352 <__ascii_mbtowc+0x16>

08007360 <_realloc_r>:
 8007360:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007364:	4680      	mov	r8, r0
 8007366:	4614      	mov	r4, r2
 8007368:	460e      	mov	r6, r1
 800736a:	b921      	cbnz	r1, 8007376 <_realloc_r+0x16>
 800736c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007370:	4611      	mov	r1, r2
 8007372:	f7ff b969 	b.w	8006648 <_malloc_r>
 8007376:	b92a      	cbnz	r2, 8007384 <_realloc_r+0x24>
 8007378:	f7ff f8f2 	bl	8006560 <_free_r>
 800737c:	4625      	mov	r5, r4
 800737e:	4628      	mov	r0, r5
 8007380:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007384:	f000 f841 	bl	800740a <_malloc_usable_size_r>
 8007388:	4284      	cmp	r4, r0
 800738a:	4607      	mov	r7, r0
 800738c:	d802      	bhi.n	8007394 <_realloc_r+0x34>
 800738e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007392:	d812      	bhi.n	80073ba <_realloc_r+0x5a>
 8007394:	4621      	mov	r1, r4
 8007396:	4640      	mov	r0, r8
 8007398:	f7ff f956 	bl	8006648 <_malloc_r>
 800739c:	4605      	mov	r5, r0
 800739e:	2800      	cmp	r0, #0
 80073a0:	d0ed      	beq.n	800737e <_realloc_r+0x1e>
 80073a2:	42bc      	cmp	r4, r7
 80073a4:	4622      	mov	r2, r4
 80073a6:	4631      	mov	r1, r6
 80073a8:	bf28      	it	cs
 80073aa:	463a      	movcs	r2, r7
 80073ac:	f7ff ff84 	bl	80072b8 <memcpy>
 80073b0:	4631      	mov	r1, r6
 80073b2:	4640      	mov	r0, r8
 80073b4:	f7ff f8d4 	bl	8006560 <_free_r>
 80073b8:	e7e1      	b.n	800737e <_realloc_r+0x1e>
 80073ba:	4635      	mov	r5, r6
 80073bc:	e7df      	b.n	800737e <_realloc_r+0x1e>

080073be <__ascii_wctomb>:
 80073be:	b149      	cbz	r1, 80073d4 <__ascii_wctomb+0x16>
 80073c0:	2aff      	cmp	r2, #255	; 0xff
 80073c2:	bf85      	ittet	hi
 80073c4:	238a      	movhi	r3, #138	; 0x8a
 80073c6:	6003      	strhi	r3, [r0, #0]
 80073c8:	700a      	strbls	r2, [r1, #0]
 80073ca:	f04f 30ff 	movhi.w	r0, #4294967295
 80073ce:	bf98      	it	ls
 80073d0:	2001      	movls	r0, #1
 80073d2:	4770      	bx	lr
 80073d4:	4608      	mov	r0, r1
 80073d6:	4770      	bx	lr

080073d8 <fiprintf>:
 80073d8:	b40e      	push	{r1, r2, r3}
 80073da:	b503      	push	{r0, r1, lr}
 80073dc:	4601      	mov	r1, r0
 80073de:	ab03      	add	r3, sp, #12
 80073e0:	4805      	ldr	r0, [pc, #20]	; (80073f8 <fiprintf+0x20>)
 80073e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80073e6:	6800      	ldr	r0, [r0, #0]
 80073e8:	9301      	str	r3, [sp, #4]
 80073ea:	f000 f83f 	bl	800746c <_vfiprintf_r>
 80073ee:	b002      	add	sp, #8
 80073f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80073f4:	b003      	add	sp, #12
 80073f6:	4770      	bx	lr
 80073f8:	20000064 	.word	0x20000064

080073fc <abort>:
 80073fc:	b508      	push	{r3, lr}
 80073fe:	2006      	movs	r0, #6
 8007400:	f000 fa0c 	bl	800781c <raise>
 8007404:	2001      	movs	r0, #1
 8007406:	f7f9 fddd 	bl	8000fc4 <_exit>

0800740a <_malloc_usable_size_r>:
 800740a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800740e:	1f18      	subs	r0, r3, #4
 8007410:	2b00      	cmp	r3, #0
 8007412:	bfbc      	itt	lt
 8007414:	580b      	ldrlt	r3, [r1, r0]
 8007416:	18c0      	addlt	r0, r0, r3
 8007418:	4770      	bx	lr

0800741a <__sfputc_r>:
 800741a:	6893      	ldr	r3, [r2, #8]
 800741c:	3b01      	subs	r3, #1
 800741e:	2b00      	cmp	r3, #0
 8007420:	b410      	push	{r4}
 8007422:	6093      	str	r3, [r2, #8]
 8007424:	da08      	bge.n	8007438 <__sfputc_r+0x1e>
 8007426:	6994      	ldr	r4, [r2, #24]
 8007428:	42a3      	cmp	r3, r4
 800742a:	db01      	blt.n	8007430 <__sfputc_r+0x16>
 800742c:	290a      	cmp	r1, #10
 800742e:	d103      	bne.n	8007438 <__sfputc_r+0x1e>
 8007430:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007434:	f000 b934 	b.w	80076a0 <__swbuf_r>
 8007438:	6813      	ldr	r3, [r2, #0]
 800743a:	1c58      	adds	r0, r3, #1
 800743c:	6010      	str	r0, [r2, #0]
 800743e:	7019      	strb	r1, [r3, #0]
 8007440:	4608      	mov	r0, r1
 8007442:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007446:	4770      	bx	lr

08007448 <__sfputs_r>:
 8007448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800744a:	4606      	mov	r6, r0
 800744c:	460f      	mov	r7, r1
 800744e:	4614      	mov	r4, r2
 8007450:	18d5      	adds	r5, r2, r3
 8007452:	42ac      	cmp	r4, r5
 8007454:	d101      	bne.n	800745a <__sfputs_r+0x12>
 8007456:	2000      	movs	r0, #0
 8007458:	e007      	b.n	800746a <__sfputs_r+0x22>
 800745a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800745e:	463a      	mov	r2, r7
 8007460:	4630      	mov	r0, r6
 8007462:	f7ff ffda 	bl	800741a <__sfputc_r>
 8007466:	1c43      	adds	r3, r0, #1
 8007468:	d1f3      	bne.n	8007452 <__sfputs_r+0xa>
 800746a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800746c <_vfiprintf_r>:
 800746c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007470:	460d      	mov	r5, r1
 8007472:	b09d      	sub	sp, #116	; 0x74
 8007474:	4614      	mov	r4, r2
 8007476:	4698      	mov	r8, r3
 8007478:	4606      	mov	r6, r0
 800747a:	b118      	cbz	r0, 8007484 <_vfiprintf_r+0x18>
 800747c:	6a03      	ldr	r3, [r0, #32]
 800747e:	b90b      	cbnz	r3, 8007484 <_vfiprintf_r+0x18>
 8007480:	f7fe f960 	bl	8005744 <__sinit>
 8007484:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007486:	07d9      	lsls	r1, r3, #31
 8007488:	d405      	bmi.n	8007496 <_vfiprintf_r+0x2a>
 800748a:	89ab      	ldrh	r3, [r5, #12]
 800748c:	059a      	lsls	r2, r3, #22
 800748e:	d402      	bmi.n	8007496 <_vfiprintf_r+0x2a>
 8007490:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007492:	f7fe fa6e 	bl	8005972 <__retarget_lock_acquire_recursive>
 8007496:	89ab      	ldrh	r3, [r5, #12]
 8007498:	071b      	lsls	r3, r3, #28
 800749a:	d501      	bpl.n	80074a0 <_vfiprintf_r+0x34>
 800749c:	692b      	ldr	r3, [r5, #16]
 800749e:	b99b      	cbnz	r3, 80074c8 <_vfiprintf_r+0x5c>
 80074a0:	4629      	mov	r1, r5
 80074a2:	4630      	mov	r0, r6
 80074a4:	f000 f93a 	bl	800771c <__swsetup_r>
 80074a8:	b170      	cbz	r0, 80074c8 <_vfiprintf_r+0x5c>
 80074aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80074ac:	07dc      	lsls	r4, r3, #31
 80074ae:	d504      	bpl.n	80074ba <_vfiprintf_r+0x4e>
 80074b0:	f04f 30ff 	mov.w	r0, #4294967295
 80074b4:	b01d      	add	sp, #116	; 0x74
 80074b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074ba:	89ab      	ldrh	r3, [r5, #12]
 80074bc:	0598      	lsls	r0, r3, #22
 80074be:	d4f7      	bmi.n	80074b0 <_vfiprintf_r+0x44>
 80074c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80074c2:	f7fe fa57 	bl	8005974 <__retarget_lock_release_recursive>
 80074c6:	e7f3      	b.n	80074b0 <_vfiprintf_r+0x44>
 80074c8:	2300      	movs	r3, #0
 80074ca:	9309      	str	r3, [sp, #36]	; 0x24
 80074cc:	2320      	movs	r3, #32
 80074ce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80074d2:	f8cd 800c 	str.w	r8, [sp, #12]
 80074d6:	2330      	movs	r3, #48	; 0x30
 80074d8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800768c <_vfiprintf_r+0x220>
 80074dc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80074e0:	f04f 0901 	mov.w	r9, #1
 80074e4:	4623      	mov	r3, r4
 80074e6:	469a      	mov	sl, r3
 80074e8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80074ec:	b10a      	cbz	r2, 80074f2 <_vfiprintf_r+0x86>
 80074ee:	2a25      	cmp	r2, #37	; 0x25
 80074f0:	d1f9      	bne.n	80074e6 <_vfiprintf_r+0x7a>
 80074f2:	ebba 0b04 	subs.w	fp, sl, r4
 80074f6:	d00b      	beq.n	8007510 <_vfiprintf_r+0xa4>
 80074f8:	465b      	mov	r3, fp
 80074fa:	4622      	mov	r2, r4
 80074fc:	4629      	mov	r1, r5
 80074fe:	4630      	mov	r0, r6
 8007500:	f7ff ffa2 	bl	8007448 <__sfputs_r>
 8007504:	3001      	adds	r0, #1
 8007506:	f000 80a9 	beq.w	800765c <_vfiprintf_r+0x1f0>
 800750a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800750c:	445a      	add	r2, fp
 800750e:	9209      	str	r2, [sp, #36]	; 0x24
 8007510:	f89a 3000 	ldrb.w	r3, [sl]
 8007514:	2b00      	cmp	r3, #0
 8007516:	f000 80a1 	beq.w	800765c <_vfiprintf_r+0x1f0>
 800751a:	2300      	movs	r3, #0
 800751c:	f04f 32ff 	mov.w	r2, #4294967295
 8007520:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007524:	f10a 0a01 	add.w	sl, sl, #1
 8007528:	9304      	str	r3, [sp, #16]
 800752a:	9307      	str	r3, [sp, #28]
 800752c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007530:	931a      	str	r3, [sp, #104]	; 0x68
 8007532:	4654      	mov	r4, sl
 8007534:	2205      	movs	r2, #5
 8007536:	f814 1b01 	ldrb.w	r1, [r4], #1
 800753a:	4854      	ldr	r0, [pc, #336]	; (800768c <_vfiprintf_r+0x220>)
 800753c:	f7f8 fe80 	bl	8000240 <memchr>
 8007540:	9a04      	ldr	r2, [sp, #16]
 8007542:	b9d8      	cbnz	r0, 800757c <_vfiprintf_r+0x110>
 8007544:	06d1      	lsls	r1, r2, #27
 8007546:	bf44      	itt	mi
 8007548:	2320      	movmi	r3, #32
 800754a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800754e:	0713      	lsls	r3, r2, #28
 8007550:	bf44      	itt	mi
 8007552:	232b      	movmi	r3, #43	; 0x2b
 8007554:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007558:	f89a 3000 	ldrb.w	r3, [sl]
 800755c:	2b2a      	cmp	r3, #42	; 0x2a
 800755e:	d015      	beq.n	800758c <_vfiprintf_r+0x120>
 8007560:	9a07      	ldr	r2, [sp, #28]
 8007562:	4654      	mov	r4, sl
 8007564:	2000      	movs	r0, #0
 8007566:	f04f 0c0a 	mov.w	ip, #10
 800756a:	4621      	mov	r1, r4
 800756c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007570:	3b30      	subs	r3, #48	; 0x30
 8007572:	2b09      	cmp	r3, #9
 8007574:	d94d      	bls.n	8007612 <_vfiprintf_r+0x1a6>
 8007576:	b1b0      	cbz	r0, 80075a6 <_vfiprintf_r+0x13a>
 8007578:	9207      	str	r2, [sp, #28]
 800757a:	e014      	b.n	80075a6 <_vfiprintf_r+0x13a>
 800757c:	eba0 0308 	sub.w	r3, r0, r8
 8007580:	fa09 f303 	lsl.w	r3, r9, r3
 8007584:	4313      	orrs	r3, r2
 8007586:	9304      	str	r3, [sp, #16]
 8007588:	46a2      	mov	sl, r4
 800758a:	e7d2      	b.n	8007532 <_vfiprintf_r+0xc6>
 800758c:	9b03      	ldr	r3, [sp, #12]
 800758e:	1d19      	adds	r1, r3, #4
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	9103      	str	r1, [sp, #12]
 8007594:	2b00      	cmp	r3, #0
 8007596:	bfbb      	ittet	lt
 8007598:	425b      	neglt	r3, r3
 800759a:	f042 0202 	orrlt.w	r2, r2, #2
 800759e:	9307      	strge	r3, [sp, #28]
 80075a0:	9307      	strlt	r3, [sp, #28]
 80075a2:	bfb8      	it	lt
 80075a4:	9204      	strlt	r2, [sp, #16]
 80075a6:	7823      	ldrb	r3, [r4, #0]
 80075a8:	2b2e      	cmp	r3, #46	; 0x2e
 80075aa:	d10c      	bne.n	80075c6 <_vfiprintf_r+0x15a>
 80075ac:	7863      	ldrb	r3, [r4, #1]
 80075ae:	2b2a      	cmp	r3, #42	; 0x2a
 80075b0:	d134      	bne.n	800761c <_vfiprintf_r+0x1b0>
 80075b2:	9b03      	ldr	r3, [sp, #12]
 80075b4:	1d1a      	adds	r2, r3, #4
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	9203      	str	r2, [sp, #12]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	bfb8      	it	lt
 80075be:	f04f 33ff 	movlt.w	r3, #4294967295
 80075c2:	3402      	adds	r4, #2
 80075c4:	9305      	str	r3, [sp, #20]
 80075c6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800769c <_vfiprintf_r+0x230>
 80075ca:	7821      	ldrb	r1, [r4, #0]
 80075cc:	2203      	movs	r2, #3
 80075ce:	4650      	mov	r0, sl
 80075d0:	f7f8 fe36 	bl	8000240 <memchr>
 80075d4:	b138      	cbz	r0, 80075e6 <_vfiprintf_r+0x17a>
 80075d6:	9b04      	ldr	r3, [sp, #16]
 80075d8:	eba0 000a 	sub.w	r0, r0, sl
 80075dc:	2240      	movs	r2, #64	; 0x40
 80075de:	4082      	lsls	r2, r0
 80075e0:	4313      	orrs	r3, r2
 80075e2:	3401      	adds	r4, #1
 80075e4:	9304      	str	r3, [sp, #16]
 80075e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80075ea:	4829      	ldr	r0, [pc, #164]	; (8007690 <_vfiprintf_r+0x224>)
 80075ec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80075f0:	2206      	movs	r2, #6
 80075f2:	f7f8 fe25 	bl	8000240 <memchr>
 80075f6:	2800      	cmp	r0, #0
 80075f8:	d03f      	beq.n	800767a <_vfiprintf_r+0x20e>
 80075fa:	4b26      	ldr	r3, [pc, #152]	; (8007694 <_vfiprintf_r+0x228>)
 80075fc:	bb1b      	cbnz	r3, 8007646 <_vfiprintf_r+0x1da>
 80075fe:	9b03      	ldr	r3, [sp, #12]
 8007600:	3307      	adds	r3, #7
 8007602:	f023 0307 	bic.w	r3, r3, #7
 8007606:	3308      	adds	r3, #8
 8007608:	9303      	str	r3, [sp, #12]
 800760a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800760c:	443b      	add	r3, r7
 800760e:	9309      	str	r3, [sp, #36]	; 0x24
 8007610:	e768      	b.n	80074e4 <_vfiprintf_r+0x78>
 8007612:	fb0c 3202 	mla	r2, ip, r2, r3
 8007616:	460c      	mov	r4, r1
 8007618:	2001      	movs	r0, #1
 800761a:	e7a6      	b.n	800756a <_vfiprintf_r+0xfe>
 800761c:	2300      	movs	r3, #0
 800761e:	3401      	adds	r4, #1
 8007620:	9305      	str	r3, [sp, #20]
 8007622:	4619      	mov	r1, r3
 8007624:	f04f 0c0a 	mov.w	ip, #10
 8007628:	4620      	mov	r0, r4
 800762a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800762e:	3a30      	subs	r2, #48	; 0x30
 8007630:	2a09      	cmp	r2, #9
 8007632:	d903      	bls.n	800763c <_vfiprintf_r+0x1d0>
 8007634:	2b00      	cmp	r3, #0
 8007636:	d0c6      	beq.n	80075c6 <_vfiprintf_r+0x15a>
 8007638:	9105      	str	r1, [sp, #20]
 800763a:	e7c4      	b.n	80075c6 <_vfiprintf_r+0x15a>
 800763c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007640:	4604      	mov	r4, r0
 8007642:	2301      	movs	r3, #1
 8007644:	e7f0      	b.n	8007628 <_vfiprintf_r+0x1bc>
 8007646:	ab03      	add	r3, sp, #12
 8007648:	9300      	str	r3, [sp, #0]
 800764a:	462a      	mov	r2, r5
 800764c:	4b12      	ldr	r3, [pc, #72]	; (8007698 <_vfiprintf_r+0x22c>)
 800764e:	a904      	add	r1, sp, #16
 8007650:	4630      	mov	r0, r6
 8007652:	f7fd fc41 	bl	8004ed8 <_printf_float>
 8007656:	4607      	mov	r7, r0
 8007658:	1c78      	adds	r0, r7, #1
 800765a:	d1d6      	bne.n	800760a <_vfiprintf_r+0x19e>
 800765c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800765e:	07d9      	lsls	r1, r3, #31
 8007660:	d405      	bmi.n	800766e <_vfiprintf_r+0x202>
 8007662:	89ab      	ldrh	r3, [r5, #12]
 8007664:	059a      	lsls	r2, r3, #22
 8007666:	d402      	bmi.n	800766e <_vfiprintf_r+0x202>
 8007668:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800766a:	f7fe f983 	bl	8005974 <__retarget_lock_release_recursive>
 800766e:	89ab      	ldrh	r3, [r5, #12]
 8007670:	065b      	lsls	r3, r3, #25
 8007672:	f53f af1d 	bmi.w	80074b0 <_vfiprintf_r+0x44>
 8007676:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007678:	e71c      	b.n	80074b4 <_vfiprintf_r+0x48>
 800767a:	ab03      	add	r3, sp, #12
 800767c:	9300      	str	r3, [sp, #0]
 800767e:	462a      	mov	r2, r5
 8007680:	4b05      	ldr	r3, [pc, #20]	; (8007698 <_vfiprintf_r+0x22c>)
 8007682:	a904      	add	r1, sp, #16
 8007684:	4630      	mov	r0, r6
 8007686:	f7fd feaf 	bl	80053e8 <_printf_i>
 800768a:	e7e4      	b.n	8007656 <_vfiprintf_r+0x1ea>
 800768c:	08007bc4 	.word	0x08007bc4
 8007690:	08007bce 	.word	0x08007bce
 8007694:	08004ed9 	.word	0x08004ed9
 8007698:	08007449 	.word	0x08007449
 800769c:	08007bca 	.word	0x08007bca

080076a0 <__swbuf_r>:
 80076a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076a2:	460e      	mov	r6, r1
 80076a4:	4614      	mov	r4, r2
 80076a6:	4605      	mov	r5, r0
 80076a8:	b118      	cbz	r0, 80076b2 <__swbuf_r+0x12>
 80076aa:	6a03      	ldr	r3, [r0, #32]
 80076ac:	b90b      	cbnz	r3, 80076b2 <__swbuf_r+0x12>
 80076ae:	f7fe f849 	bl	8005744 <__sinit>
 80076b2:	69a3      	ldr	r3, [r4, #24]
 80076b4:	60a3      	str	r3, [r4, #8]
 80076b6:	89a3      	ldrh	r3, [r4, #12]
 80076b8:	071a      	lsls	r2, r3, #28
 80076ba:	d525      	bpl.n	8007708 <__swbuf_r+0x68>
 80076bc:	6923      	ldr	r3, [r4, #16]
 80076be:	b31b      	cbz	r3, 8007708 <__swbuf_r+0x68>
 80076c0:	6823      	ldr	r3, [r4, #0]
 80076c2:	6922      	ldr	r2, [r4, #16]
 80076c4:	1a98      	subs	r0, r3, r2
 80076c6:	6963      	ldr	r3, [r4, #20]
 80076c8:	b2f6      	uxtb	r6, r6
 80076ca:	4283      	cmp	r3, r0
 80076cc:	4637      	mov	r7, r6
 80076ce:	dc04      	bgt.n	80076da <__swbuf_r+0x3a>
 80076d0:	4621      	mov	r1, r4
 80076d2:	4628      	mov	r0, r5
 80076d4:	f7ff fd9e 	bl	8007214 <_fflush_r>
 80076d8:	b9e0      	cbnz	r0, 8007714 <__swbuf_r+0x74>
 80076da:	68a3      	ldr	r3, [r4, #8]
 80076dc:	3b01      	subs	r3, #1
 80076de:	60a3      	str	r3, [r4, #8]
 80076e0:	6823      	ldr	r3, [r4, #0]
 80076e2:	1c5a      	adds	r2, r3, #1
 80076e4:	6022      	str	r2, [r4, #0]
 80076e6:	701e      	strb	r6, [r3, #0]
 80076e8:	6962      	ldr	r2, [r4, #20]
 80076ea:	1c43      	adds	r3, r0, #1
 80076ec:	429a      	cmp	r2, r3
 80076ee:	d004      	beq.n	80076fa <__swbuf_r+0x5a>
 80076f0:	89a3      	ldrh	r3, [r4, #12]
 80076f2:	07db      	lsls	r3, r3, #31
 80076f4:	d506      	bpl.n	8007704 <__swbuf_r+0x64>
 80076f6:	2e0a      	cmp	r6, #10
 80076f8:	d104      	bne.n	8007704 <__swbuf_r+0x64>
 80076fa:	4621      	mov	r1, r4
 80076fc:	4628      	mov	r0, r5
 80076fe:	f7ff fd89 	bl	8007214 <_fflush_r>
 8007702:	b938      	cbnz	r0, 8007714 <__swbuf_r+0x74>
 8007704:	4638      	mov	r0, r7
 8007706:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007708:	4621      	mov	r1, r4
 800770a:	4628      	mov	r0, r5
 800770c:	f000 f806 	bl	800771c <__swsetup_r>
 8007710:	2800      	cmp	r0, #0
 8007712:	d0d5      	beq.n	80076c0 <__swbuf_r+0x20>
 8007714:	f04f 37ff 	mov.w	r7, #4294967295
 8007718:	e7f4      	b.n	8007704 <__swbuf_r+0x64>
	...

0800771c <__swsetup_r>:
 800771c:	b538      	push	{r3, r4, r5, lr}
 800771e:	4b2a      	ldr	r3, [pc, #168]	; (80077c8 <__swsetup_r+0xac>)
 8007720:	4605      	mov	r5, r0
 8007722:	6818      	ldr	r0, [r3, #0]
 8007724:	460c      	mov	r4, r1
 8007726:	b118      	cbz	r0, 8007730 <__swsetup_r+0x14>
 8007728:	6a03      	ldr	r3, [r0, #32]
 800772a:	b90b      	cbnz	r3, 8007730 <__swsetup_r+0x14>
 800772c:	f7fe f80a 	bl	8005744 <__sinit>
 8007730:	89a3      	ldrh	r3, [r4, #12]
 8007732:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007736:	0718      	lsls	r0, r3, #28
 8007738:	d422      	bmi.n	8007780 <__swsetup_r+0x64>
 800773a:	06d9      	lsls	r1, r3, #27
 800773c:	d407      	bmi.n	800774e <__swsetup_r+0x32>
 800773e:	2309      	movs	r3, #9
 8007740:	602b      	str	r3, [r5, #0]
 8007742:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007746:	81a3      	strh	r3, [r4, #12]
 8007748:	f04f 30ff 	mov.w	r0, #4294967295
 800774c:	e034      	b.n	80077b8 <__swsetup_r+0x9c>
 800774e:	0758      	lsls	r0, r3, #29
 8007750:	d512      	bpl.n	8007778 <__swsetup_r+0x5c>
 8007752:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007754:	b141      	cbz	r1, 8007768 <__swsetup_r+0x4c>
 8007756:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800775a:	4299      	cmp	r1, r3
 800775c:	d002      	beq.n	8007764 <__swsetup_r+0x48>
 800775e:	4628      	mov	r0, r5
 8007760:	f7fe fefe 	bl	8006560 <_free_r>
 8007764:	2300      	movs	r3, #0
 8007766:	6363      	str	r3, [r4, #52]	; 0x34
 8007768:	89a3      	ldrh	r3, [r4, #12]
 800776a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800776e:	81a3      	strh	r3, [r4, #12]
 8007770:	2300      	movs	r3, #0
 8007772:	6063      	str	r3, [r4, #4]
 8007774:	6923      	ldr	r3, [r4, #16]
 8007776:	6023      	str	r3, [r4, #0]
 8007778:	89a3      	ldrh	r3, [r4, #12]
 800777a:	f043 0308 	orr.w	r3, r3, #8
 800777e:	81a3      	strh	r3, [r4, #12]
 8007780:	6923      	ldr	r3, [r4, #16]
 8007782:	b94b      	cbnz	r3, 8007798 <__swsetup_r+0x7c>
 8007784:	89a3      	ldrh	r3, [r4, #12]
 8007786:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800778a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800778e:	d003      	beq.n	8007798 <__swsetup_r+0x7c>
 8007790:	4621      	mov	r1, r4
 8007792:	4628      	mov	r0, r5
 8007794:	f000 f884 	bl	80078a0 <__smakebuf_r>
 8007798:	89a0      	ldrh	r0, [r4, #12]
 800779a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800779e:	f010 0301 	ands.w	r3, r0, #1
 80077a2:	d00a      	beq.n	80077ba <__swsetup_r+0x9e>
 80077a4:	2300      	movs	r3, #0
 80077a6:	60a3      	str	r3, [r4, #8]
 80077a8:	6963      	ldr	r3, [r4, #20]
 80077aa:	425b      	negs	r3, r3
 80077ac:	61a3      	str	r3, [r4, #24]
 80077ae:	6923      	ldr	r3, [r4, #16]
 80077b0:	b943      	cbnz	r3, 80077c4 <__swsetup_r+0xa8>
 80077b2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80077b6:	d1c4      	bne.n	8007742 <__swsetup_r+0x26>
 80077b8:	bd38      	pop	{r3, r4, r5, pc}
 80077ba:	0781      	lsls	r1, r0, #30
 80077bc:	bf58      	it	pl
 80077be:	6963      	ldrpl	r3, [r4, #20]
 80077c0:	60a3      	str	r3, [r4, #8]
 80077c2:	e7f4      	b.n	80077ae <__swsetup_r+0x92>
 80077c4:	2000      	movs	r0, #0
 80077c6:	e7f7      	b.n	80077b8 <__swsetup_r+0x9c>
 80077c8:	20000064 	.word	0x20000064

080077cc <_raise_r>:
 80077cc:	291f      	cmp	r1, #31
 80077ce:	b538      	push	{r3, r4, r5, lr}
 80077d0:	4604      	mov	r4, r0
 80077d2:	460d      	mov	r5, r1
 80077d4:	d904      	bls.n	80077e0 <_raise_r+0x14>
 80077d6:	2316      	movs	r3, #22
 80077d8:	6003      	str	r3, [r0, #0]
 80077da:	f04f 30ff 	mov.w	r0, #4294967295
 80077de:	bd38      	pop	{r3, r4, r5, pc}
 80077e0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80077e2:	b112      	cbz	r2, 80077ea <_raise_r+0x1e>
 80077e4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80077e8:	b94b      	cbnz	r3, 80077fe <_raise_r+0x32>
 80077ea:	4620      	mov	r0, r4
 80077ec:	f000 f830 	bl	8007850 <_getpid_r>
 80077f0:	462a      	mov	r2, r5
 80077f2:	4601      	mov	r1, r0
 80077f4:	4620      	mov	r0, r4
 80077f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80077fa:	f000 b817 	b.w	800782c <_kill_r>
 80077fe:	2b01      	cmp	r3, #1
 8007800:	d00a      	beq.n	8007818 <_raise_r+0x4c>
 8007802:	1c59      	adds	r1, r3, #1
 8007804:	d103      	bne.n	800780e <_raise_r+0x42>
 8007806:	2316      	movs	r3, #22
 8007808:	6003      	str	r3, [r0, #0]
 800780a:	2001      	movs	r0, #1
 800780c:	e7e7      	b.n	80077de <_raise_r+0x12>
 800780e:	2400      	movs	r4, #0
 8007810:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007814:	4628      	mov	r0, r5
 8007816:	4798      	blx	r3
 8007818:	2000      	movs	r0, #0
 800781a:	e7e0      	b.n	80077de <_raise_r+0x12>

0800781c <raise>:
 800781c:	4b02      	ldr	r3, [pc, #8]	; (8007828 <raise+0xc>)
 800781e:	4601      	mov	r1, r0
 8007820:	6818      	ldr	r0, [r3, #0]
 8007822:	f7ff bfd3 	b.w	80077cc <_raise_r>
 8007826:	bf00      	nop
 8007828:	20000064 	.word	0x20000064

0800782c <_kill_r>:
 800782c:	b538      	push	{r3, r4, r5, lr}
 800782e:	4d07      	ldr	r5, [pc, #28]	; (800784c <_kill_r+0x20>)
 8007830:	2300      	movs	r3, #0
 8007832:	4604      	mov	r4, r0
 8007834:	4608      	mov	r0, r1
 8007836:	4611      	mov	r1, r2
 8007838:	602b      	str	r3, [r5, #0]
 800783a:	f7f9 fbb3 	bl	8000fa4 <_kill>
 800783e:	1c43      	adds	r3, r0, #1
 8007840:	d102      	bne.n	8007848 <_kill_r+0x1c>
 8007842:	682b      	ldr	r3, [r5, #0]
 8007844:	b103      	cbz	r3, 8007848 <_kill_r+0x1c>
 8007846:	6023      	str	r3, [r4, #0]
 8007848:	bd38      	pop	{r3, r4, r5, pc}
 800784a:	bf00      	nop
 800784c:	20000490 	.word	0x20000490

08007850 <_getpid_r>:
 8007850:	f7f9 bba0 	b.w	8000f94 <_getpid>

08007854 <__swhatbuf_r>:
 8007854:	b570      	push	{r4, r5, r6, lr}
 8007856:	460c      	mov	r4, r1
 8007858:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800785c:	2900      	cmp	r1, #0
 800785e:	b096      	sub	sp, #88	; 0x58
 8007860:	4615      	mov	r5, r2
 8007862:	461e      	mov	r6, r3
 8007864:	da0d      	bge.n	8007882 <__swhatbuf_r+0x2e>
 8007866:	89a3      	ldrh	r3, [r4, #12]
 8007868:	f013 0f80 	tst.w	r3, #128	; 0x80
 800786c:	f04f 0100 	mov.w	r1, #0
 8007870:	bf0c      	ite	eq
 8007872:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8007876:	2340      	movne	r3, #64	; 0x40
 8007878:	2000      	movs	r0, #0
 800787a:	6031      	str	r1, [r6, #0]
 800787c:	602b      	str	r3, [r5, #0]
 800787e:	b016      	add	sp, #88	; 0x58
 8007880:	bd70      	pop	{r4, r5, r6, pc}
 8007882:	466a      	mov	r2, sp
 8007884:	f000 f848 	bl	8007918 <_fstat_r>
 8007888:	2800      	cmp	r0, #0
 800788a:	dbec      	blt.n	8007866 <__swhatbuf_r+0x12>
 800788c:	9901      	ldr	r1, [sp, #4]
 800788e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8007892:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8007896:	4259      	negs	r1, r3
 8007898:	4159      	adcs	r1, r3
 800789a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800789e:	e7eb      	b.n	8007878 <__swhatbuf_r+0x24>

080078a0 <__smakebuf_r>:
 80078a0:	898b      	ldrh	r3, [r1, #12]
 80078a2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80078a4:	079d      	lsls	r5, r3, #30
 80078a6:	4606      	mov	r6, r0
 80078a8:	460c      	mov	r4, r1
 80078aa:	d507      	bpl.n	80078bc <__smakebuf_r+0x1c>
 80078ac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80078b0:	6023      	str	r3, [r4, #0]
 80078b2:	6123      	str	r3, [r4, #16]
 80078b4:	2301      	movs	r3, #1
 80078b6:	6163      	str	r3, [r4, #20]
 80078b8:	b002      	add	sp, #8
 80078ba:	bd70      	pop	{r4, r5, r6, pc}
 80078bc:	ab01      	add	r3, sp, #4
 80078be:	466a      	mov	r2, sp
 80078c0:	f7ff ffc8 	bl	8007854 <__swhatbuf_r>
 80078c4:	9900      	ldr	r1, [sp, #0]
 80078c6:	4605      	mov	r5, r0
 80078c8:	4630      	mov	r0, r6
 80078ca:	f7fe febd 	bl	8006648 <_malloc_r>
 80078ce:	b948      	cbnz	r0, 80078e4 <__smakebuf_r+0x44>
 80078d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80078d4:	059a      	lsls	r2, r3, #22
 80078d6:	d4ef      	bmi.n	80078b8 <__smakebuf_r+0x18>
 80078d8:	f023 0303 	bic.w	r3, r3, #3
 80078dc:	f043 0302 	orr.w	r3, r3, #2
 80078e0:	81a3      	strh	r3, [r4, #12]
 80078e2:	e7e3      	b.n	80078ac <__smakebuf_r+0xc>
 80078e4:	89a3      	ldrh	r3, [r4, #12]
 80078e6:	6020      	str	r0, [r4, #0]
 80078e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078ec:	81a3      	strh	r3, [r4, #12]
 80078ee:	9b00      	ldr	r3, [sp, #0]
 80078f0:	6163      	str	r3, [r4, #20]
 80078f2:	9b01      	ldr	r3, [sp, #4]
 80078f4:	6120      	str	r0, [r4, #16]
 80078f6:	b15b      	cbz	r3, 8007910 <__smakebuf_r+0x70>
 80078f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80078fc:	4630      	mov	r0, r6
 80078fe:	f000 f81d 	bl	800793c <_isatty_r>
 8007902:	b128      	cbz	r0, 8007910 <__smakebuf_r+0x70>
 8007904:	89a3      	ldrh	r3, [r4, #12]
 8007906:	f023 0303 	bic.w	r3, r3, #3
 800790a:	f043 0301 	orr.w	r3, r3, #1
 800790e:	81a3      	strh	r3, [r4, #12]
 8007910:	89a3      	ldrh	r3, [r4, #12]
 8007912:	431d      	orrs	r5, r3
 8007914:	81a5      	strh	r5, [r4, #12]
 8007916:	e7cf      	b.n	80078b8 <__smakebuf_r+0x18>

08007918 <_fstat_r>:
 8007918:	b538      	push	{r3, r4, r5, lr}
 800791a:	4d07      	ldr	r5, [pc, #28]	; (8007938 <_fstat_r+0x20>)
 800791c:	2300      	movs	r3, #0
 800791e:	4604      	mov	r4, r0
 8007920:	4608      	mov	r0, r1
 8007922:	4611      	mov	r1, r2
 8007924:	602b      	str	r3, [r5, #0]
 8007926:	f7f9 fb9c 	bl	8001062 <_fstat>
 800792a:	1c43      	adds	r3, r0, #1
 800792c:	d102      	bne.n	8007934 <_fstat_r+0x1c>
 800792e:	682b      	ldr	r3, [r5, #0]
 8007930:	b103      	cbz	r3, 8007934 <_fstat_r+0x1c>
 8007932:	6023      	str	r3, [r4, #0]
 8007934:	bd38      	pop	{r3, r4, r5, pc}
 8007936:	bf00      	nop
 8007938:	20000490 	.word	0x20000490

0800793c <_isatty_r>:
 800793c:	b538      	push	{r3, r4, r5, lr}
 800793e:	4d06      	ldr	r5, [pc, #24]	; (8007958 <_isatty_r+0x1c>)
 8007940:	2300      	movs	r3, #0
 8007942:	4604      	mov	r4, r0
 8007944:	4608      	mov	r0, r1
 8007946:	602b      	str	r3, [r5, #0]
 8007948:	f7f9 fb9b 	bl	8001082 <_isatty>
 800794c:	1c43      	adds	r3, r0, #1
 800794e:	d102      	bne.n	8007956 <_isatty_r+0x1a>
 8007950:	682b      	ldr	r3, [r5, #0]
 8007952:	b103      	cbz	r3, 8007956 <_isatty_r+0x1a>
 8007954:	6023      	str	r3, [r4, #0]
 8007956:	bd38      	pop	{r3, r4, r5, pc}
 8007958:	20000490 	.word	0x20000490

0800795c <_init>:
 800795c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800795e:	bf00      	nop
 8007960:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007962:	bc08      	pop	{r3}
 8007964:	469e      	mov	lr, r3
 8007966:	4770      	bx	lr

08007968 <_fini>:
 8007968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800796a:	bf00      	nop
 800796c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800796e:	bc08      	pop	{r3}
 8007970:	469e      	mov	lr, r3
 8007972:	4770      	bx	lr
